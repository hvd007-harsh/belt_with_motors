
Sensor_fusion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a674  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  0800a788  0800a788  0001a788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac48  0800ac48  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800ac48  0800ac48  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ac48  0800ac48  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac48  0800ac48  0001ac48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac4c  0800ac4c  0001ac4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ac50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  200001e0  0800ae30  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  0800ae30  00020558  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f42  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002541  00000000  00000000  0003114b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  00033690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  00034670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1e3  00000000  00000000  00035560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148d7  00000000  00000000  0004f743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f0eb  00000000  00000000  0006401a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3105  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000587c  00000000  00000000  000f3158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a76c 	.word	0x0800a76c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800a76c 	.word	0x0800a76c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001130:	4b34      	ldr	r3, [pc, #208]	; (8001204 <MX_GPIO_Init+0xe8>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a33      	ldr	r2, [pc, #204]	; (8001204 <MX_GPIO_Init+0xe8>)
 8001136:	f043 0320 	orr.w	r3, r3, #32
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b31      	ldr	r3, [pc, #196]	; (8001204 <MX_GPIO_Init+0xe8>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f003 0320 	and.w	r3, r3, #32
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001148:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <MX_GPIO_Init+0xe8>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a2d      	ldr	r2, [pc, #180]	; (8001204 <MX_GPIO_Init+0xe8>)
 800114e:	f043 0304 	orr.w	r3, r3, #4
 8001152:	6193      	str	r3, [r2, #24]
 8001154:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <MX_GPIO_Init+0xe8>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001160:	4b28      	ldr	r3, [pc, #160]	; (8001204 <MX_GPIO_Init+0xe8>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a27      	ldr	r2, [pc, #156]	; (8001204 <MX_GPIO_Init+0xe8>)
 8001166:	f043 0308 	orr.w	r3, r3, #8
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b25      	ldr	r3, [pc, #148]	; (8001204 <MX_GPIO_Init+0xe8>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0308 	and.w	r3, r3, #8
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800117e:	4822      	ldr	r0, [pc, #136]	; (8001208 <MX_GPIO_Init+0xec>)
 8001180:	f003 f841 	bl	8004206 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001184:	2304      	movs	r3, #4
 8001186:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800118c:	2301      	movs	r3, #1
 800118e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	4619      	mov	r1, r3
 8001196:	481d      	ldr	r0, [pc, #116]	; (800120c <MX_GPIO_Init+0xf0>)
 8001198:	f002 fe9a 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800119c:	2303      	movs	r3, #3
 800119e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	4619      	mov	r1, r3
 80011ae:	4816      	ldr	r0, [pc, #88]	; (8001208 <MX_GPIO_Init+0xec>)
 80011b0:	f002 fe8e 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80011b4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80011b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2302      	movs	r3, #2
 80011c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c6:	f107 0310 	add.w	r3, r7, #16
 80011ca:	4619      	mov	r1, r3
 80011cc:	480e      	ldr	r0, [pc, #56]	; (8001208 <MX_GPIO_Init+0xec>)
 80011ce:	f002 fe7f 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011d2:	2308      	movs	r3, #8
 80011d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_GPIO_Init+0xf4>)
 80011d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011da:	2301      	movs	r3, #1
 80011dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	4619      	mov	r1, r3
 80011e4:	4808      	ldr	r0, [pc, #32]	; (8001208 <MX_GPIO_Init+0xec>)
 80011e6:	f002 fe73 	bl	8003ed0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2101      	movs	r1, #1
 80011ee:	2009      	movs	r0, #9
 80011f0:	f002 fe37 	bl	8003e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80011f4:	2009      	movs	r0, #9
 80011f6:	f002 fe50 	bl	8003e9a <HAL_NVIC_EnableIRQ>

}
 80011fa:	bf00      	nop
 80011fc:	3720      	adds	r7, #32
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40021000 	.word	0x40021000
 8001208:	40010c00 	.word	0x40010c00
 800120c:	40010800 	.word	0x40010800
 8001210:	10210000 	.word	0x10210000

08001214 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <MX_I2C1_Init+0x50>)
 800121a:	4a13      	ldr	r2, [pc, #76]	; (8001268 <MX_I2C1_Init+0x54>)
 800121c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_I2C1_Init+0x50>)
 8001220:	4a12      	ldr	r2, [pc, #72]	; (800126c <MX_I2C1_Init+0x58>)
 8001222:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <MX_I2C1_Init+0x50>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <MX_I2C1_Init+0x50>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <MX_I2C1_Init+0x50>)
 8001232:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001236:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001238:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <MX_I2C1_Init+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <MX_I2C1_Init+0x50>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <MX_I2C1_Init+0x50>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <MX_I2C1_Init+0x50>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001250:	4804      	ldr	r0, [pc, #16]	; (8001264 <MX_I2C1_Init+0x50>)
 8001252:	f003 f82b 	bl	80042ac <HAL_I2C_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800125c:	f002 f975 	bl	800354a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	200001fc 	.word	0x200001fc
 8001268:	40005400 	.word	0x40005400
 800126c:	00061a80 	.word	0x00061a80

08001270 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <MX_I2C2_Init+0x50>)
 8001276:	4a13      	ldr	r2, [pc, #76]	; (80012c4 <MX_I2C2_Init+0x54>)
 8001278:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_I2C2_Init+0x50>)
 800127c:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <MX_I2C2_Init+0x58>)
 800127e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <MX_I2C2_Init+0x50>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <MX_I2C2_Init+0x50>)
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <MX_I2C2_Init+0x50>)
 800128e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001292:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001294:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <MX_I2C2_Init+0x50>)
 8001296:	2200      	movs	r2, #0
 8001298:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <MX_I2C2_Init+0x50>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <MX_I2C2_Init+0x50>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <MX_I2C2_Init+0x50>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012ac:	4804      	ldr	r0, [pc, #16]	; (80012c0 <MX_I2C2_Init+0x50>)
 80012ae:	f002 fffd 	bl	80042ac <HAL_I2C_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80012b8:	f002 f947 	bl	800354a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000250 	.word	0x20000250
 80012c4:	40005800 	.word	0x40005800
 80012c8:	00061a80 	.word	0x00061a80

080012cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	; 0x28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 0318 	add.w	r3, r7, #24
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a2b      	ldr	r2, [pc, #172]	; (8001394 <HAL_I2C_MspInit+0xc8>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d124      	bne.n	8001336 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ec:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <HAL_I2C_MspInit+0xcc>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4a29      	ldr	r2, [pc, #164]	; (8001398 <HAL_I2C_MspInit+0xcc>)
 80012f2:	f043 0308 	orr.w	r3, r3, #8
 80012f6:	6193      	str	r3, [r2, #24]
 80012f8:	4b27      	ldr	r3, [pc, #156]	; (8001398 <HAL_I2C_MspInit+0xcc>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f003 0308 	and.w	r3, r3, #8
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001304:	23c0      	movs	r3, #192	; 0xc0
 8001306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001308:	2312      	movs	r3, #18
 800130a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800130c:	2303      	movs	r3, #3
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001310:	f107 0318 	add.w	r3, r7, #24
 8001314:	4619      	mov	r1, r3
 8001316:	4821      	ldr	r0, [pc, #132]	; (800139c <HAL_I2C_MspInit+0xd0>)
 8001318:	f002 fdda 	bl	8003ed0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800131c:	4b1e      	ldr	r3, [pc, #120]	; (8001398 <HAL_I2C_MspInit+0xcc>)
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	4a1d      	ldr	r2, [pc, #116]	; (8001398 <HAL_I2C_MspInit+0xcc>)
 8001322:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001326:	61d3      	str	r3, [r2, #28]
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <HAL_I2C_MspInit+0xcc>)
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001334:	e029      	b.n	800138a <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a19      	ldr	r2, [pc, #100]	; (80013a0 <HAL_I2C_MspInit+0xd4>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d124      	bne.n	800138a <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_I2C_MspInit+0xcc>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a14      	ldr	r2, [pc, #80]	; (8001398 <HAL_I2C_MspInit+0xcc>)
 8001346:	f043 0308 	orr.w	r3, r3, #8
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_I2C_MspInit+0xcc>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001358:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800135c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800135e:	2312      	movs	r3, #18
 8001360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001362:	2303      	movs	r3, #3
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001366:	f107 0318 	add.w	r3, r7, #24
 800136a:	4619      	mov	r1, r3
 800136c:	480b      	ldr	r0, [pc, #44]	; (800139c <HAL_I2C_MspInit+0xd0>)
 800136e:	f002 fdaf 	bl	8003ed0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_I2C_MspInit+0xcc>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	4a08      	ldr	r2, [pc, #32]	; (8001398 <HAL_I2C_MspInit+0xcc>)
 8001378:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800137c:	61d3      	str	r3, [r2, #28]
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_I2C_MspInit+0xcc>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	; 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40005400 	.word	0x40005400
 8001398:	40021000 	.word	0x40021000
 800139c:	40010c00 	.word	0x40010c00
 80013a0:	40005800 	.word	0x40005800

080013a4 <ICM20948_WriteRegister>:
const double Accel_Z_corrector = 14418.00;

uint32_t timer;

HAL_StatusTypeDef ICM20948_WriteRegister(uint8_t regAddr, uint8_t data,
		I2C_HandleTypeDef *I2Cx) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af04      	add	r7, sp, #16
 80013aa:	4603      	mov	r3, r0
 80013ac:	603a      	str	r2, [r7, #0]
 80013ae:	71fb      	strb	r3, [r7, #7]
 80013b0:	460b      	mov	r3, r1
 80013b2:	71bb      	strb	r3, [r7, #6]
	return HAL_I2C_Mem_Write(I2Cx, (ICM20948_ADDR << 1), regAddr,
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295
 80013bc:	9302      	str	r3, [sp, #8]
 80013be:	2301      	movs	r3, #1
 80013c0:	9301      	str	r3, [sp, #4]
 80013c2:	1dbb      	adds	r3, r7, #6
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	2301      	movs	r3, #1
 80013c8:	21d2      	movs	r1, #210	; 0xd2
 80013ca:	6838      	ldr	r0, [r7, #0]
 80013cc:	f003 f8b2 	bl	8004534 <HAL_I2C_Mem_Write>
 80013d0:	4603      	mov	r3, r0
			I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <SelectBank>:

HAL_StatusTypeDef SelectBank(uint8_t bank, I2C_HandleTypeDef *I2Cx) {
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4603      	mov	r3, r0
 80013e2:	6039      	str	r1, [r7, #0]
 80013e4:	71fb      	strb	r3, [r7, #7]
	return ICM20948_WriteRegister(REG_BANK_SEL, (bank << 4), I2Cx);
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	4619      	mov	r1, r3
 80013f0:	207f      	movs	r0, #127	; 0x7f
 80013f2:	f7ff ffd7 	bl	80013a4 <ICM20948_WriteRegister>
 80013f6:	4603      	mov	r3, r0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <ICM20948_Init>:

uint8_t ICM20948_Init(I2C_HandleTypeDef *I2Cx) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af04      	add	r7, sp, #16
 8001406:	6078      	str	r0, [r7, #4]
	uint8_t check;
//	uint8_t Data;

	HAL_Delay(100);
 8001408:	2064      	movs	r0, #100	; 0x64
 800140a:	f002 fc2f 	bl	8003c6c <HAL_Delay>

	while (HAL_I2C_Mem_Read(I2Cx, (ICM20948_ADDR << 1), WHO_AM_I_REG, 1, &check,
 800140e:	bf00      	nop
 8001410:	f04f 33ff 	mov.w	r3, #4294967295
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	2301      	movs	r3, #1
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	f107 030f 	add.w	r3, r7, #15
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2301      	movs	r3, #1
 8001422:	2200      	movs	r2, #0
 8001424:	21d2      	movs	r1, #210	; 0xd2
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f003 f97e 	bl	8004728 <HAL_I2C_Mem_Read>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1ee      	bne.n	8001410 <ICM20948_Init+0x10>
			1, HAL_MAX_DELAY) != HAL_OK)
		;

	SelectBank(0, I2Cx);
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	2000      	movs	r0, #0
 8001436:	f7ff ffd0 	bl	80013da <SelectBank>

	if (check == 234) {
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	2bea      	cmp	r3, #234	; 0xea
 800143e:	d157      	bne.n	80014f0 <ICM20948_Init+0xf0>
		if (ICM20948_WriteRegister(PWR_MGMT_1, 0x89, I2Cx) != HAL_OK) {
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	2189      	movs	r1, #137	; 0x89
 8001444:	2006      	movs	r0, #6
 8001446:	f7ff ffad 	bl	80013a4 <ICM20948_WriteRegister>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d000      	beq.n	8001452 <ICM20948_Init+0x52>
			while (1)
 8001450:	e7fe      	b.n	8001450 <ICM20948_Init+0x50>
				;
		}
		HAL_Delay(10);
 8001452:	200a      	movs	r0, #10
 8001454:	f002 fc0a 	bl	8003c6c <HAL_Delay>
		if (ICM20948_WriteRegister(PWR_MGMT_1, 0x00, I2Cx) != HAL_OK) {
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	2100      	movs	r1, #0
 800145c:	2006      	movs	r0, #6
 800145e:	f7ff ffa1 	bl	80013a4 <ICM20948_WriteRegister>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d000      	beq.n	800146a <ICM20948_Init+0x6a>
			while (1)
 8001468:	e7fe      	b.n	8001468 <ICM20948_Init+0x68>
				;
		}
		HAL_Delay(10);
 800146a:	200a      	movs	r0, #10
 800146c:	f002 fbfe 	bl	8003c6c <HAL_Delay>

		if (ICM20948_WriteRegister(PWR_MGMT_2, 0x00, I2Cx) != HAL_OK) {
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	2100      	movs	r1, #0
 8001474:	2007      	movs	r0, #7
 8001476:	f7ff ff95 	bl	80013a4 <ICM20948_WriteRegister>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d000      	beq.n	8001482 <ICM20948_Init+0x82>
			while (1)
 8001480:	e7fe      	b.n	8001480 <ICM20948_Init+0x80>
				;
		}
		HAL_Delay(10);
 8001482:	200a      	movs	r0, #10
 8001484:	f002 fbf2 	bl	8003c6c <HAL_Delay>
		if (ICM20948_WriteRegister(USER_CTRL, 0x00, I2Cx) != HAL_OK) {
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	2100      	movs	r1, #0
 800148c:	2030      	movs	r0, #48	; 0x30
 800148e:	f7ff ff89 	bl	80013a4 <ICM20948_WriteRegister>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d000      	beq.n	800149a <ICM20948_Init+0x9a>
			while (1)
 8001498:	e7fe      	b.n	8001498 <ICM20948_Init+0x98>
				;
		}
		HAL_Delay(10);
 800149a:	200a      	movs	r0, #10
 800149c:	f002 fbe6 	bl	8003c6c <HAL_Delay>
		SelectBank(2, I2Cx);
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	2002      	movs	r0, #2
 80014a4:	f7ff ff99 	bl	80013da <SelectBank>
		HAL_Delay(10);
 80014a8:	200a      	movs	r0, #10
 80014aa:	f002 fbdf 	bl	8003c6c <HAL_Delay>

		if (ICM20948_WriteRegister(ACCEL_CONFIG, 0x1D, I2Cx) != HAL_OK) {
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	211d      	movs	r1, #29
 80014b2:	2014      	movs	r0, #20
 80014b4:	f7ff ff76 	bl	80013a4 <ICM20948_WriteRegister>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d000      	beq.n	80014c0 <ICM20948_Init+0xc0>
			while (1);
 80014be:	e7fe      	b.n	80014be <ICM20948_Init+0xbe>
		}
		HAL_Delay(10);
 80014c0:	200a      	movs	r0, #10
 80014c2:	f002 fbd3 	bl	8003c6c <HAL_Delay>
		SelectBank(2, I2Cx);
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	2002      	movs	r0, #2
 80014ca:	f7ff ff86 	bl	80013da <SelectBank>
		HAL_Delay(10);
 80014ce:	200a      	movs	r0, #10
 80014d0:	f002 fbcc 	bl	8003c6c <HAL_Delay>
		if (ICM20948_WriteRegister(GYRO_CONFIG, 0x01, I2Cx) != HAL_OK) {
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	2101      	movs	r1, #1
 80014d8:	2001      	movs	r0, #1
 80014da:	f7ff ff63 	bl	80013a4 <ICM20948_WriteRegister>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d000      	beq.n	80014e6 <ICM20948_Init+0xe6>
			while (1);
 80014e4:	e7fe      	b.n	80014e4 <ICM20948_Init+0xe4>
		}
		HAL_Delay(10);
 80014e6:	200a      	movs	r0, #10
 80014e8:	f002 fbc0 	bl	8003c6c <HAL_Delay>
		return 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	e000      	b.n	80014f2 <ICM20948_Init+0xf2>
	}

	return 1;
 80014f0:	2301      	movs	r3, #1

}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <ICM20948_Read_Accel>:

void ICM20948_Read_Accel(I2C_HandleTypeDef *I2Cx, ICM20948_t *DataStruct) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af04      	add	r7, sp, #16
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
    SelectBank(0, I2Cx);
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	2000      	movs	r0, #0
 800150a:	f7ff ff66 	bl	80013da <SelectBank>
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read(I2Cx, (ICM20948_ADDR << 1), ACCEL_XOUT_H, 1, Rec_Data, 6,
 800150e:	2364      	movs	r3, #100	; 0x64
 8001510:	9302      	str	r3, [sp, #8]
 8001512:	2306      	movs	r3, #6
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	f107 0308 	add.w	r3, r7, #8
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2301      	movs	r3, #1
 800151e:	222d      	movs	r2, #45	; 0x2d
 8001520:	21d2      	movs	r1, #210	; 0xd2
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f003 f900 	bl	8004728 <HAL_I2C_Mem_Read>
			i2c_timeout);
//    HAL_Delay(100);

	DataStruct->ACCEL_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001528:	7a3b      	ldrb	r3, [r7, #8]
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	b21a      	sxth	r2, r3
 800152e:	7a7b      	ldrb	r3, [r7, #9]
 8001530:	b21b      	sxth	r3, r3
 8001532:	4313      	orrs	r3, r2
 8001534:	b21a      	sxth	r2, r3
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	801a      	strh	r2, [r3, #0]
	DataStruct->ACCEL_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 800153a:	7abb      	ldrb	r3, [r7, #10]
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	b21a      	sxth	r2, r3
 8001540:	7afb      	ldrb	r3, [r7, #11]
 8001542:	b21b      	sxth	r3, r3
 8001544:	4313      	orrs	r3, r2
 8001546:	b21a      	sxth	r2, r3
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	805a      	strh	r2, [r3, #2]
	DataStruct->ACCEL_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800154c:	7b3b      	ldrb	r3, [r7, #12]
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	b21a      	sxth	r2, r3
 8001552:	7b7b      	ldrb	r3, [r7, #13]
 8001554:	b21b      	sxth	r3, r3
 8001556:	4313      	orrs	r3, r2
 8001558:	b21a      	sxth	r2, r3
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	809a      	strh	r2, [r3, #4]

	DataStruct->Ax = DataStruct->ACCEL_X_RAW / 2048.0;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe ff4d 	bl	8000404 <__aeabi_i2d>
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <ICM20948_Read_Accel+0xcc>)
 8001570:	f7ff f8dc 	bl	800072c <__aeabi_ddiv>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	6839      	ldr	r1, [r7, #0]
 800157a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	DataStruct->Ay = DataStruct->ACCEL_Y_RAW / 2048.0;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe ff3d 	bl	8000404 <__aeabi_i2d>
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <ICM20948_Read_Accel+0xcc>)
 8001590:	f7ff f8cc 	bl	800072c <__aeabi_ddiv>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	6839      	ldr	r1, [r7, #0]
 800159a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	DataStruct->Az = DataStruct->ACCEL_Z_RAW / 2048.0;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ff2d 	bl	8000404 <__aeabi_i2d>
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <ICM20948_Read_Accel+0xcc>)
 80015b0:	f7ff f8bc 	bl	800072c <__aeabi_ddiv>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	6839      	ldr	r1, [r7, #0]
 80015ba:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80015be:	bf00      	nop
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40a00000 	.word	0x40a00000
 80015cc:	00000000 	.word	0x00000000

080015d0 <ICM20948_Read_Gyro>:

void ICM20948_Read_Gyro(I2C_HandleTypeDef *I2Cx, ICM20948_t *DataStruct) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af04      	add	r7, sp, #16
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
	uint8_t Rec_Data[6];
	SelectBank(0,I2Cx);
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	2000      	movs	r0, #0
 80015de:	f7ff fefc 	bl	80013da <SelectBank>

	HAL_I2C_Mem_Read(I2Cx, (ICM20948_ADDR << 1), GYRO_XOUT_H, 1, Rec_Data, 6, i2c_timeout);
 80015e2:	2364      	movs	r3, #100	; 0x64
 80015e4:	9302      	str	r3, [sp, #8]
 80015e6:	2306      	movs	r3, #6
 80015e8:	9301      	str	r3, [sp, #4]
 80015ea:	f107 0308 	add.w	r3, r7, #8
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	2301      	movs	r3, #1
 80015f2:	2233      	movs	r2, #51	; 0x33
 80015f4:	21d2      	movs	r1, #210	; 0xd2
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f003 f896 	bl	8004728 <HAL_I2C_Mem_Read>

	DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80015fc:	7a3b      	ldrb	r3, [r7, #8]
 80015fe:	021b      	lsls	r3, r3, #8
 8001600:	b21a      	sxth	r2, r3
 8001602:	7a7b      	ldrb	r3, [r7, #9]
 8001604:	b21b      	sxth	r3, r3
 8001606:	4313      	orrs	r3, r2
 8001608:	b21a      	sxth	r2, r3
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	841a      	strh	r2, [r3, #32]
	DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 800160e:	7abb      	ldrb	r3, [r7, #10]
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	b21a      	sxth	r2, r3
 8001614:	7afb      	ldrb	r3, [r7, #11]
 8001616:	b21b      	sxth	r3, r3
 8001618:	4313      	orrs	r3, r2
 800161a:	b21a      	sxth	r2, r3
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	845a      	strh	r2, [r3, #34]	; 0x22
	DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001620:	7b3b      	ldrb	r3, [r7, #12]
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	b21a      	sxth	r2, r3
 8001626:	7b7b      	ldrb	r3, [r7, #13]
 8001628:	b21b      	sxth	r3, r3
 800162a:	4313      	orrs	r3, r2
 800162c:	b21a      	sxth	r2, r3
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	849a      	strh	r2, [r3, #36]	; 0x24

	DataStruct->Gx = DataStruct->Gyro_X_RAW / 131;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001638:	4a31      	ldr	r2, [pc, #196]	; (8001700 <ICM20948_Read_Gyro+0x130>)
 800163a:	fb82 1203 	smull	r1, r2, r2, r3
 800163e:	1152      	asrs	r2, r2, #5
 8001640:	17db      	asrs	r3, r3, #31
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	b21b      	sxth	r3, r3
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe fedc 	bl	8000404 <__aeabi_i2d>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	6839      	ldr	r1, [r7, #0]
 8001652:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800165c:	4a28      	ldr	r2, [pc, #160]	; (8001700 <ICM20948_Read_Gyro+0x130>)
 800165e:	fb82 1203 	smull	r1, r2, r2, r3
 8001662:	1152      	asrs	r2, r2, #5
 8001664:	17db      	asrs	r3, r3, #31
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	b21b      	sxth	r3, r3
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe feca 	bl	8000404 <__aeabi_i2d>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	6839      	ldr	r1, [r7, #0]
 8001676:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001680:	4a1f      	ldr	r2, [pc, #124]	; (8001700 <ICM20948_Read_Gyro+0x130>)
 8001682:	fb82 1203 	smull	r1, r2, r2, r3
 8001686:	1152      	asrs	r2, r2, #5
 8001688:	17db      	asrs	r3, r3, #31
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	b21b      	sxth	r3, r3
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe feb8 	bl	8000404 <__aeabi_i2d>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	6839      	ldr	r1, [r7, #0]
 800169a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    DataStruct->NormGx = DataStruct->Gx * .060975f;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80016a4:	a314      	add	r3, pc, #80	; (adr r3, 80016f8 <ICM20948_Read_Gyro+0x128>)
 80016a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016aa:	f7fe ff15 	bl	80004d8 <__aeabi_dmul>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	6839      	ldr	r1, [r7, #0]
 80016b4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    DataStruct->NormGy = DataStruct->Gy * .060975f;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80016be:	a30e      	add	r3, pc, #56	; (adr r3, 80016f8 <ICM20948_Read_Gyro+0x128>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe ff08 	bl	80004d8 <__aeabi_dmul>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	6839      	ldr	r1, [r7, #0]
 80016ce:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    DataStruct->NormGz = DataStruct->Gz * .060975f;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80016d8:	a307      	add	r3, pc, #28	; (adr r3, 80016f8 <ICM20948_Read_Gyro+0x128>)
 80016da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016de:	f7fe fefb 	bl	80004d8 <__aeabi_dmul>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	6839      	ldr	r1, [r7, #0]
 80016e8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 80016ec:	bf00      	nop
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	f3af 8000 	nop.w
 80016f8:	80000000 	.word	0x80000000
 80016fc:	3faf381d 	.word	0x3faf381d
 8001700:	3e88cb3d 	.word	0x3e88cb3d

08001704 <send_uart>:
long map( long x , long in_min , long in_max, long out_min , long out_max){
	return (x - in_min) * (out_max - out_min)/(in_max - in_min )+ out_min ;
}

/*************************Send Uart ***********************/
void send_uart(char *string){
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7fe fd1f 	bl	8000150 <strlen>
 8001712:	4603      	mov	r3, r0
 8001714:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t*) string, len, HAL_MAX_DELAY); //Transmit in blocking mode
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	b29a      	uxth	r2, r3
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	4803      	ldr	r0, [pc, #12]	; (8001730 <send_uart+0x2c>)
 8001722:	f004 ff08 	bl	8006536 <HAL_UART_Transmit>
}
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200004fc 	.word	0x200004fc

08001734 <held_press>:

void held_press(){
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8001738:	2201      	movs	r2, #1
 800173a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800173e:	4825      	ldr	r0, [pc, #148]	; (80017d4 <held_press+0xa0>)
 8001740:	f002 fd61 	bl	8004206 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001744:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001748:	f002 fa90 	bl	8003c6c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,RESET);
 800174c:	2200      	movs	r2, #0
 800174e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001752:	4820      	ldr	r0, [pc, #128]	; (80017d4 <held_press+0xa0>)
 8001754:	f002 fd57 	bl	8004206 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001758:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800175c:	f002 fa86 	bl	8003c6c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,SET);
 8001760:	2201      	movs	r2, #1
 8001762:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001766:	481b      	ldr	r0, [pc, #108]	; (80017d4 <held_press+0xa0>)
 8001768:	f002 fd4d 	bl	8004206 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800176c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001770:	f002 fa7c 	bl	8003c6c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,RESET);
 8001774:	2200      	movs	r2, #0
 8001776:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800177a:	4816      	ldr	r0, [pc, #88]	; (80017d4 <held_press+0xa0>)
 800177c:	f002 fd43 	bl	8004206 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001780:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001784:	f002 fa72 	bl	8003c6c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,SET);
 8001788:	2201      	movs	r2, #1
 800178a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800178e:	4811      	ldr	r0, [pc, #68]	; (80017d4 <held_press+0xa0>)
 8001790:	f002 fd39 	bl	8004206 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001794:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001798:	f002 fa68 	bl	8003c6c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,RESET);
 800179c:	2200      	movs	r2, #0
 800179e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017a2:	480c      	ldr	r0, [pc, #48]	; (80017d4 <held_press+0xa0>)
 80017a4:	f002 fd2f 	bl	8004206 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80017a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017ac:	f002 fa5e 	bl	8003c6c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,SET);
 80017b0:	2201      	movs	r2, #1
 80017b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017b6:	4807      	ldr	r0, [pc, #28]	; (80017d4 <held_press+0xa0>)
 80017b8:	f002 fd25 	bl	8004206 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80017bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017c0:	f002 fa54 	bl	8003c6c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,RESET);
 80017c4:	2200      	movs	r2, #0
 80017c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017ca:	4802      	ldr	r0, [pc, #8]	; (80017d4 <held_press+0xa0>)
 80017cc:	f002 fd1b 	bl	8004206 <HAL_GPIO_WritePin>
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40010c00 	.word	0x40010c00

080017d8 <inflation_On>:
/******* Inflation On (Here it is defined as the cushion get inflate)********/
void inflation_On(){
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
	HAL_Delay(200);
 80017de:	20c8      	movs	r0, #200	; 0xc8
 80017e0:	f002 fa44 	bl	8003c6c <HAL_Delay>
		 // This code to soft start bldc motor
			for(int i=0; i <= 100; i++){
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	e00c      	b.n	8001804 <inflation_On+0x2c>
				TIM1->CCR1 = i;
 80017ea:	4a37      	ldr	r2, [pc, #220]	; (80018c8 <inflation_On+0xf0>)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6353      	str	r3, [r2, #52]	; 0x34
				TIM2->CCR2 = i;
 80017f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6393      	str	r3, [r2, #56]	; 0x38
				HAL_Delay(1);
 80017f8:	2001      	movs	r0, #1
 80017fa:	f002 fa37 	bl	8003c6c <HAL_Delay>
			for(int i=0; i <= 100; i++){
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	3301      	adds	r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2b64      	cmp	r3, #100	; 0x64
 8001808:	ddef      	ble.n	80017ea <inflation_On+0x12>
			}
			HAL_Delay(1000);
 800180a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800180e:	f002 fa2d 	bl	8003c6c <HAL_Delay>
			//This for loop to turn on bldc motor
			for(int i=100; i <= 120; i++){
 8001812:	2364      	movs	r3, #100	; 0x64
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	e00e      	b.n	8001836 <inflation_On+0x5e>
				HAL_Delay(20);
 8001818:	2014      	movs	r0, #20
 800181a:	f002 fa27 	bl	8003c6c <HAL_Delay>
				TIM1->CCR1 = i + 6 ;
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	1d9a      	adds	r2, r3, #6
 8001822:	4b29      	ldr	r3, [pc, #164]	; (80018c8 <inflation_On+0xf0>)
 8001824:	635a      	str	r2, [r3, #52]	; 0x34
				TIM2->CCR2 = i + 6 ;
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	1d9a      	adds	r2, r3, #6
 800182a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800182e:	639a      	str	r2, [r3, #56]	; 0x38
			for(int i=100; i <= 120; i++){
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	3301      	adds	r3, #1
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	2b78      	cmp	r3, #120	; 0x78
 800183a:	dded      	ble.n	8001818 <inflation_On+0x40>
			}
			HAL_Delay(5000);
 800183c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001840:	f002 fa14 	bl	8003c6c <HAL_Delay>


		//This for rotating MG90s first Servo motor to 90 deg
		TIM1->CCR4 = 140;
 8001844:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <inflation_On+0xf0>)
 8001846:	228c      	movs	r2, #140	; 0x8c
 8001848:	641a      	str	r2, [r3, #64]	; 0x40
	    HAL_Delay(20);
 800184a:	2014      	movs	r0, #20
 800184c:	f002 fa0e 	bl	8003c6c <HAL_Delay>
	    TIM1->CCR4 = 175;
 8001850:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <inflation_On+0xf0>)
 8001852:	22af      	movs	r2, #175	; 0xaf
 8001854:	641a      	str	r2, [r3, #64]	; 0x40
	    HAL_Delay(20);
 8001856:	2014      	movs	r0, #20
 8001858:	f002 fa08 	bl	8003c6c <HAL_Delay>
	    TIM1->CCR4 = 250;
 800185c:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <inflation_On+0xf0>)
 800185e:	22fa      	movs	r2, #250	; 0xfa
 8001860:	641a      	str	r2, [r3, #64]	; 0x40
	    HAL_Delay(200);
 8001862:	20c8      	movs	r0, #200	; 0xc8
 8001864:	f002 fa02 	bl	8003c6c <HAL_Delay>
	    //This for rotating MG90s second Servo motor to 90 deg
	    HAL_Delay(200);
 8001868:	20c8      	movs	r0, #200	; 0xc8
 800186a:	f002 f9ff 	bl	8003c6c <HAL_Delay>
	    TIM2->CCR1 = 140;
 800186e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001872:	228c      	movs	r2, #140	; 0x8c
 8001874:	635a      	str	r2, [r3, #52]	; 0x34
	    HAL_Delay(20);
 8001876:	2014      	movs	r0, #20
 8001878:	f002 f9f8 	bl	8003c6c <HAL_Delay>
	    TIM2->CCR1 = 175;
 800187c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001880:	22af      	movs	r2, #175	; 0xaf
 8001882:	635a      	str	r2, [r3, #52]	; 0x34
	    HAL_Delay(20);
 8001884:	2014      	movs	r0, #20
 8001886:	f002 f9f1 	bl	8003c6c <HAL_Delay>
	    TIM2->CCR1 = 250;
 800188a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800188e:	22fa      	movs	r2, #250	; 0xfa
 8001890:	635a      	str	r2, [r3, #52]	; 0x34
	    HAL_Delay(200);
 8001892:	20c8      	movs	r0, #200	; 0xc8
 8001894:	f002 f9ea 	bl	8003c6c <HAL_Delay>

	    for(int i=120; i >= 0; i--){
 8001898:	2378      	movs	r3, #120	; 0x78
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	e00c      	b.n	80018b8 <inflation_On+0xe0>
	    	TIM1->CCR1 = i ;
 800189e:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <inflation_On+0xf0>)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6353      	str	r3, [r2, #52]	; 0x34
	    	TIM2->CCR2 = i ;
 80018a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6393      	str	r3, [r2, #56]	; 0x38
	    	HAL_Delay(5);
 80018ac:	2005      	movs	r0, #5
 80018ae:	f002 f9dd 	bl	8003c6c <HAL_Delay>
	    for(int i=120; i >= 0; i--){
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	daef      	bge.n	800189e <inflation_On+0xc6>
	    }
}
 80018be:	bf00      	nop
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40012c00 	.word	0x40012c00

080018cc <inflation_Off>:
/******* Inflation Off ( Here it is defined as the cushion get Deflate)  *******/
void inflation_Off(){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0

    TIM1->CCR4 = 250;
 80018d0:	4b14      	ldr	r3, [pc, #80]	; (8001924 <inflation_Off+0x58>)
 80018d2:	22fa      	movs	r2, #250	; 0xfa
 80018d4:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_Delay(20);
 80018d6:	2014      	movs	r0, #20
 80018d8:	f002 f9c8 	bl	8003c6c <HAL_Delay>
    TIM1->CCR4 = 175;
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <inflation_Off+0x58>)
 80018de:	22af      	movs	r2, #175	; 0xaf
 80018e0:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_Delay(20);
 80018e2:	2014      	movs	r0, #20
 80018e4:	f002 f9c2 	bl	8003c6c <HAL_Delay>
    TIM1->CCR4 = 140;
 80018e8:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <inflation_Off+0x58>)
 80018ea:	228c      	movs	r2, #140	; 0x8c
 80018ec:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_Delay(200);
 80018ee:	20c8      	movs	r0, #200	; 0xc8
 80018f0:	f002 f9bc 	bl	8003c6c <HAL_Delay>

    TIM2->CCR1 = 250;
 80018f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018f8:	22fa      	movs	r2, #250	; 0xfa
 80018fa:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(30);
 80018fc:	201e      	movs	r0, #30
 80018fe:	f002 f9b5 	bl	8003c6c <HAL_Delay>
    TIM2->CCR1 = 175;
 8001902:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001906:	22af      	movs	r2, #175	; 0xaf
 8001908:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(20);
 800190a:	2014      	movs	r0, #20
 800190c:	f002 f9ae 	bl	8003c6c <HAL_Delay>
    TIM2->CCR1 = 140;
 8001910:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001914:	228c      	movs	r2, #140	; 0x8c
 8001916:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(400);
 8001918:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800191c:	f002 f9a6 	bl	8003c6c <HAL_Delay>
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40012c00 	.word	0x40012c00

08001928 <noise_removal>:

/************* Acceleration Noise Removal ******************/

int16_t noise_removal(int16_t raw_accel ){
 8001928:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	80fb      	strh	r3, [r7, #6]
      float sampleRate = 100.0;
 8001934:	4b32      	ldr	r3, [pc, #200]	; (8001a00 <noise_removal+0xd8>)
 8001936:	617b      	str	r3, [r7, #20]
      float cutoffFrequency = 20.0;
 8001938:	4b32      	ldr	r3, [pc, #200]	; (8001a04 <noise_removal+0xdc>)
 800193a:	613b      	str	r3, [r7, #16]
      float alpha =  2 * PI * cutoffFrequency / (sampleRate + 2 * PI * cutoffFrequency);
 800193c:	6938      	ldr	r0, [r7, #16]
 800193e:	f7fe fd73 	bl	8000428 <__aeabi_f2d>
 8001942:	a32d      	add	r3, pc, #180	; (adr r3, 80019f8 <noise_removal+0xd0>)
 8001944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001948:	f7fe fdc6 	bl	80004d8 <__aeabi_dmul>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4690      	mov	r8, r2
 8001952:	4699      	mov	r9, r3
 8001954:	6978      	ldr	r0, [r7, #20]
 8001956:	f7fe fd67 	bl	8000428 <__aeabi_f2d>
 800195a:	4604      	mov	r4, r0
 800195c:	460d      	mov	r5, r1
 800195e:	6938      	ldr	r0, [r7, #16]
 8001960:	f7fe fd62 	bl	8000428 <__aeabi_f2d>
 8001964:	a324      	add	r3, pc, #144	; (adr r3, 80019f8 <noise_removal+0xd0>)
 8001966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196a:	f7fe fdb5 	bl	80004d8 <__aeabi_dmul>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4620      	mov	r0, r4
 8001974:	4629      	mov	r1, r5
 8001976:	f7fe fbf9 	bl	800016c <__adddf3>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4640      	mov	r0, r8
 8001980:	4649      	mov	r1, r9
 8001982:	f7fe fed3 	bl	800072c <__aeabi_ddiv>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	f7ff f87b 	bl	8000a88 <__aeabi_d2f>
 8001992:	4603      	mov	r3, r0
 8001994:	60fb      	str	r3, [r7, #12]

      float filteredAccel = 0.0;
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	60bb      	str	r3, [r7, #8]

      filteredAccel = (1-alpha) * raw_accel  + alpha * raw_accel;
 800199c:	68f9      	ldr	r1, [r7, #12]
 800199e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80019a2:	f7ff f8c5 	bl	8000b30 <__aeabi_fsub>
 80019a6:	4603      	mov	r3, r0
 80019a8:	461c      	mov	r4, r3
 80019aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff f974 	bl	8000c9c <__aeabi_i2f>
 80019b4:	4603      	mov	r3, r0
 80019b6:	4619      	mov	r1, r3
 80019b8:	4620      	mov	r0, r4
 80019ba:	f7ff f9c3 	bl	8000d44 <__aeabi_fmul>
 80019be:	4603      	mov	r3, r0
 80019c0:	461c      	mov	r4, r3
 80019c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff f968 	bl	8000c9c <__aeabi_i2f>
 80019cc:	4603      	mov	r3, r0
 80019ce:	68f9      	ldr	r1, [r7, #12]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff f9b7 	bl	8000d44 <__aeabi_fmul>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4619      	mov	r1, r3
 80019da:	4620      	mov	r0, r4
 80019dc:	f7ff f8aa 	bl	8000b34 <__addsf3>
 80019e0:	4603      	mov	r3, r0
 80019e2:	60bb      	str	r3, [r7, #8]
      return filteredAccel;
 80019e4:	68b8      	ldr	r0, [r7, #8]
 80019e6:	f7ff fb73 	bl	80010d0 <__aeabi_f2iz>
 80019ea:	4603      	mov	r3, r0
 80019ec:	b21b      	sxth	r3, r3
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019f8:	54442d18 	.word	0x54442d18
 80019fc:	401921fb 	.word	0x401921fb
 8001a00:	42c80000 	.word	0x42c80000
 8001a04:	41a00000 	.word	0x41a00000

08001a08 <noise_removal_float>:

float noise_removal_float (float raw_accel ){
 8001a08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
      float sampleRate = 100.0;
 8001a12:	4b2b      	ldr	r3, [pc, #172]	; (8001ac0 <noise_removal_float+0xb8>)
 8001a14:	617b      	str	r3, [r7, #20]
      float cutoffFrequency = 20.0;
 8001a16:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <noise_removal_float+0xbc>)
 8001a18:	613b      	str	r3, [r7, #16]
      float alpha =  2 * PI * cutoffFrequency / (sampleRate + 2 * PI * cutoffFrequency);
 8001a1a:	6938      	ldr	r0, [r7, #16]
 8001a1c:	f7fe fd04 	bl	8000428 <__aeabi_f2d>
 8001a20:	a325      	add	r3, pc, #148	; (adr r3, 8001ab8 <noise_removal_float+0xb0>)
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	f7fe fd57 	bl	80004d8 <__aeabi_dmul>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4690      	mov	r8, r2
 8001a30:	4699      	mov	r9, r3
 8001a32:	6978      	ldr	r0, [r7, #20]
 8001a34:	f7fe fcf8 	bl	8000428 <__aeabi_f2d>
 8001a38:	4604      	mov	r4, r0
 8001a3a:	460d      	mov	r5, r1
 8001a3c:	6938      	ldr	r0, [r7, #16]
 8001a3e:	f7fe fcf3 	bl	8000428 <__aeabi_f2d>
 8001a42:	a31d      	add	r3, pc, #116	; (adr r3, 8001ab8 <noise_removal_float+0xb0>)
 8001a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a48:	f7fe fd46 	bl	80004d8 <__aeabi_dmul>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4620      	mov	r0, r4
 8001a52:	4629      	mov	r1, r5
 8001a54:	f7fe fb8a 	bl	800016c <__adddf3>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4640      	mov	r0, r8
 8001a5e:	4649      	mov	r1, r9
 8001a60:	f7fe fe64 	bl	800072c <__aeabi_ddiv>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f7ff f80c 	bl	8000a88 <__aeabi_d2f>
 8001a70:	4603      	mov	r3, r0
 8001a72:	60fb      	str	r3, [r7, #12]

      float filteredAccel = 0.0;
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]

      filteredAccel = (1-alpha) * raw_accel  + alpha * raw_accel;
 8001a7a:	68f9      	ldr	r1, [r7, #12]
 8001a7c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001a80:	f7ff f856 	bl	8000b30 <__aeabi_fsub>
 8001a84:	4603      	mov	r3, r0
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff f95b 	bl	8000d44 <__aeabi_fmul>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	461c      	mov	r4, r3
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f7ff f955 	bl	8000d44 <__aeabi_fmul>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	f7ff f848 	bl	8000b34 <__addsf3>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	60bb      	str	r3, [r7, #8]
      return filteredAccel;
 8001aa8:	68bb      	ldr	r3, [r7, #8]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ab4:	f3af 8000 	nop.w
 8001ab8:	54442d18 	.word	0x54442d18
 8001abc:	401921fb 	.word	0x401921fb
 8001ac0:	42c80000 	.word	0x42c80000
 8001ac4:	41a00000 	.word	0x41a00000

08001ac8 <walker>:


void walker() {
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af00      	add	r7, sp, #0

	ICM20948_Read_Gyro(&hi2c2, &ICMData);
 8001ace:	496c      	ldr	r1, [pc, #432]	; (8001c80 <walker+0x1b8>)
 8001ad0:	486c      	ldr	r0, [pc, #432]	; (8001c84 <walker+0x1bc>)
 8001ad2:	f7ff fd7d 	bl	80015d0 <ICM20948_Read_Gyro>
	ICM20948_Read_Gyro(&hi2c1, &ICMData2);
 8001ad6:	496c      	ldr	r1, [pc, #432]	; (8001c88 <walker+0x1c0>)
 8001ad8:	486c      	ldr	r0, [pc, #432]	; (8001c8c <walker+0x1c4>)
 8001ada:	f7ff fd79 	bl	80015d0 <ICM20948_Read_Gyro>
	double Gcx = ICMData.Gx;
 8001ade:	4b68      	ldr	r3, [pc, #416]	; (8001c80 <walker+0x1b8>)
 8001ae0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001ae4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double Gcy = ICMData.Gy;
 8001ae8:	4b65      	ldr	r3, [pc, #404]	; (8001c80 <walker+0x1b8>)
 8001aea:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001aee:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double Gcz = ICMData.Gz;
 8001af2:	4b63      	ldr	r3, [pc, #396]	; (8001c80 <walker+0x1b8>)
 8001af4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001af8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	double Gcr = sqrt(pow(Gcx,2) + pow(Gcy,2) + pow(Gcz,2));
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b04:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b08:	f007 ff2c 	bl	8009964 <pow>
 8001b0c:	4604      	mov	r4, r0
 8001b0e:	460d      	mov	r5, r1
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b1c:	f007 ff22 	bl	8009964 <pow>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4620      	mov	r0, r4
 8001b26:	4629      	mov	r1, r5
 8001b28:	f7fe fb20 	bl	800016c <__adddf3>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4614      	mov	r4, r2
 8001b32:	461d      	mov	r5, r3
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b40:	f007 ff10 	bl	8009964 <pow>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4620      	mov	r0, r4
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	f7fe fb0e 	bl	800016c <__adddf3>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	f007 ff6c 	bl	8009a34 <sqrt>
 8001b5c:	e9c7 0102 	strd	r0, r1, [r7, #8]

	Gcx = ICMData2.Gx;
 8001b60:	4b49      	ldr	r3, [pc, #292]	; (8001c88 <walker+0x1c0>)
 8001b62:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001b66:	e9c7 2308 	strd	r2, r3, [r7, #32]
	Gcy = ICMData2.Gy;
 8001b6a:	4b47      	ldr	r3, [pc, #284]	; (8001c88 <walker+0x1c0>)
 8001b6c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001b70:	e9c7 2306 	strd	r2, r3, [r7, #24]
	Gcz = ICMData2.Gz;
 8001b74:	4b44      	ldr	r3, [pc, #272]	; (8001c88 <walker+0x1c0>)
 8001b76:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001b7a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	double Gcr2 = sqrt(pow(Gcx,2) + pow(Gcy,2) + pow(Gcz,2));
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b86:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b8a:	f007 feeb 	bl	8009964 <pow>
 8001b8e:	4604      	mov	r4, r0
 8001b90:	460d      	mov	r5, r1
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b9a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b9e:	f007 fee1 	bl	8009964 <pow>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	4629      	mov	r1, r5
 8001baa:	f7fe fadf 	bl	800016c <__adddf3>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4614      	mov	r4, r2
 8001bb4:	461d      	mov	r5, r3
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bbe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bc2:	f007 fecf 	bl	8009964 <pow>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4620      	mov	r0, r4
 8001bcc:	4629      	mov	r1, r5
 8001bce:	f7fe facd 	bl	800016c <__adddf3>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f007 ff2b 	bl	8009a34 <sqrt>
 8001bde:	e9c7 0100 	strd	r0, r1, [r7]

//    sprintf((char * )buf, "\t\t\t Gyroscope: first_gyro:%0.2f second_gyro:%0.2f  \r\n", Gcr,Gcr2);
//    send_uart((char *) buf);


	Gcr = Gcr * 10;
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	4b2a      	ldr	r3, [pc, #168]	; (8001c90 <walker+0x1c8>)
 8001be8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bec:	f7fe fc74 	bl	80004d8 <__aeabi_dmul>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	Gcr2 = Gcr2 * 10;
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <walker+0x1c8>)
 8001bfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c02:	f7fe fc69 	bl	80004d8 <__aeabi_dmul>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	e9c7 2300 	strd	r2, r3, [r7]
	if ((Gcr > 905) && (Gcr2 > 905)){
 8001c0e:	a31a      	add	r3, pc, #104	; (adr r3, 8001c78 <walker+0x1b0>)
 8001c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c18:	f7fe feee 	bl	80009f8 <__aeabi_dcmpgt>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00f      	beq.n	8001c42 <walker+0x17a>
 8001c22:	a315      	add	r3, pc, #84	; (adr r3, 8001c78 <walker+0x1b0>)
 8001c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c2c:	f7fe fee4 	bl	80009f8 <__aeabi_dcmpgt>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d005      	beq.n	8001c42 <walker+0x17a>
		motion_count = motion_count + 1;
 8001c36:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <walker+0x1cc>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	4a15      	ldr	r2, [pc, #84]	; (8001c94 <walker+0x1cc>)
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	e004      	b.n	8001c4c <walker+0x184>
	} else {
		motion_count = motion_count - 1;
 8001c42:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <walker+0x1cc>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <walker+0x1cc>)
 8001c4a:	6013      	str	r3, [r2, #0]
	}

//    sprintf((char *)buf,"motion_count : %d",motion_count);
//    send_uart((char *)buf);
	if (motion_count >= 40) {
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <walker+0x1cc>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b27      	cmp	r3, #39	; 0x27
 8001c52:	dd02      	ble.n	8001c5a <walker+0x192>
		motion_count = 40;
 8001c54:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <walker+0x1cc>)
 8001c56:	2228      	movs	r2, #40	; 0x28
 8001c58:	601a      	str	r2, [r3, #0]
	}
	if (motion_count <= -20) {
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <walker+0x1cc>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f113 0f13 	cmn.w	r3, #19
 8001c62:	da02      	bge.n	8001c6a <walker+0x1a2>
		motion_count = 0;
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <walker+0x1cc>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
	}
}
 8001c6a:	bf00      	nop
 8001c6c:	3728      	adds	r7, #40	; 0x28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bdb0      	pop	{r4, r5, r7, pc}
 8001c72:	bf00      	nop
 8001c74:	f3af 8000 	nop.w
 8001c78:	00000000 	.word	0x00000000
 8001c7c:	408c4800 	.word	0x408c4800
 8001c80:	20000380 	.word	0x20000380
 8001c84:	20000250 	.word	0x20000250
 8001c88:	200003f0 	.word	0x200003f0
 8001c8c:	200001fc 	.word	0x200001fc
 8001c90:	40240000 	.word	0x40240000
 8001c94:	20000354 	.word	0x20000354

08001c98 <sit_checker>:




/********* Sit Checker *************/
void sit_checker() {
 8001c98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c9c:	b088      	sub	sp, #32
 8001c9e:	af00      	add	r7, sp, #0
	previousTime = currentTime;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <sit_checker+0x24>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a06      	ldr	r2, [pc, #24]	; (8001cc0 <sit_checker+0x28>)
 8001ca6:	6013      	str	r3, [r2, #0]
	uint16_t alpha = 0.96;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	80fb      	strh	r3, [r7, #6]
	float av_roll ,av_pitch,av_yaw;
	float av_roll2,av_pitch2,av_yaw2;
	for(int i =0; i <= 50; i++){
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	f000 bc5e 	b.w	8002570 <sit_checker+0x8d8>
		for (int i = 0; i <= 10; i++) {
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	e3f1      	b.n	800249e <sit_checker+0x806>
 8001cba:	bf00      	nop
 8001cbc:	20000324 	.word	0x20000324
 8001cc0:	20000328 	.word	0x20000328
			previousTime = currentTime;
 8001cc4:	4bc4      	ldr	r3, [pc, #784]	; (8001fd8 <sit_checker+0x340>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4ac4      	ldr	r2, [pc, #784]	; (8001fdc <sit_checker+0x344>)
 8001cca:	6013      	str	r3, [r2, #0]
			ICM20948_Read_Accel(&hi2c1,&ICMData);
 8001ccc:	49c4      	ldr	r1, [pc, #784]	; (8001fe0 <sit_checker+0x348>)
 8001cce:	48c5      	ldr	r0, [pc, #788]	; (8001fe4 <sit_checker+0x34c>)
 8001cd0:	f7ff fc14 	bl	80014fc <ICM20948_Read_Accel>
			acc_x = ICMData.ACCEL_X_RAW;
 8001cd4:	4bc2      	ldr	r3, [pc, #776]	; (8001fe0 <sit_checker+0x348>)
 8001cd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4bc2      	ldr	r3, [pc, #776]	; (8001fe8 <sit_checker+0x350>)
 8001cde:	601a      	str	r2, [r3, #0]
			acc_y = ICMData.ACCEL_Y_RAW;
 8001ce0:	4bbf      	ldr	r3, [pc, #764]	; (8001fe0 <sit_checker+0x348>)
 8001ce2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4bc0      	ldr	r3, [pc, #768]	; (8001fec <sit_checker+0x354>)
 8001cea:	601a      	str	r2, [r3, #0]
			acc_z = ICMData.ACCEL_Z_RAW;
 8001cec:	4bbc      	ldr	r3, [pc, #752]	; (8001fe0 <sit_checker+0x348>)
 8001cee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	4bbe      	ldr	r3, [pc, #760]	; (8001ff0 <sit_checker+0x358>)
 8001cf6:	601a      	str	r2, [r3, #0]

			acc_x = noise_removal(acc_x);
 8001cf8:	4bbb      	ldr	r3, [pc, #748]	; (8001fe8 <sit_checker+0x350>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	b21b      	sxth	r3, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fe12 	bl	8001928 <noise_removal>
 8001d04:	4603      	mov	r3, r0
 8001d06:	461a      	mov	r2, r3
 8001d08:	4bb7      	ldr	r3, [pc, #732]	; (8001fe8 <sit_checker+0x350>)
 8001d0a:	601a      	str	r2, [r3, #0]
			acc_y = noise_removal(acc_y);
 8001d0c:	4bb7      	ldr	r3, [pc, #732]	; (8001fec <sit_checker+0x354>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	b21b      	sxth	r3, r3
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fe08 	bl	8001928 <noise_removal>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	4bb3      	ldr	r3, [pc, #716]	; (8001fec <sit_checker+0x354>)
 8001d1e:	601a      	str	r2, [r3, #0]
			acc_z = noise_removal(acc_z);
 8001d20:	4bb3      	ldr	r3, [pc, #716]	; (8001ff0 <sit_checker+0x358>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	b21b      	sxth	r3, r3
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fdfe 	bl	8001928 <noise_removal>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4baf      	ldr	r3, [pc, #700]	; (8001ff0 <sit_checker+0x358>)
 8001d32:	601a      	str	r2, [r3, #0]

			//Calculating Roll and Pitch from the accelrometer data
			acc_angle_x = (atan(acc_y/sqrt(pow(acc_x,2)+pow(acc_z,2))) * RAD_TO_DEG) - 0.58;
 8001d34:	4bad      	ldr	r3, [pc, #692]	; (8001fec <sit_checker+0x354>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fb63 	bl	8000404 <__aeabi_i2d>
 8001d3e:	4604      	mov	r4, r0
 8001d40:	460d      	mov	r5, r1
 8001d42:	4ba9      	ldr	r3, [pc, #676]	; (8001fe8 <sit_checker+0x350>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fb5c 	bl	8000404 <__aeabi_i2d>
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d54:	f007 fe06 	bl	8009964 <pow>
 8001d58:	4680      	mov	r8, r0
 8001d5a:	4689      	mov	r9, r1
 8001d5c:	4ba4      	ldr	r3, [pc, #656]	; (8001ff0 <sit_checker+0x358>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fb4f 	bl	8000404 <__aeabi_i2d>
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d6e:	f007 fdf9 	bl	8009964 <pow>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4640      	mov	r0, r8
 8001d78:	4649      	mov	r1, r9
 8001d7a:	f7fe f9f7 	bl	800016c <__adddf3>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4610      	mov	r0, r2
 8001d84:	4619      	mov	r1, r3
 8001d86:	f007 fe55 	bl	8009a34 <sqrt>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4620      	mov	r0, r4
 8001d90:	4629      	mov	r1, r5
 8001d92:	f7fe fccb 	bl	800072c <__aeabi_ddiv>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f007 fc53 	bl	8009648 <atan>
 8001da2:	a387      	add	r3, pc, #540	; (adr r3, 8001fc0 <sit_checker+0x328>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	f7fe fb96 	bl	80004d8 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	a384      	add	r3, pc, #528	; (adr r3, 8001fc8 <sit_checker+0x330>)
 8001db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dba:	f7fe f9d5 	bl	8000168 <__aeabi_dsub>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f7fe fe5f 	bl	8000a88 <__aeabi_d2f>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4a89      	ldr	r2, [pc, #548]	; (8001ff4 <sit_checker+0x35c>)
 8001dce:	6013      	str	r3, [r2, #0]
	      //AccErrorX ~ (0.58)
			acc_angle_y = (atan(-1 * acc_x/sqrt(pow(acc_y,2)+pow(acc_z,2))) * RAD_TO_DEG) + 1.58;
 8001dd0:	4b85      	ldr	r3, [pc, #532]	; (8001fe8 <sit_checker+0x350>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	425b      	negs	r3, r3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fb14 	bl	8000404 <__aeabi_i2d>
 8001ddc:	4604      	mov	r4, r0
 8001dde:	460d      	mov	r5, r1
 8001de0:	4b82      	ldr	r3, [pc, #520]	; (8001fec <sit_checker+0x354>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fb0d 	bl	8000404 <__aeabi_i2d>
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001df2:	f007 fdb7 	bl	8009964 <pow>
 8001df6:	4680      	mov	r8, r0
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4b7d      	ldr	r3, [pc, #500]	; (8001ff0 <sit_checker+0x358>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fb00 	bl	8000404 <__aeabi_i2d>
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e0c:	f007 fdaa 	bl	8009964 <pow>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4640      	mov	r0, r8
 8001e16:	4649      	mov	r1, r9
 8001e18:	f7fe f9a8 	bl	800016c <__adddf3>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4610      	mov	r0, r2
 8001e22:	4619      	mov	r1, r3
 8001e24:	f007 fe06 	bl	8009a34 <sqrt>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	4629      	mov	r1, r5
 8001e30:	f7fe fc7c 	bl	800072c <__aeabi_ddiv>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f007 fc04 	bl	8009648 <atan>
 8001e40:	a35f      	add	r3, pc, #380	; (adr r3, 8001fc0 <sit_checker+0x328>)
 8001e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e46:	f7fe fb47 	bl	80004d8 <__aeabi_dmul>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4610      	mov	r0, r2
 8001e50:	4619      	mov	r1, r3
 8001e52:	a35f      	add	r3, pc, #380	; (adr r3, 8001fd0 <sit_checker+0x338>)
 8001e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e58:	f7fe f988 	bl	800016c <__adddf3>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	f7fe fe10 	bl	8000a88 <__aeabi_d2f>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	4a63      	ldr	r2, [pc, #396]	; (8001ff8 <sit_checker+0x360>)
 8001e6c:	6013      	str	r3, [r2, #0]
	      //AccErrorY ~ (-1.58)

			previousTime = currentTime;
 8001e6e:	4b5a      	ldr	r3, [pc, #360]	; (8001fd8 <sit_checker+0x340>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a5a      	ldr	r2, [pc, #360]	; (8001fdc <sit_checker+0x344>)
 8001e74:	6013      	str	r3, [r2, #0]
			currentTime = HAL_GetTick();
 8001e76:	f001 feef 	bl	8003c58 <HAL_GetTick>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe ff09 	bl	8000c94 <__aeabi_ui2f>
 8001e82:	4603      	mov	r3, r0
 8001e84:	4a54      	ldr	r2, [pc, #336]	; (8001fd8 <sit_checker+0x340>)
 8001e86:	6013      	str	r3, [r2, #0]
			elapsedTime = (currentTime - previousTime) / 1000; // Divide by 1000 to get seconds
 8001e88:	4b53      	ldr	r3, [pc, #332]	; (8001fd8 <sit_checker+0x340>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a53      	ldr	r2, [pc, #332]	; (8001fdc <sit_checker+0x344>)
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe fe4c 	bl	8000b30 <__aeabi_fsub>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	4958      	ldr	r1, [pc, #352]	; (8001ffc <sit_checker+0x364>)
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff f805 	bl	8000eac <__aeabi_fdiv>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b56      	ldr	r3, [pc, #344]	; (8002000 <sit_checker+0x368>)
 8001ea8:	601a      	str	r2, [r3, #0]

			ICM20948_Read_Gyro(&hi2c1, &ICMData);
 8001eaa:	494d      	ldr	r1, [pc, #308]	; (8001fe0 <sit_checker+0x348>)
 8001eac:	484d      	ldr	r0, [pc, #308]	; (8001fe4 <sit_checker+0x34c>)
 8001eae:	f7ff fb8f 	bl	80015d0 <ICM20948_Read_Gyro>
			gyro_x = gyro_x + (ICMData.Gx * elapsedTime);
 8001eb2:	4b54      	ldr	r3, [pc, #336]	; (8002004 <sit_checker+0x36c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe faa4 	bl	8000404 <__aeabi_i2d>
 8001ebc:	4680      	mov	r8, r0
 8001ebe:	4689      	mov	r9, r1
 8001ec0:	4b47      	ldr	r3, [pc, #284]	; (8001fe0 <sit_checker+0x348>)
 8001ec2:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001ec6:	4b4e      	ldr	r3, [pc, #312]	; (8002000 <sit_checker+0x368>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe faac 	bl	8000428 <__aeabi_f2d>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	4629      	mov	r1, r5
 8001ed8:	f7fe fafe 	bl	80004d8 <__aeabi_dmul>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4640      	mov	r0, r8
 8001ee2:	4649      	mov	r1, r9
 8001ee4:	f7fe f942 	bl	800016c <__adddf3>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4610      	mov	r0, r2
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f7fe fda2 	bl	8000a38 <__aeabi_d2iz>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	4a43      	ldr	r2, [pc, #268]	; (8002004 <sit_checker+0x36c>)
 8001ef8:	6013      	str	r3, [r2, #0]
			gyro_y = gyro_y + (ICMData.Gy * elapsedTime);
 8001efa:	4b43      	ldr	r3, [pc, #268]	; (8002008 <sit_checker+0x370>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fa80 	bl	8000404 <__aeabi_i2d>
 8001f04:	4680      	mov	r8, r0
 8001f06:	4689      	mov	r9, r1
 8001f08:	4b35      	ldr	r3, [pc, #212]	; (8001fe0 <sit_checker+0x348>)
 8001f0a:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001f0e:	4b3c      	ldr	r3, [pc, #240]	; (8002000 <sit_checker+0x368>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe fa88 	bl	8000428 <__aeabi_f2d>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	4629      	mov	r1, r5
 8001f20:	f7fe fada 	bl	80004d8 <__aeabi_dmul>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4640      	mov	r0, r8
 8001f2a:	4649      	mov	r1, r9
 8001f2c:	f7fe f91e 	bl	800016c <__adddf3>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4610      	mov	r0, r2
 8001f36:	4619      	mov	r1, r3
 8001f38:	f7fe fd7e 	bl	8000a38 <__aeabi_d2iz>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	4a32      	ldr	r2, [pc, #200]	; (8002008 <sit_checker+0x370>)
 8001f40:	6013      	str	r3, [r2, #0]
			gyro_z = gyro_z + (ICMData.Gz * elapsedTime);
 8001f42:	4b32      	ldr	r3, [pc, #200]	; (800200c <sit_checker+0x374>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fa5c 	bl	8000404 <__aeabi_i2d>
 8001f4c:	4680      	mov	r8, r0
 8001f4e:	4689      	mov	r9, r1
 8001f50:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <sit_checker+0x348>)
 8001f52:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001f56:	4b2a      	ldr	r3, [pc, #168]	; (8002000 <sit_checker+0x368>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe fa64 	bl	8000428 <__aeabi_f2d>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4620      	mov	r0, r4
 8001f66:	4629      	mov	r1, r5
 8001f68:	f7fe fab6 	bl	80004d8 <__aeabi_dmul>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4640      	mov	r0, r8
 8001f72:	4649      	mov	r1, r9
 8001f74:	f7fe f8fa 	bl	800016c <__adddf3>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f7fe fd5a 	bl	8000a38 <__aeabi_d2iz>
 8001f84:	4603      	mov	r3, r0
 8001f86:	4a21      	ldr	r2, [pc, #132]	; (800200c <sit_checker+0x374>)
 8001f88:	6013      	str	r3, [r2, #0]


			roll = alpha * gyro_x + (1-alpha) * acc_angle_x;
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	4a1d      	ldr	r2, [pc, #116]	; (8002004 <sit_checker+0x36c>)
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	fb02 f303 	mul.w	r3, r2, r3
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe fe81 	bl	8000c9c <__aeabi_i2f>
 8001f9a:	4604      	mov	r4, r0
 8001f9c:	88fb      	ldrh	r3, [r7, #6]
 8001f9e:	f1c3 0301 	rsb	r3, r3, #1
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fe7a 	bl	8000c9c <__aeabi_i2f>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <sit_checker+0x35c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	f7fe fec7 	bl	8000d44 <__aeabi_fmul>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	e02a      	b.n	8002010 <sit_checker+0x378>
 8001fba:	bf00      	nop
 8001fbc:	f3af 8000 	nop.w
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	404ca5dc 	.word	0x404ca5dc
 8001fc8:	28f5c28f 	.word	0x28f5c28f
 8001fcc:	3fe28f5c 	.word	0x3fe28f5c
 8001fd0:	147ae148 	.word	0x147ae148
 8001fd4:	3ff947ae 	.word	0x3ff947ae
 8001fd8:	20000324 	.word	0x20000324
 8001fdc:	20000328 	.word	0x20000328
 8001fe0:	20000380 	.word	0x20000380
 8001fe4:	200001fc 	.word	0x200001fc
 8001fe8:	2000033c 	.word	0x2000033c
 8001fec:	20000340 	.word	0x20000340
 8001ff0:	20000344 	.word	0x20000344
 8001ff4:	20000334 	.word	0x20000334
 8001ff8:	20000338 	.word	0x20000338
 8001ffc:	447a0000 	.word	0x447a0000
 8002000:	20000320 	.word	0x20000320
 8002004:	20000348 	.word	0x20000348
 8002008:	2000034c 	.word	0x2000034c
 800200c:	20000350 	.word	0x20000350
 8002010:	4619      	mov	r1, r3
 8002012:	4620      	mov	r0, r4
 8002014:	f7fe fd8e 	bl	8000b34 <__addsf3>
 8002018:	4603      	mov	r3, r0
 800201a:	461a      	mov	r2, r3
 800201c:	4bba      	ldr	r3, [pc, #744]	; (8002308 <sit_checker+0x670>)
 800201e:	601a      	str	r2, [r3, #0]
			pitch = alpha * gyro_y + (1-alpha) * acc_angle_y;
 8002020:	88fb      	ldrh	r3, [r7, #6]
 8002022:	4aba      	ldr	r2, [pc, #744]	; (800230c <sit_checker+0x674>)
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	fb02 f303 	mul.w	r3, r2, r3
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe fe36 	bl	8000c9c <__aeabi_i2f>
 8002030:	4604      	mov	r4, r0
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	f1c3 0301 	rsb	r3, r3, #1
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe fe2f 	bl	8000c9c <__aeabi_i2f>
 800203e:	4602      	mov	r2, r0
 8002040:	4bb3      	ldr	r3, [pc, #716]	; (8002310 <sit_checker+0x678>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4619      	mov	r1, r3
 8002046:	4610      	mov	r0, r2
 8002048:	f7fe fe7c 	bl	8000d44 <__aeabi_fmul>
 800204c:	4603      	mov	r3, r0
 800204e:	4619      	mov	r1, r3
 8002050:	4620      	mov	r0, r4
 8002052:	f7fe fd6f 	bl	8000b34 <__addsf3>
 8002056:	4603      	mov	r3, r0
 8002058:	461a      	mov	r2, r3
 800205a:	4bae      	ldr	r3, [pc, #696]	; (8002314 <sit_checker+0x67c>)
 800205c:	601a      	str	r2, [r3, #0]
			yaw = gyro_z;
 800205e:	4bae      	ldr	r3, [pc, #696]	; (8002318 <sit_checker+0x680>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fe1a 	bl	8000c9c <__aeabi_i2f>
 8002068:	4603      	mov	r3, r0
 800206a:	4aac      	ldr	r2, [pc, #688]	; (800231c <sit_checker+0x684>)
 800206c:	6013      	str	r3, [r2, #0]


			roll = noise_removal_float(roll);
 800206e:	4ba6      	ldr	r3, [pc, #664]	; (8002308 <sit_checker+0x670>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fcc8 	bl	8001a08 <noise_removal_float>
 8002078:	4603      	mov	r3, r0
 800207a:	4aa3      	ldr	r2, [pc, #652]	; (8002308 <sit_checker+0x670>)
 800207c:	6013      	str	r3, [r2, #0]
			pitch = noise_removal_float(pitch);
 800207e:	4ba5      	ldr	r3, [pc, #660]	; (8002314 <sit_checker+0x67c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff fcc0 	bl	8001a08 <noise_removal_float>
 8002088:	4603      	mov	r3, r0
 800208a:	4aa2      	ldr	r2, [pc, #648]	; (8002314 <sit_checker+0x67c>)
 800208c:	6013      	str	r3, [r2, #0]

			av_roll += roll;
 800208e:	4b9e      	ldr	r3, [pc, #632]	; (8002308 <sit_checker+0x670>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4619      	mov	r1, r3
 8002094:	69f8      	ldr	r0, [r7, #28]
 8002096:	f7fe fd4d 	bl	8000b34 <__addsf3>
 800209a:	4603      	mov	r3, r0
 800209c:	61fb      	str	r3, [r7, #28]
			av_pitch += pitch;
 800209e:	4b9d      	ldr	r3, [pc, #628]	; (8002314 <sit_checker+0x67c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4619      	mov	r1, r3
 80020a4:	69b8      	ldr	r0, [r7, #24]
 80020a6:	f7fe fd45 	bl	8000b34 <__addsf3>
 80020aa:	4603      	mov	r3, r0
 80020ac:	61bb      	str	r3, [r7, #24]

			ICM20948_Read_Accel(&hi2c2,&ICMData);
 80020ae:	499c      	ldr	r1, [pc, #624]	; (8002320 <sit_checker+0x688>)
 80020b0:	489c      	ldr	r0, [pc, #624]	; (8002324 <sit_checker+0x68c>)
 80020b2:	f7ff fa23 	bl	80014fc <ICM20948_Read_Accel>
			acc_x = ICMData.ACCEL_X_RAW;
 80020b6:	4b9a      	ldr	r3, [pc, #616]	; (8002320 <sit_checker+0x688>)
 80020b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020bc:	461a      	mov	r2, r3
 80020be:	4b9a      	ldr	r3, [pc, #616]	; (8002328 <sit_checker+0x690>)
 80020c0:	601a      	str	r2, [r3, #0]
			acc_y = ICMData.ACCEL_Y_RAW;
 80020c2:	4b97      	ldr	r3, [pc, #604]	; (8002320 <sit_checker+0x688>)
 80020c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020c8:	461a      	mov	r2, r3
 80020ca:	4b98      	ldr	r3, [pc, #608]	; (800232c <sit_checker+0x694>)
 80020cc:	601a      	str	r2, [r3, #0]
			acc_z = ICMData.ACCEL_Z_RAW;
 80020ce:	4b94      	ldr	r3, [pc, #592]	; (8002320 <sit_checker+0x688>)
 80020d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b96      	ldr	r3, [pc, #600]	; (8002330 <sit_checker+0x698>)
 80020d8:	601a      	str	r2, [r3, #0]


			acc_x = noise_removal(acc_x);
 80020da:	4b93      	ldr	r3, [pc, #588]	; (8002328 <sit_checker+0x690>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	b21b      	sxth	r3, r3
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff fc21 	bl	8001928 <noise_removal>
 80020e6:	4603      	mov	r3, r0
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b8f      	ldr	r3, [pc, #572]	; (8002328 <sit_checker+0x690>)
 80020ec:	601a      	str	r2, [r3, #0]
			acc_y = noise_removal(acc_y);
 80020ee:	4b8f      	ldr	r3, [pc, #572]	; (800232c <sit_checker+0x694>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	b21b      	sxth	r3, r3
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff fc17 	bl	8001928 <noise_removal>
 80020fa:	4603      	mov	r3, r0
 80020fc:	461a      	mov	r2, r3
 80020fe:	4b8b      	ldr	r3, [pc, #556]	; (800232c <sit_checker+0x694>)
 8002100:	601a      	str	r2, [r3, #0]
			acc_z = noise_removal(acc_z);
 8002102:	4b8b      	ldr	r3, [pc, #556]	; (8002330 <sit_checker+0x698>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	b21b      	sxth	r3, r3
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fc0d 	bl	8001928 <noise_removal>
 800210e:	4603      	mov	r3, r0
 8002110:	461a      	mov	r2, r3
 8002112:	4b87      	ldr	r3, [pc, #540]	; (8002330 <sit_checker+0x698>)
 8002114:	601a      	str	r2, [r3, #0]


	      //Calculating Roll and Pitch from the accelrometer data
			acc_angle_x = (atan(acc_y/sqrt(pow(acc_x,2)+pow(acc_z,2))) * RAD_TO_DEG) - 0.58;
 8002116:	4b85      	ldr	r3, [pc, #532]	; (800232c <sit_checker+0x694>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe f972 	bl	8000404 <__aeabi_i2d>
 8002120:	4604      	mov	r4, r0
 8002122:	460d      	mov	r5, r1
 8002124:	4b80      	ldr	r3, [pc, #512]	; (8002328 <sit_checker+0x690>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe f96b 	bl	8000404 <__aeabi_i2d>
 800212e:	f04f 0200 	mov.w	r2, #0
 8002132:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002136:	f007 fc15 	bl	8009964 <pow>
 800213a:	4680      	mov	r8, r0
 800213c:	4689      	mov	r9, r1
 800213e:	4b7c      	ldr	r3, [pc, #496]	; (8002330 <sit_checker+0x698>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe f95e 	bl	8000404 <__aeabi_i2d>
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002150:	f007 fc08 	bl	8009964 <pow>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4640      	mov	r0, r8
 800215a:	4649      	mov	r1, r9
 800215c:	f7fe f806 	bl	800016c <__adddf3>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4610      	mov	r0, r2
 8002166:	4619      	mov	r1, r3
 8002168:	f007 fc64 	bl	8009a34 <sqrt>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4620      	mov	r0, r4
 8002172:	4629      	mov	r1, r5
 8002174:	f7fe fada 	bl	800072c <__aeabi_ddiv>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4610      	mov	r0, r2
 800217e:	4619      	mov	r1, r3
 8002180:	f007 fa62 	bl	8009648 <atan>
 8002184:	a35a      	add	r3, pc, #360	; (adr r3, 80022f0 <sit_checker+0x658>)
 8002186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218a:	f7fe f9a5 	bl	80004d8 <__aeabi_dmul>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	a358      	add	r3, pc, #352	; (adr r3, 80022f8 <sit_checker+0x660>)
 8002198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219c:	f7fd ffe4 	bl	8000168 <__aeabi_dsub>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4610      	mov	r0, r2
 80021a6:	4619      	mov	r1, r3
 80021a8:	f7fe fc6e 	bl	8000a88 <__aeabi_d2f>
 80021ac:	4603      	mov	r3, r0
 80021ae:	4a61      	ldr	r2, [pc, #388]	; (8002334 <sit_checker+0x69c>)
 80021b0:	6013      	str	r3, [r2, #0]
	      //AccErrorX ~ (0.58)
			acc_angle_y = (atan(-1 * acc_x/sqrt(pow(acc_y,2)+pow(acc_z,2))) * RAD_TO_DEG) + 1.58;
 80021b2:	4b5d      	ldr	r3, [pc, #372]	; (8002328 <sit_checker+0x690>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	425b      	negs	r3, r3
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe f923 	bl	8000404 <__aeabi_i2d>
 80021be:	4604      	mov	r4, r0
 80021c0:	460d      	mov	r5, r1
 80021c2:	4b5a      	ldr	r3, [pc, #360]	; (800232c <sit_checker+0x694>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe f91c 	bl	8000404 <__aeabi_i2d>
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021d4:	f007 fbc6 	bl	8009964 <pow>
 80021d8:	4680      	mov	r8, r0
 80021da:	4689      	mov	r9, r1
 80021dc:	4b54      	ldr	r3, [pc, #336]	; (8002330 <sit_checker+0x698>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe f90f 	bl	8000404 <__aeabi_i2d>
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021ee:	f007 fbb9 	bl	8009964 <pow>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4640      	mov	r0, r8
 80021f8:	4649      	mov	r1, r9
 80021fa:	f7fd ffb7 	bl	800016c <__adddf3>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4610      	mov	r0, r2
 8002204:	4619      	mov	r1, r3
 8002206:	f007 fc15 	bl	8009a34 <sqrt>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4620      	mov	r0, r4
 8002210:	4629      	mov	r1, r5
 8002212:	f7fe fa8b 	bl	800072c <__aeabi_ddiv>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4610      	mov	r0, r2
 800221c:	4619      	mov	r1, r3
 800221e:	f007 fa13 	bl	8009648 <atan>
 8002222:	a333      	add	r3, pc, #204	; (adr r3, 80022f0 <sit_checker+0x658>)
 8002224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002228:	f7fe f956 	bl	80004d8 <__aeabi_dmul>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4610      	mov	r0, r2
 8002232:	4619      	mov	r1, r3
 8002234:	a332      	add	r3, pc, #200	; (adr r3, 8002300 <sit_checker+0x668>)
 8002236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223a:	f7fd ff97 	bl	800016c <__adddf3>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4610      	mov	r0, r2
 8002244:	4619      	mov	r1, r3
 8002246:	f7fe fc1f 	bl	8000a88 <__aeabi_d2f>
 800224a:	4603      	mov	r3, r0
 800224c:	4a30      	ldr	r2, [pc, #192]	; (8002310 <sit_checker+0x678>)
 800224e:	6013      	str	r3, [r2, #0]
	      //AccErrorY ~ (-1.58)

			previousTime = currentTime;
 8002250:	4b39      	ldr	r3, [pc, #228]	; (8002338 <sit_checker+0x6a0>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a39      	ldr	r2, [pc, #228]	; (800233c <sit_checker+0x6a4>)
 8002256:	6013      	str	r3, [r2, #0]
			currentTime = HAL_GetTick();
 8002258:	f001 fcfe 	bl	8003c58 <HAL_GetTick>
 800225c:	4603      	mov	r3, r0
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fd18 	bl	8000c94 <__aeabi_ui2f>
 8002264:	4603      	mov	r3, r0
 8002266:	4a34      	ldr	r2, [pc, #208]	; (8002338 <sit_checker+0x6a0>)
 8002268:	6013      	str	r3, [r2, #0]
			elapsedTime = (currentTime - previousTime) / 1000; // Divide by 1000 to get seconds
 800226a:	4b33      	ldr	r3, [pc, #204]	; (8002338 <sit_checker+0x6a0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a33      	ldr	r2, [pc, #204]	; (800233c <sit_checker+0x6a4>)
 8002270:	6812      	ldr	r2, [r2, #0]
 8002272:	4611      	mov	r1, r2
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe fc5b 	bl	8000b30 <__aeabi_fsub>
 800227a:	4603      	mov	r3, r0
 800227c:	4930      	ldr	r1, [pc, #192]	; (8002340 <sit_checker+0x6a8>)
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe fe14 	bl	8000eac <__aeabi_fdiv>
 8002284:	4603      	mov	r3, r0
 8002286:	461a      	mov	r2, r3
 8002288:	4b2e      	ldr	r3, [pc, #184]	; (8002344 <sit_checker+0x6ac>)
 800228a:	601a      	str	r2, [r3, #0]

			ICM20948_Read_Gyro(&hi2c2, &ICMData);
 800228c:	4924      	ldr	r1, [pc, #144]	; (8002320 <sit_checker+0x688>)
 800228e:	4825      	ldr	r0, [pc, #148]	; (8002324 <sit_checker+0x68c>)
 8002290:	f7ff f99e 	bl	80015d0 <ICM20948_Read_Gyro>
			gyro_x = gyro_x + (ICMData.Gx * elapsedTime);
 8002294:	4b2c      	ldr	r3, [pc, #176]	; (8002348 <sit_checker+0x6b0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe f8b3 	bl	8000404 <__aeabi_i2d>
 800229e:	4680      	mov	r8, r0
 80022a0:	4689      	mov	r9, r1
 80022a2:	4b1f      	ldr	r3, [pc, #124]	; (8002320 <sit_checker+0x688>)
 80022a4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80022a8:	4b26      	ldr	r3, [pc, #152]	; (8002344 <sit_checker+0x6ac>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe f8bb 	bl	8000428 <__aeabi_f2d>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4620      	mov	r0, r4
 80022b8:	4629      	mov	r1, r5
 80022ba:	f7fe f90d 	bl	80004d8 <__aeabi_dmul>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4640      	mov	r0, r8
 80022c4:	4649      	mov	r1, r9
 80022c6:	f7fd ff51 	bl	800016c <__adddf3>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	4610      	mov	r0, r2
 80022d0:	4619      	mov	r1, r3
 80022d2:	f7fe fbb1 	bl	8000a38 <__aeabi_d2iz>
 80022d6:	4603      	mov	r3, r0
 80022d8:	4a1b      	ldr	r2, [pc, #108]	; (8002348 <sit_checker+0x6b0>)
 80022da:	6013      	str	r3, [r2, #0]
			gyro_y = gyro_y + (ICMData.Gy * elapsedTime);
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <sit_checker+0x674>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe f88f 	bl	8000404 <__aeabi_i2d>
 80022e6:	4680      	mov	r8, r0
 80022e8:	4689      	mov	r9, r1
 80022ea:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <sit_checker+0x688>)
 80022ec:	e02e      	b.n	800234c <sit_checker+0x6b4>
 80022ee:	bf00      	nop
 80022f0:	20000000 	.word	0x20000000
 80022f4:	404ca5dc 	.word	0x404ca5dc
 80022f8:	28f5c28f 	.word	0x28f5c28f
 80022fc:	3fe28f5c 	.word	0x3fe28f5c
 8002300:	147ae148 	.word	0x147ae148
 8002304:	3ff947ae 	.word	0x3ff947ae
 8002308:	20000310 	.word	0x20000310
 800230c:	2000034c 	.word	0x2000034c
 8002310:	20000338 	.word	0x20000338
 8002314:	20000308 	.word	0x20000308
 8002318:	20000350 	.word	0x20000350
 800231c:	2000030c 	.word	0x2000030c
 8002320:	20000380 	.word	0x20000380
 8002324:	20000250 	.word	0x20000250
 8002328:	2000033c 	.word	0x2000033c
 800232c:	20000340 	.word	0x20000340
 8002330:	20000344 	.word	0x20000344
 8002334:	20000334 	.word	0x20000334
 8002338:	20000324 	.word	0x20000324
 800233c:	20000328 	.word	0x20000328
 8002340:	447a0000 	.word	0x447a0000
 8002344:	20000320 	.word	0x20000320
 8002348:	20000348 	.word	0x20000348
 800234c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002350:	4b98      	ldr	r3, [pc, #608]	; (80025b4 <sit_checker+0x91c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe f867 	bl	8000428 <__aeabi_f2d>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4620      	mov	r0, r4
 8002360:	4629      	mov	r1, r5
 8002362:	f7fe f8b9 	bl	80004d8 <__aeabi_dmul>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4640      	mov	r0, r8
 800236c:	4649      	mov	r1, r9
 800236e:	f7fd fefd 	bl	800016c <__adddf3>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	4610      	mov	r0, r2
 8002378:	4619      	mov	r1, r3
 800237a:	f7fe fb5d 	bl	8000a38 <__aeabi_d2iz>
 800237e:	4603      	mov	r3, r0
 8002380:	4a8d      	ldr	r2, [pc, #564]	; (80025b8 <sit_checker+0x920>)
 8002382:	6013      	str	r3, [r2, #0]
			gyro_z = gyro_z + (ICMData.Gz * elapsedTime);
 8002384:	4b8d      	ldr	r3, [pc, #564]	; (80025bc <sit_checker+0x924>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe f83b 	bl	8000404 <__aeabi_i2d>
 800238e:	4680      	mov	r8, r0
 8002390:	4689      	mov	r9, r1
 8002392:	4b8b      	ldr	r3, [pc, #556]	; (80025c0 <sit_checker+0x928>)
 8002394:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002398:	4b86      	ldr	r3, [pc, #536]	; (80025b4 <sit_checker+0x91c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe f843 	bl	8000428 <__aeabi_f2d>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	4620      	mov	r0, r4
 80023a8:	4629      	mov	r1, r5
 80023aa:	f7fe f895 	bl	80004d8 <__aeabi_dmul>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4640      	mov	r0, r8
 80023b4:	4649      	mov	r1, r9
 80023b6:	f7fd fed9 	bl	800016c <__adddf3>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4610      	mov	r0, r2
 80023c0:	4619      	mov	r1, r3
 80023c2:	f7fe fb39 	bl	8000a38 <__aeabi_d2iz>
 80023c6:	4603      	mov	r3, r0
 80023c8:	4a7c      	ldr	r2, [pc, #496]	; (80025bc <sit_checker+0x924>)
 80023ca:	6013      	str	r3, [r2, #0]


	      //Complimentary filter- combine accelerometer and gyro angle values.
			roll2 = alpha * gyro_x + (1-alpha) * acc_angle_x;
 80023cc:	88fb      	ldrh	r3, [r7, #6]
 80023ce:	4a7d      	ldr	r2, [pc, #500]	; (80025c4 <sit_checker+0x92c>)
 80023d0:	6812      	ldr	r2, [r2, #0]
 80023d2:	fb02 f303 	mul.w	r3, r2, r3
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe fc60 	bl	8000c9c <__aeabi_i2f>
 80023dc:	4604      	mov	r4, r0
 80023de:	88fb      	ldrh	r3, [r7, #6]
 80023e0:	f1c3 0301 	rsb	r3, r3, #1
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe fc59 	bl	8000c9c <__aeabi_i2f>
 80023ea:	4602      	mov	r2, r0
 80023ec:	4b76      	ldr	r3, [pc, #472]	; (80025c8 <sit_checker+0x930>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4619      	mov	r1, r3
 80023f2:	4610      	mov	r0, r2
 80023f4:	f7fe fca6 	bl	8000d44 <__aeabi_fmul>
 80023f8:	4603      	mov	r3, r0
 80023fa:	4619      	mov	r1, r3
 80023fc:	4620      	mov	r0, r4
 80023fe:	f7fe fb99 	bl	8000b34 <__addsf3>
 8002402:	4603      	mov	r3, r0
 8002404:	461a      	mov	r2, r3
 8002406:	4b71      	ldr	r3, [pc, #452]	; (80025cc <sit_checker+0x934>)
 8002408:	601a      	str	r2, [r3, #0]
			pitch2 = alpha * gyro_y + (1-alpha) * acc_angle_y;
 800240a:	88fb      	ldrh	r3, [r7, #6]
 800240c:	4a6a      	ldr	r2, [pc, #424]	; (80025b8 <sit_checker+0x920>)
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	fb02 f303 	mul.w	r3, r2, r3
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe fc41 	bl	8000c9c <__aeabi_i2f>
 800241a:	4604      	mov	r4, r0
 800241c:	88fb      	ldrh	r3, [r7, #6]
 800241e:	f1c3 0301 	rsb	r3, r3, #1
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe fc3a 	bl	8000c9c <__aeabi_i2f>
 8002428:	4602      	mov	r2, r0
 800242a:	4b69      	ldr	r3, [pc, #420]	; (80025d0 <sit_checker+0x938>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4619      	mov	r1, r3
 8002430:	4610      	mov	r0, r2
 8002432:	f7fe fc87 	bl	8000d44 <__aeabi_fmul>
 8002436:	4603      	mov	r3, r0
 8002438:	4619      	mov	r1, r3
 800243a:	4620      	mov	r0, r4
 800243c:	f7fe fb7a 	bl	8000b34 <__addsf3>
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	4b63      	ldr	r3, [pc, #396]	; (80025d4 <sit_checker+0x93c>)
 8002446:	601a      	str	r2, [r3, #0]
			yaw2 = gyro_z;
 8002448:	4b5c      	ldr	r3, [pc, #368]	; (80025bc <sit_checker+0x924>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe fc25 	bl	8000c9c <__aeabi_i2f>
 8002452:	4603      	mov	r3, r0
 8002454:	4a60      	ldr	r2, [pc, #384]	; (80025d8 <sit_checker+0x940>)
 8002456:	6013      	str	r3, [r2, #0]

			roll2 = noise_removal_float(roll2);
 8002458:	4b5c      	ldr	r3, [pc, #368]	; (80025cc <sit_checker+0x934>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff fad3 	bl	8001a08 <noise_removal_float>
 8002462:	4603      	mov	r3, r0
 8002464:	4a59      	ldr	r2, [pc, #356]	; (80025cc <sit_checker+0x934>)
 8002466:	6013      	str	r3, [r2, #0]
			pitch2 = noise_removal_float(pitch2);
 8002468:	4b5a      	ldr	r3, [pc, #360]	; (80025d4 <sit_checker+0x93c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff facb 	bl	8001a08 <noise_removal_float>
 8002472:	4603      	mov	r3, r0
 8002474:	4a57      	ldr	r2, [pc, #348]	; (80025d4 <sit_checker+0x93c>)
 8002476:	6013      	str	r3, [r2, #0]



			av_roll2 += roll2;
 8002478:	4b54      	ldr	r3, [pc, #336]	; (80025cc <sit_checker+0x934>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4619      	mov	r1, r3
 800247e:	6978      	ldr	r0, [r7, #20]
 8002480:	f7fe fb58 	bl	8000b34 <__addsf3>
 8002484:	4603      	mov	r3, r0
 8002486:	617b      	str	r3, [r7, #20]
			av_pitch2 += pitch2;
 8002488:	4b52      	ldr	r3, [pc, #328]	; (80025d4 <sit_checker+0x93c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4619      	mov	r1, r3
 800248e:	6938      	ldr	r0, [r7, #16]
 8002490:	f7fe fb50 	bl	8000b34 <__addsf3>
 8002494:	4603      	mov	r3, r0
 8002496:	613b      	str	r3, [r7, #16]
		for (int i = 0; i <= 10; i++) {
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	3301      	adds	r3, #1
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2b0a      	cmp	r3, #10
 80024a2:	f77f ac0f 	ble.w	8001cc4 <sit_checker+0x2c>

		}

		walker();
 80024a6:	f7ff fb0f 	bl	8001ac8 <walker>
			av_roll /= 10;
 80024aa:	494c      	ldr	r1, [pc, #304]	; (80025dc <sit_checker+0x944>)
 80024ac:	69f8      	ldr	r0, [r7, #28]
 80024ae:	f7fe fcfd 	bl	8000eac <__aeabi_fdiv>
 80024b2:	4603      	mov	r3, r0
 80024b4:	61fb      	str	r3, [r7, #28]
			av_pitch /= 10;
 80024b6:	4949      	ldr	r1, [pc, #292]	; (80025dc <sit_checker+0x944>)
 80024b8:	69b8      	ldr	r0, [r7, #24]
 80024ba:	f7fe fcf7 	bl	8000eac <__aeabi_fdiv>
 80024be:	4603      	mov	r3, r0
 80024c0:	61bb      	str	r3, [r7, #24]
			av_roll2 /= 10;
 80024c2:	4946      	ldr	r1, [pc, #280]	; (80025dc <sit_checker+0x944>)
 80024c4:	6978      	ldr	r0, [r7, #20]
 80024c6:	f7fe fcf1 	bl	8000eac <__aeabi_fdiv>
 80024ca:	4603      	mov	r3, r0
 80024cc:	617b      	str	r3, [r7, #20]
			av_pitch2 /= 10;
 80024ce:	4943      	ldr	r1, [pc, #268]	; (80025dc <sit_checker+0x944>)
 80024d0:	6938      	ldr	r0, [r7, #16]
 80024d2:	f7fe fceb 	bl	8000eac <__aeabi_fdiv>
 80024d6:	4603      	mov	r3, r0
 80024d8:	613b      	str	r3, [r7, #16]


		if(av_pitch2 <= 10){
 80024da:	4940      	ldr	r1, [pc, #256]	; (80025dc <sit_checker+0x944>)
 80024dc:	6938      	ldr	r0, [r7, #16]
 80024de:	f7fe fdd9 	bl	8001094 <__aeabi_fcmple>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d004      	beq.n	80024f2 <sit_checker+0x85a>
			lying++;
 80024e8:	4b3d      	ldr	r3, [pc, #244]	; (80025e0 <sit_checker+0x948>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	3301      	adds	r3, #1
 80024ee:	4a3c      	ldr	r2, [pc, #240]	; (80025e0 <sit_checker+0x948>)
 80024f0:	6013      	str	r3, [r2, #0]
		}
		if(av_pitch2 >= 55){
 80024f2:	493c      	ldr	r1, [pc, #240]	; (80025e4 <sit_checker+0x94c>)
 80024f4:	6938      	ldr	r0, [r7, #16]
 80024f6:	f7fe fdd7 	bl	80010a8 <__aeabi_fcmpge>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <sit_checker+0x86e>
			tof = false;
 8002500:	4b39      	ldr	r3, [pc, #228]	; (80025e8 <sit_checker+0x950>)
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
		}
		if(av_pitch2 <= 55){
 8002506:	4937      	ldr	r1, [pc, #220]	; (80025e4 <sit_checker+0x94c>)
 8002508:	6938      	ldr	r0, [r7, #16]
 800250a:	f7fe fdc3 	bl	8001094 <__aeabi_fcmple>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00c      	beq.n	800252e <sit_checker+0x896>
			tof = true;
 8002514:	4b34      	ldr	r3, [pc, #208]	; (80025e8 <sit_checker+0x950>)
 8002516:	2201      	movs	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]
			if(av_pitch >= 75 ){
 800251a:	4934      	ldr	r1, [pc, #208]	; (80025ec <sit_checker+0x954>)
 800251c:	69b8      	ldr	r0, [r7, #24]
 800251e:	f7fe fdc3 	bl	80010a8 <__aeabi_fcmpge>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d002      	beq.n	800252e <sit_checker+0x896>
				tof = false;
 8002528:	4b2f      	ldr	r3, [pc, #188]	; (80025e8 <sit_checker+0x950>)
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
			}
		}



		av_pitch = 0;
 800252e:	f04f 0300 	mov.w	r3, #0
 8002532:	61bb      	str	r3, [r7, #24]
		av_roll = 0 ;
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
		av_pitch2 = 0;
 800253a:	f04f 0300 	mov.w	r3, #0
 800253e:	613b      	str	r3, [r7, #16]
		av_roll2 = 0;
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	617b      	str	r3, [r7, #20]

		if(tof == true){
 8002546:	4b28      	ldr	r3, [pc, #160]	; (80025e8 <sit_checker+0x950>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d004      	beq.n	8002558 <sit_checker+0x8c0>
	    	count++;
 800254e:	4b28      	ldr	r3, [pc, #160]	; (80025f0 <sit_checker+0x958>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	3301      	adds	r3, #1
 8002554:	4a26      	ldr	r2, [pc, #152]	; (80025f0 <sit_checker+0x958>)
 8002556:	6013      	str	r3, [r2, #0]
	    }
		if(motion_count == 40){
 8002558:	4b26      	ldr	r3, [pc, #152]	; (80025f4 <sit_checker+0x95c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b28      	cmp	r3, #40	; 0x28
 800255e:	d104      	bne.n	800256a <sit_checker+0x8d2>
			walking++;
 8002560:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <sit_checker+0x960>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3301      	adds	r3, #1
 8002566:	4a24      	ldr	r2, [pc, #144]	; (80025f8 <sit_checker+0x960>)
 8002568:	6013      	str	r3, [r2, #0]
	for(int i =0; i <= 50; i++){
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	3301      	adds	r3, #1
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2b32      	cmp	r3, #50	; 0x32
 8002574:	f77f ab9e 	ble.w	8001cb4 <sit_checker+0x1c>
		}

	  }

	if (count >= 25) {
 8002578:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <sit_checker+0x958>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b18      	cmp	r3, #24
 800257e:	dd61      	ble.n	8002644 <sit_checker+0x9ac>
			if (lying >= 25) {
 8002580:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <sit_checker+0x948>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b18      	cmp	r3, #24
 8002586:	dd41      	ble.n	800260c <sit_checker+0x974>
				lay = true;
 8002588:	4b1c      	ldr	r3, [pc, #112]	; (80025fc <sit_checker+0x964>)
 800258a:	2201      	movs	r2, #1
 800258c:	701a      	strb	r2, [r3, #0]
				st = false;
 800258e:	4b1c      	ldr	r3, [pc, #112]	; (8002600 <sit_checker+0x968>)
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
				stnd = false;
 8002594:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <sit_checker+0x96c>)
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]
				layTime = layTime + elapsedTime;
 800259a:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <sit_checker+0x970>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a05      	ldr	r2, [pc, #20]	; (80025b4 <sit_checker+0x91c>)
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	4611      	mov	r1, r2
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe fac5 	bl	8000b34 <__addsf3>
 80025aa:	4603      	mov	r3, r0
 80025ac:	461a      	mov	r2, r3
 80025ae:	4b16      	ldr	r3, [pc, #88]	; (8002608 <sit_checker+0x970>)
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	e040      	b.n	8002636 <sit_checker+0x99e>
 80025b4:	20000320 	.word	0x20000320
 80025b8:	2000034c 	.word	0x2000034c
 80025bc:	20000350 	.word	0x20000350
 80025c0:	20000380 	.word	0x20000380
 80025c4:	20000348 	.word	0x20000348
 80025c8:	20000334 	.word	0x20000334
 80025cc:	2000031c 	.word	0x2000031c
 80025d0:	20000338 	.word	0x20000338
 80025d4:	20000314 	.word	0x20000314
 80025d8:	20000318 	.word	0x20000318
 80025dc:	41200000 	.word	0x41200000
 80025e0:	2000035c 	.word	0x2000035c
 80025e4:	425c0000 	.word	0x425c0000
 80025e8:	20000460 	.word	0x20000460
 80025ec:	42960000 	.word	0x42960000
 80025f0:	20000358 	.word	0x20000358
 80025f4:	20000354 	.word	0x20000354
 80025f8:	20000360 	.word	0x20000360
 80025fc:	20000464 	.word	0x20000464
 8002600:	20000463 	.word	0x20000463
 8002604:	20000462 	.word	0x20000462
 8002608:	20000330 	.word	0x20000330
			} else {
				st = true;
 800260c:	4b42      	ldr	r3, [pc, #264]	; (8002718 <sit_checker+0xa80>)
 800260e:	2201      	movs	r2, #1
 8002610:	701a      	strb	r2, [r3, #0]
				stnd = false;
 8002612:	4b42      	ldr	r3, [pc, #264]	; (800271c <sit_checker+0xa84>)
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
				lay = false;
 8002618:	4b41      	ldr	r3, [pc, #260]	; (8002720 <sit_checker+0xa88>)
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
				sitTime = sitTime + elapsedTime;
 800261e:	4b41      	ldr	r3, [pc, #260]	; (8002724 <sit_checker+0xa8c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a41      	ldr	r2, [pc, #260]	; (8002728 <sit_checker+0xa90>)
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	4611      	mov	r1, r2
 8002628:	4618      	mov	r0, r3
 800262a:	f7fe fa83 	bl	8000b34 <__addsf3>
 800262e:	4603      	mov	r3, r0
 8002630:	461a      	mov	r2, r3
 8002632:	4b3c      	ldr	r3, [pc, #240]	; (8002724 <sit_checker+0xa8c>)
 8002634:	601a      	str	r2, [r3, #0]
			}
			count = 0;
 8002636:	4b3d      	ldr	r3, [pc, #244]	; (800272c <sit_checker+0xa94>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
			lying = 0;
 800263c:	4b3c      	ldr	r3, [pc, #240]	; (8002730 <sit_checker+0xa98>)
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	e01d      	b.n	8002680 <sit_checker+0x9e8>
		} else {

			layTime = layTime + elapsedTime;
 8002644:	4b3b      	ldr	r3, [pc, #236]	; (8002734 <sit_checker+0xa9c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a37      	ldr	r2, [pc, #220]	; (8002728 <sit_checker+0xa90>)
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	4611      	mov	r1, r2
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fa70 	bl	8000b34 <__addsf3>
 8002654:	4603      	mov	r3, r0
 8002656:	461a      	mov	r2, r3
 8002658:	4b36      	ldr	r3, [pc, #216]	; (8002734 <sit_checker+0xa9c>)
 800265a:	601a      	str	r2, [r3, #0]
			stnd = true;
 800265c:	4b2f      	ldr	r3, [pc, #188]	; (800271c <sit_checker+0xa84>)
 800265e:	2201      	movs	r2, #1
 8002660:	701a      	strb	r2, [r3, #0]
			st= false;
 8002662:	4b2d      	ldr	r3, [pc, #180]	; (8002718 <sit_checker+0xa80>)
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
			lay = false;
 8002668:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <sit_checker+0xa88>)
 800266a:	2200      	movs	r2, #0
 800266c:	701a      	strb	r2, [r3, #0]
			count = 0;
 800266e:	4b2f      	ldr	r3, [pc, #188]	; (800272c <sit_checker+0xa94>)
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
			lying = 0;
 8002674:	4b2e      	ldr	r3, [pc, #184]	; (8002730 <sit_checker+0xa98>)
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
			walking = 0;
 800267a:	4b2f      	ldr	r3, [pc, #188]	; (8002738 <sit_checker+0xaa0>)
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
		}
		if (stnd == true) {
 8002680:	4b26      	ldr	r3, [pc, #152]	; (800271c <sit_checker+0xa84>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d012      	beq.n	80026ae <sit_checker+0xa16>
				if (fstnd == true ){
 8002688:	4b2c      	ldr	r3, [pc, #176]	; (800273c <sit_checker+0xaa4>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00e      	beq.n	80026ae <sit_checker+0xa16>
					sprintf((char*) buf, "Standing \r\n");
 8002690:	492b      	ldr	r1, [pc, #172]	; (8002740 <sit_checker+0xaa8>)
 8002692:	482c      	ldr	r0, [pc, #176]	; (8002744 <sit_checker+0xaac>)
 8002694:	f004 fd60 	bl	8007158 <siprintf>
					inflation_On();
 8002698:	f7ff f89e 	bl	80017d8 <inflation_On>
				     fstnd = false;
 800269c:	4b27      	ldr	r3, [pc, #156]	; (800273c <sit_checker+0xaa4>)
 800269e:	2200      	movs	r2, #0
 80026a0:	701a      	strb	r2, [r3, #0]
				     fst = true;
 80026a2:	4b29      	ldr	r3, [pc, #164]	; (8002748 <sit_checker+0xab0>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	701a      	strb	r2, [r3, #0]
				     flay = true;
 80026a8:	4b28      	ldr	r3, [pc, #160]	; (800274c <sit_checker+0xab4>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	701a      	strb	r2, [r3, #0]
				}
			}
		if (st == true) {
 80026ae:	4b1a      	ldr	r3, [pc, #104]	; (8002718 <sit_checker+0xa80>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d012      	beq.n	80026dc <sit_checker+0xa44>
			if (fst == true){
 80026b6:	4b24      	ldr	r3, [pc, #144]	; (8002748 <sit_checker+0xab0>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00e      	beq.n	80026dc <sit_checker+0xa44>
	//			HAL_Delay(3000
				sprintf((char*) buf, "Sitting \r\n");
 80026be:	4924      	ldr	r1, [pc, #144]	; (8002750 <sit_checker+0xab8>)
 80026c0:	4820      	ldr	r0, [pc, #128]	; (8002744 <sit_checker+0xaac>)
 80026c2:	f004 fd49 	bl	8007158 <siprintf>
				inflation_Off();
 80026c6:	f7ff f901 	bl	80018cc <inflation_Off>
				fst = false;
 80026ca:	4b1f      	ldr	r3, [pc, #124]	; (8002748 <sit_checker+0xab0>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]
				fstnd = true;
 80026d0:	4b1a      	ldr	r3, [pc, #104]	; (800273c <sit_checker+0xaa4>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
				flay = true;
 80026d6:	4b1d      	ldr	r3, [pc, #116]	; (800274c <sit_checker+0xab4>)
 80026d8:	2201      	movs	r2, #1
 80026da:	701a      	strb	r2, [r3, #0]
			}
		}
		if (lay == true) {
 80026dc:	4b10      	ldr	r3, [pc, #64]	; (8002720 <sit_checker+0xa88>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d010      	beq.n	8002706 <sit_checker+0xa6e>
			if (flay == true){
 80026e4:	4b19      	ldr	r3, [pc, #100]	; (800274c <sit_checker+0xab4>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00c      	beq.n	8002706 <sit_checker+0xa6e>
				sprintf((char*) buf, "Laying \r\n");
 80026ec:	4919      	ldr	r1, [pc, #100]	; (8002754 <sit_checker+0xabc>)
 80026ee:	4815      	ldr	r0, [pc, #84]	; (8002744 <sit_checker+0xaac>)
 80026f0:	f004 fd32 	bl	8007158 <siprintf>
				fst = true;
 80026f4:	4b14      	ldr	r3, [pc, #80]	; (8002748 <sit_checker+0xab0>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	701a      	strb	r2, [r3, #0]
				fstnd = true;
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <sit_checker+0xaa4>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	701a      	strb	r2, [r3, #0]
				flay = false;
 8002700:	4b12      	ldr	r3, [pc, #72]	; (800274c <sit_checker+0xab4>)
 8002702:	2200      	movs	r2, #0
 8002704:	701a      	strb	r2, [r3, #0]
		    }
		}
		send_uart((char *) buf);
 8002706:	480f      	ldr	r0, [pc, #60]	; (8002744 <sit_checker+0xaac>)
 8002708:	f7fe fffc 	bl	8001704 <send_uart>
}
 800270c:	bf00      	nop
 800270e:	3720      	adds	r7, #32
 8002710:	46bd      	mov	sp, r7
 8002712:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002716:	bf00      	nop
 8002718:	20000463 	.word	0x20000463
 800271c:	20000462 	.word	0x20000462
 8002720:	20000464 	.word	0x20000464
 8002724:	2000032c 	.word	0x2000032c
 8002728:	20000320 	.word	0x20000320
 800272c:	20000358 	.word	0x20000358
 8002730:	2000035c 	.word	0x2000035c
 8002734:	20000330 	.word	0x20000330
 8002738:	20000360 	.word	0x20000360
 800273c:	20000001 	.word	0x20000001
 8002740:	0800a788 	.word	0x0800a788
 8002744:	200002a4 	.word	0x200002a4
 8002748:	20000002 	.word	0x20000002
 800274c:	20000003 	.word	0x20000003
 8002750:	0800a794 	.word	0x0800a794
 8002754:	0800a7a0 	.word	0x0800a7a0

08002758 <stand_checker>:
void stand_checker() {
 8002758:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800275c:	b088      	sub	sp, #32
 800275e:	af00      	add	r7, sp, #0
	previousTime = currentTime;
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <stand_checker+0x24>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a06      	ldr	r2, [pc, #24]	; (8002780 <stand_checker+0x28>)
 8002766:	6013      	str	r3, [r2, #0]
		uint16_t alpha = 0.96;
 8002768:	2300      	movs	r3, #0
 800276a:	80fb      	strh	r3, [r7, #6]
		float av_roll ,av_pitch,av_yaw;
		float av_roll2,av_pitch2,av_yaw2;
		for(int i =0; i <= 50; i++){
 800276c:	2300      	movs	r3, #0
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	f000 bc5e 	b.w	8003030 <stand_checker+0x8d8>
			for (int i = 0; i <= 10; i++) {
 8002774:	2300      	movs	r3, #0
 8002776:	60bb      	str	r3, [r7, #8]
 8002778:	e3f1      	b.n	8002f5e <stand_checker+0x806>
 800277a:	bf00      	nop
 800277c:	20000324 	.word	0x20000324
 8002780:	20000328 	.word	0x20000328
				previousTime = currentTime;
 8002784:	4bc4      	ldr	r3, [pc, #784]	; (8002a98 <stand_checker+0x340>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4ac4      	ldr	r2, [pc, #784]	; (8002a9c <stand_checker+0x344>)
 800278a:	6013      	str	r3, [r2, #0]
				ICM20948_Read_Accel(&hi2c1,&ICMData);
 800278c:	49c4      	ldr	r1, [pc, #784]	; (8002aa0 <stand_checker+0x348>)
 800278e:	48c5      	ldr	r0, [pc, #788]	; (8002aa4 <stand_checker+0x34c>)
 8002790:	f7fe feb4 	bl	80014fc <ICM20948_Read_Accel>
				acc_x = ICMData.ACCEL_X_RAW;
 8002794:	4bc2      	ldr	r3, [pc, #776]	; (8002aa0 <stand_checker+0x348>)
 8002796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800279a:	461a      	mov	r2, r3
 800279c:	4bc2      	ldr	r3, [pc, #776]	; (8002aa8 <stand_checker+0x350>)
 800279e:	601a      	str	r2, [r3, #0]
				acc_y = ICMData.ACCEL_Y_RAW;
 80027a0:	4bbf      	ldr	r3, [pc, #764]	; (8002aa0 <stand_checker+0x348>)
 80027a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80027a6:	461a      	mov	r2, r3
 80027a8:	4bc0      	ldr	r3, [pc, #768]	; (8002aac <stand_checker+0x354>)
 80027aa:	601a      	str	r2, [r3, #0]
				acc_z = ICMData.ACCEL_Z_RAW;
 80027ac:	4bbc      	ldr	r3, [pc, #752]	; (8002aa0 <stand_checker+0x348>)
 80027ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027b2:	461a      	mov	r2, r3
 80027b4:	4bbe      	ldr	r3, [pc, #760]	; (8002ab0 <stand_checker+0x358>)
 80027b6:	601a      	str	r2, [r3, #0]

				acc_x = noise_removal(acc_x);
 80027b8:	4bbb      	ldr	r3, [pc, #748]	; (8002aa8 <stand_checker+0x350>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	b21b      	sxth	r3, r3
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff f8b2 	bl	8001928 <noise_removal>
 80027c4:	4603      	mov	r3, r0
 80027c6:	461a      	mov	r2, r3
 80027c8:	4bb7      	ldr	r3, [pc, #732]	; (8002aa8 <stand_checker+0x350>)
 80027ca:	601a      	str	r2, [r3, #0]
				acc_y = noise_removal(acc_y);
 80027cc:	4bb7      	ldr	r3, [pc, #732]	; (8002aac <stand_checker+0x354>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	b21b      	sxth	r3, r3
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff f8a8 	bl	8001928 <noise_removal>
 80027d8:	4603      	mov	r3, r0
 80027da:	461a      	mov	r2, r3
 80027dc:	4bb3      	ldr	r3, [pc, #716]	; (8002aac <stand_checker+0x354>)
 80027de:	601a      	str	r2, [r3, #0]
				acc_z = noise_removal(acc_z);
 80027e0:	4bb3      	ldr	r3, [pc, #716]	; (8002ab0 <stand_checker+0x358>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	b21b      	sxth	r3, r3
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff f89e 	bl	8001928 <noise_removal>
 80027ec:	4603      	mov	r3, r0
 80027ee:	461a      	mov	r2, r3
 80027f0:	4baf      	ldr	r3, [pc, #700]	; (8002ab0 <stand_checker+0x358>)
 80027f2:	601a      	str	r2, [r3, #0]

				//Calculating Roll and Pitch from the accelrometer data
				acc_angle_x = (atan(acc_y/sqrt(pow(acc_x,2)+pow(acc_z,2))) * RAD_TO_DEG) - 0.58;
 80027f4:	4bad      	ldr	r3, [pc, #692]	; (8002aac <stand_checker+0x354>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fd fe03 	bl	8000404 <__aeabi_i2d>
 80027fe:	4604      	mov	r4, r0
 8002800:	460d      	mov	r5, r1
 8002802:	4ba9      	ldr	r3, [pc, #676]	; (8002aa8 <stand_checker+0x350>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7fd fdfc 	bl	8000404 <__aeabi_i2d>
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002814:	f007 f8a6 	bl	8009964 <pow>
 8002818:	4680      	mov	r8, r0
 800281a:	4689      	mov	r9, r1
 800281c:	4ba4      	ldr	r3, [pc, #656]	; (8002ab0 <stand_checker+0x358>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f7fd fdef 	bl	8000404 <__aeabi_i2d>
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800282e:	f007 f899 	bl	8009964 <pow>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4640      	mov	r0, r8
 8002838:	4649      	mov	r1, r9
 800283a:	f7fd fc97 	bl	800016c <__adddf3>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	4610      	mov	r0, r2
 8002844:	4619      	mov	r1, r3
 8002846:	f007 f8f5 	bl	8009a34 <sqrt>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4620      	mov	r0, r4
 8002850:	4629      	mov	r1, r5
 8002852:	f7fd ff6b 	bl	800072c <__aeabi_ddiv>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4610      	mov	r0, r2
 800285c:	4619      	mov	r1, r3
 800285e:	f006 fef3 	bl	8009648 <atan>
 8002862:	a387      	add	r3, pc, #540	; (adr r3, 8002a80 <stand_checker+0x328>)
 8002864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002868:	f7fd fe36 	bl	80004d8 <__aeabi_dmul>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4610      	mov	r0, r2
 8002872:	4619      	mov	r1, r3
 8002874:	a384      	add	r3, pc, #528	; (adr r3, 8002a88 <stand_checker+0x330>)
 8002876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800287a:	f7fd fc75 	bl	8000168 <__aeabi_dsub>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4610      	mov	r0, r2
 8002884:	4619      	mov	r1, r3
 8002886:	f7fe f8ff 	bl	8000a88 <__aeabi_d2f>
 800288a:	4603      	mov	r3, r0
 800288c:	4a89      	ldr	r2, [pc, #548]	; (8002ab4 <stand_checker+0x35c>)
 800288e:	6013      	str	r3, [r2, #0]
		      //AccErrorX ~ (0.58)
				acc_angle_y = (atan(-1 * acc_x/sqrt(pow(acc_y,2)+pow(acc_z,2))) * RAD_TO_DEG) + 1.58;
 8002890:	4b85      	ldr	r3, [pc, #532]	; (8002aa8 <stand_checker+0x350>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	425b      	negs	r3, r3
 8002896:	4618      	mov	r0, r3
 8002898:	f7fd fdb4 	bl	8000404 <__aeabi_i2d>
 800289c:	4604      	mov	r4, r0
 800289e:	460d      	mov	r5, r1
 80028a0:	4b82      	ldr	r3, [pc, #520]	; (8002aac <stand_checker+0x354>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fd fdad 	bl	8000404 <__aeabi_i2d>
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028b2:	f007 f857 	bl	8009964 <pow>
 80028b6:	4680      	mov	r8, r0
 80028b8:	4689      	mov	r9, r1
 80028ba:	4b7d      	ldr	r3, [pc, #500]	; (8002ab0 <stand_checker+0x358>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fd fda0 	bl	8000404 <__aeabi_i2d>
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028cc:	f007 f84a 	bl	8009964 <pow>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4640      	mov	r0, r8
 80028d6:	4649      	mov	r1, r9
 80028d8:	f7fd fc48 	bl	800016c <__adddf3>
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
 80028e0:	4610      	mov	r0, r2
 80028e2:	4619      	mov	r1, r3
 80028e4:	f007 f8a6 	bl	8009a34 <sqrt>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4620      	mov	r0, r4
 80028ee:	4629      	mov	r1, r5
 80028f0:	f7fd ff1c 	bl	800072c <__aeabi_ddiv>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4610      	mov	r0, r2
 80028fa:	4619      	mov	r1, r3
 80028fc:	f006 fea4 	bl	8009648 <atan>
 8002900:	a35f      	add	r3, pc, #380	; (adr r3, 8002a80 <stand_checker+0x328>)
 8002902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002906:	f7fd fde7 	bl	80004d8 <__aeabi_dmul>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4610      	mov	r0, r2
 8002910:	4619      	mov	r1, r3
 8002912:	a35f      	add	r3, pc, #380	; (adr r3, 8002a90 <stand_checker+0x338>)
 8002914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002918:	f7fd fc28 	bl	800016c <__adddf3>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4610      	mov	r0, r2
 8002922:	4619      	mov	r1, r3
 8002924:	f7fe f8b0 	bl	8000a88 <__aeabi_d2f>
 8002928:	4603      	mov	r3, r0
 800292a:	4a63      	ldr	r2, [pc, #396]	; (8002ab8 <stand_checker+0x360>)
 800292c:	6013      	str	r3, [r2, #0]
		      //AccErrorY ~ (-1.58)

				previousTime = currentTime;
 800292e:	4b5a      	ldr	r3, [pc, #360]	; (8002a98 <stand_checker+0x340>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a5a      	ldr	r2, [pc, #360]	; (8002a9c <stand_checker+0x344>)
 8002934:	6013      	str	r3, [r2, #0]
				currentTime = HAL_GetTick();
 8002936:	f001 f98f 	bl	8003c58 <HAL_GetTick>
 800293a:	4603      	mov	r3, r0
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe f9a9 	bl	8000c94 <__aeabi_ui2f>
 8002942:	4603      	mov	r3, r0
 8002944:	4a54      	ldr	r2, [pc, #336]	; (8002a98 <stand_checker+0x340>)
 8002946:	6013      	str	r3, [r2, #0]
				elapsedTime = (currentTime - previousTime) / 1000; // Divide by 1000 to get seconds
 8002948:	4b53      	ldr	r3, [pc, #332]	; (8002a98 <stand_checker+0x340>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a53      	ldr	r2, [pc, #332]	; (8002a9c <stand_checker+0x344>)
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	4611      	mov	r1, r2
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe f8ec 	bl	8000b30 <__aeabi_fsub>
 8002958:	4603      	mov	r3, r0
 800295a:	4958      	ldr	r1, [pc, #352]	; (8002abc <stand_checker+0x364>)
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe faa5 	bl	8000eac <__aeabi_fdiv>
 8002962:	4603      	mov	r3, r0
 8002964:	461a      	mov	r2, r3
 8002966:	4b56      	ldr	r3, [pc, #344]	; (8002ac0 <stand_checker+0x368>)
 8002968:	601a      	str	r2, [r3, #0]

				ICM20948_Read_Gyro(&hi2c1, &ICMData);
 800296a:	494d      	ldr	r1, [pc, #308]	; (8002aa0 <stand_checker+0x348>)
 800296c:	484d      	ldr	r0, [pc, #308]	; (8002aa4 <stand_checker+0x34c>)
 800296e:	f7fe fe2f 	bl	80015d0 <ICM20948_Read_Gyro>
				gyro_x = gyro_x + (ICMData.Gx * elapsedTime);
 8002972:	4b54      	ldr	r3, [pc, #336]	; (8002ac4 <stand_checker+0x36c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7fd fd44 	bl	8000404 <__aeabi_i2d>
 800297c:	4680      	mov	r8, r0
 800297e:	4689      	mov	r9, r1
 8002980:	4b47      	ldr	r3, [pc, #284]	; (8002aa0 <stand_checker+0x348>)
 8002982:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002986:	4b4e      	ldr	r3, [pc, #312]	; (8002ac0 <stand_checker+0x368>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7fd fd4c 	bl	8000428 <__aeabi_f2d>
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	4620      	mov	r0, r4
 8002996:	4629      	mov	r1, r5
 8002998:	f7fd fd9e 	bl	80004d8 <__aeabi_dmul>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4640      	mov	r0, r8
 80029a2:	4649      	mov	r1, r9
 80029a4:	f7fd fbe2 	bl	800016c <__adddf3>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4610      	mov	r0, r2
 80029ae:	4619      	mov	r1, r3
 80029b0:	f7fe f842 	bl	8000a38 <__aeabi_d2iz>
 80029b4:	4603      	mov	r3, r0
 80029b6:	4a43      	ldr	r2, [pc, #268]	; (8002ac4 <stand_checker+0x36c>)
 80029b8:	6013      	str	r3, [r2, #0]
				gyro_y = gyro_y + (ICMData.Gy * elapsedTime);
 80029ba:	4b43      	ldr	r3, [pc, #268]	; (8002ac8 <stand_checker+0x370>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fd fd20 	bl	8000404 <__aeabi_i2d>
 80029c4:	4680      	mov	r8, r0
 80029c6:	4689      	mov	r9, r1
 80029c8:	4b35      	ldr	r3, [pc, #212]	; (8002aa0 <stand_checker+0x348>)
 80029ca:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80029ce:	4b3c      	ldr	r3, [pc, #240]	; (8002ac0 <stand_checker+0x368>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fd fd28 	bl	8000428 <__aeabi_f2d>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4620      	mov	r0, r4
 80029de:	4629      	mov	r1, r5
 80029e0:	f7fd fd7a 	bl	80004d8 <__aeabi_dmul>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4640      	mov	r0, r8
 80029ea:	4649      	mov	r1, r9
 80029ec:	f7fd fbbe 	bl	800016c <__adddf3>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4610      	mov	r0, r2
 80029f6:	4619      	mov	r1, r3
 80029f8:	f7fe f81e 	bl	8000a38 <__aeabi_d2iz>
 80029fc:	4603      	mov	r3, r0
 80029fe:	4a32      	ldr	r2, [pc, #200]	; (8002ac8 <stand_checker+0x370>)
 8002a00:	6013      	str	r3, [r2, #0]
				gyro_z = gyro_z + (ICMData.Gz * elapsedTime);
 8002a02:	4b32      	ldr	r3, [pc, #200]	; (8002acc <stand_checker+0x374>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fd fcfc 	bl	8000404 <__aeabi_i2d>
 8002a0c:	4680      	mov	r8, r0
 8002a0e:	4689      	mov	r9, r1
 8002a10:	4b23      	ldr	r3, [pc, #140]	; (8002aa0 <stand_checker+0x348>)
 8002a12:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002a16:	4b2a      	ldr	r3, [pc, #168]	; (8002ac0 <stand_checker+0x368>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd fd04 	bl	8000428 <__aeabi_f2d>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4620      	mov	r0, r4
 8002a26:	4629      	mov	r1, r5
 8002a28:	f7fd fd56 	bl	80004d8 <__aeabi_dmul>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4640      	mov	r0, r8
 8002a32:	4649      	mov	r1, r9
 8002a34:	f7fd fb9a 	bl	800016c <__adddf3>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	f7fd fffa 	bl	8000a38 <__aeabi_d2iz>
 8002a44:	4603      	mov	r3, r0
 8002a46:	4a21      	ldr	r2, [pc, #132]	; (8002acc <stand_checker+0x374>)
 8002a48:	6013      	str	r3, [r2, #0]


				roll = alpha * gyro_x + (1-alpha) * acc_angle_x;
 8002a4a:	88fb      	ldrh	r3, [r7, #6]
 8002a4c:	4a1d      	ldr	r2, [pc, #116]	; (8002ac4 <stand_checker+0x36c>)
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	fb02 f303 	mul.w	r3, r2, r3
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fe f921 	bl	8000c9c <__aeabi_i2f>
 8002a5a:	4604      	mov	r4, r0
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	f1c3 0301 	rsb	r3, r3, #1
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe f91a 	bl	8000c9c <__aeabi_i2f>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <stand_checker+0x35c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4610      	mov	r0, r2
 8002a72:	f7fe f967 	bl	8000d44 <__aeabi_fmul>
 8002a76:	4603      	mov	r3, r0
 8002a78:	e02a      	b.n	8002ad0 <stand_checker+0x378>
 8002a7a:	bf00      	nop
 8002a7c:	f3af 8000 	nop.w
 8002a80:	20000000 	.word	0x20000000
 8002a84:	404ca5dc 	.word	0x404ca5dc
 8002a88:	28f5c28f 	.word	0x28f5c28f
 8002a8c:	3fe28f5c 	.word	0x3fe28f5c
 8002a90:	147ae148 	.word	0x147ae148
 8002a94:	3ff947ae 	.word	0x3ff947ae
 8002a98:	20000324 	.word	0x20000324
 8002a9c:	20000328 	.word	0x20000328
 8002aa0:	20000380 	.word	0x20000380
 8002aa4:	200001fc 	.word	0x200001fc
 8002aa8:	2000033c 	.word	0x2000033c
 8002aac:	20000340 	.word	0x20000340
 8002ab0:	20000344 	.word	0x20000344
 8002ab4:	20000334 	.word	0x20000334
 8002ab8:	20000338 	.word	0x20000338
 8002abc:	447a0000 	.word	0x447a0000
 8002ac0:	20000320 	.word	0x20000320
 8002ac4:	20000348 	.word	0x20000348
 8002ac8:	2000034c 	.word	0x2000034c
 8002acc:	20000350 	.word	0x20000350
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4620      	mov	r0, r4
 8002ad4:	f7fe f82e 	bl	8000b34 <__addsf3>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	461a      	mov	r2, r3
 8002adc:	4bba      	ldr	r3, [pc, #744]	; (8002dc8 <stand_checker+0x670>)
 8002ade:	601a      	str	r2, [r3, #0]
				pitch = alpha * gyro_y + (1-alpha) * acc_angle_y;
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	4aba      	ldr	r2, [pc, #744]	; (8002dcc <stand_checker+0x674>)
 8002ae4:	6812      	ldr	r2, [r2, #0]
 8002ae6:	fb02 f303 	mul.w	r3, r2, r3
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe f8d6 	bl	8000c9c <__aeabi_i2f>
 8002af0:	4604      	mov	r4, r0
 8002af2:	88fb      	ldrh	r3, [r7, #6]
 8002af4:	f1c3 0301 	rsb	r3, r3, #1
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fe f8cf 	bl	8000c9c <__aeabi_i2f>
 8002afe:	4602      	mov	r2, r0
 8002b00:	4bb3      	ldr	r3, [pc, #716]	; (8002dd0 <stand_checker+0x678>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4619      	mov	r1, r3
 8002b06:	4610      	mov	r0, r2
 8002b08:	f7fe f91c 	bl	8000d44 <__aeabi_fmul>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4620      	mov	r0, r4
 8002b12:	f7fe f80f 	bl	8000b34 <__addsf3>
 8002b16:	4603      	mov	r3, r0
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4bae      	ldr	r3, [pc, #696]	; (8002dd4 <stand_checker+0x67c>)
 8002b1c:	601a      	str	r2, [r3, #0]
				yaw = gyro_z;
 8002b1e:	4bae      	ldr	r3, [pc, #696]	; (8002dd8 <stand_checker+0x680>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fe f8ba 	bl	8000c9c <__aeabi_i2f>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	4aac      	ldr	r2, [pc, #688]	; (8002ddc <stand_checker+0x684>)
 8002b2c:	6013      	str	r3, [r2, #0]


				roll = noise_removal_float(roll);
 8002b2e:	4ba6      	ldr	r3, [pc, #664]	; (8002dc8 <stand_checker+0x670>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fe ff68 	bl	8001a08 <noise_removal_float>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4aa3      	ldr	r2, [pc, #652]	; (8002dc8 <stand_checker+0x670>)
 8002b3c:	6013      	str	r3, [r2, #0]
				pitch = noise_removal_float(pitch);
 8002b3e:	4ba5      	ldr	r3, [pc, #660]	; (8002dd4 <stand_checker+0x67c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe ff60 	bl	8001a08 <noise_removal_float>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	4aa2      	ldr	r2, [pc, #648]	; (8002dd4 <stand_checker+0x67c>)
 8002b4c:	6013      	str	r3, [r2, #0]

				av_roll += roll;
 8002b4e:	4b9e      	ldr	r3, [pc, #632]	; (8002dc8 <stand_checker+0x670>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4619      	mov	r1, r3
 8002b54:	69f8      	ldr	r0, [r7, #28]
 8002b56:	f7fd ffed 	bl	8000b34 <__addsf3>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	61fb      	str	r3, [r7, #28]
				av_pitch += pitch;
 8002b5e:	4b9d      	ldr	r3, [pc, #628]	; (8002dd4 <stand_checker+0x67c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4619      	mov	r1, r3
 8002b64:	69b8      	ldr	r0, [r7, #24]
 8002b66:	f7fd ffe5 	bl	8000b34 <__addsf3>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	61bb      	str	r3, [r7, #24]

				ICM20948_Read_Accel(&hi2c2,&ICMData);
 8002b6e:	499c      	ldr	r1, [pc, #624]	; (8002de0 <stand_checker+0x688>)
 8002b70:	489c      	ldr	r0, [pc, #624]	; (8002de4 <stand_checker+0x68c>)
 8002b72:	f7fe fcc3 	bl	80014fc <ICM20948_Read_Accel>
				acc_x = ICMData.ACCEL_X_RAW;
 8002b76:	4b9a      	ldr	r3, [pc, #616]	; (8002de0 <stand_checker+0x688>)
 8002b78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4b9a      	ldr	r3, [pc, #616]	; (8002de8 <stand_checker+0x690>)
 8002b80:	601a      	str	r2, [r3, #0]
				acc_y = ICMData.ACCEL_Y_RAW;
 8002b82:	4b97      	ldr	r3, [pc, #604]	; (8002de0 <stand_checker+0x688>)
 8002b84:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4b98      	ldr	r3, [pc, #608]	; (8002dec <stand_checker+0x694>)
 8002b8c:	601a      	str	r2, [r3, #0]
				acc_z = ICMData.ACCEL_Z_RAW;
 8002b8e:	4b94      	ldr	r3, [pc, #592]	; (8002de0 <stand_checker+0x688>)
 8002b90:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b94:	461a      	mov	r2, r3
 8002b96:	4b96      	ldr	r3, [pc, #600]	; (8002df0 <stand_checker+0x698>)
 8002b98:	601a      	str	r2, [r3, #0]


				acc_x = noise_removal(acc_x);
 8002b9a:	4b93      	ldr	r3, [pc, #588]	; (8002de8 <stand_checker+0x690>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	b21b      	sxth	r3, r3
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fe fec1 	bl	8001928 <noise_removal>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4b8f      	ldr	r3, [pc, #572]	; (8002de8 <stand_checker+0x690>)
 8002bac:	601a      	str	r2, [r3, #0]
				acc_y = noise_removal(acc_y);
 8002bae:	4b8f      	ldr	r3, [pc, #572]	; (8002dec <stand_checker+0x694>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	b21b      	sxth	r3, r3
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fe feb7 	bl	8001928 <noise_removal>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b8b      	ldr	r3, [pc, #556]	; (8002dec <stand_checker+0x694>)
 8002bc0:	601a      	str	r2, [r3, #0]
				acc_z = noise_removal(acc_z);
 8002bc2:	4b8b      	ldr	r3, [pc, #556]	; (8002df0 <stand_checker+0x698>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	b21b      	sxth	r3, r3
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe fead 	bl	8001928 <noise_removal>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4b87      	ldr	r3, [pc, #540]	; (8002df0 <stand_checker+0x698>)
 8002bd4:	601a      	str	r2, [r3, #0]


		      //Calculating Roll and Pitch from the accelrometer data
				acc_angle_x = (atan(acc_y/sqrt(pow(acc_x,2)+pow(acc_z,2))) * RAD_TO_DEG) - 0.58;
 8002bd6:	4b85      	ldr	r3, [pc, #532]	; (8002dec <stand_checker+0x694>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fd fc12 	bl	8000404 <__aeabi_i2d>
 8002be0:	4604      	mov	r4, r0
 8002be2:	460d      	mov	r5, r1
 8002be4:	4b80      	ldr	r3, [pc, #512]	; (8002de8 <stand_checker+0x690>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fd fc0b 	bl	8000404 <__aeabi_i2d>
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bf6:	f006 feb5 	bl	8009964 <pow>
 8002bfa:	4680      	mov	r8, r0
 8002bfc:	4689      	mov	r9, r1
 8002bfe:	4b7c      	ldr	r3, [pc, #496]	; (8002df0 <stand_checker+0x698>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fd fbfe 	bl	8000404 <__aeabi_i2d>
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c10:	f006 fea8 	bl	8009964 <pow>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4640      	mov	r0, r8
 8002c1a:	4649      	mov	r1, r9
 8002c1c:	f7fd faa6 	bl	800016c <__adddf3>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4610      	mov	r0, r2
 8002c26:	4619      	mov	r1, r3
 8002c28:	f006 ff04 	bl	8009a34 <sqrt>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4620      	mov	r0, r4
 8002c32:	4629      	mov	r1, r5
 8002c34:	f7fd fd7a 	bl	800072c <__aeabi_ddiv>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f006 fd02 	bl	8009648 <atan>
 8002c44:	a35a      	add	r3, pc, #360	; (adr r3, 8002db0 <stand_checker+0x658>)
 8002c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4a:	f7fd fc45 	bl	80004d8 <__aeabi_dmul>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4610      	mov	r0, r2
 8002c54:	4619      	mov	r1, r3
 8002c56:	a358      	add	r3, pc, #352	; (adr r3, 8002db8 <stand_checker+0x660>)
 8002c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5c:	f7fd fa84 	bl	8000168 <__aeabi_dsub>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4610      	mov	r0, r2
 8002c66:	4619      	mov	r1, r3
 8002c68:	f7fd ff0e 	bl	8000a88 <__aeabi_d2f>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4a61      	ldr	r2, [pc, #388]	; (8002df4 <stand_checker+0x69c>)
 8002c70:	6013      	str	r3, [r2, #0]
		      //AccErrorX ~ (0.58)
				acc_angle_y = (atan(-1 * acc_x/sqrt(pow(acc_y,2)+pow(acc_z,2))) * RAD_TO_DEG) + 1.58;
 8002c72:	4b5d      	ldr	r3, [pc, #372]	; (8002de8 <stand_checker+0x690>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	425b      	negs	r3, r3
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fd fbc3 	bl	8000404 <__aeabi_i2d>
 8002c7e:	4604      	mov	r4, r0
 8002c80:	460d      	mov	r5, r1
 8002c82:	4b5a      	ldr	r3, [pc, #360]	; (8002dec <stand_checker+0x694>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fbbc 	bl	8000404 <__aeabi_i2d>
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c94:	f006 fe66 	bl	8009964 <pow>
 8002c98:	4680      	mov	r8, r0
 8002c9a:	4689      	mov	r9, r1
 8002c9c:	4b54      	ldr	r3, [pc, #336]	; (8002df0 <stand_checker+0x698>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fd fbaf 	bl	8000404 <__aeabi_i2d>
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cae:	f006 fe59 	bl	8009964 <pow>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4640      	mov	r0, r8
 8002cb8:	4649      	mov	r1, r9
 8002cba:	f7fd fa57 	bl	800016c <__adddf3>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	f006 feb5 	bl	8009a34 <sqrt>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4620      	mov	r0, r4
 8002cd0:	4629      	mov	r1, r5
 8002cd2:	f7fd fd2b 	bl	800072c <__aeabi_ddiv>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4610      	mov	r0, r2
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f006 fcb3 	bl	8009648 <atan>
 8002ce2:	a333      	add	r3, pc, #204	; (adr r3, 8002db0 <stand_checker+0x658>)
 8002ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce8:	f7fd fbf6 	bl	80004d8 <__aeabi_dmul>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	a332      	add	r3, pc, #200	; (adr r3, 8002dc0 <stand_checker+0x668>)
 8002cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfa:	f7fd fa37 	bl	800016c <__adddf3>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4610      	mov	r0, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	f7fd febf 	bl	8000a88 <__aeabi_d2f>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	4a30      	ldr	r2, [pc, #192]	; (8002dd0 <stand_checker+0x678>)
 8002d0e:	6013      	str	r3, [r2, #0]
		      //AccErrorY ~ (-1.58)

				previousTime = currentTime;
 8002d10:	4b39      	ldr	r3, [pc, #228]	; (8002df8 <stand_checker+0x6a0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a39      	ldr	r2, [pc, #228]	; (8002dfc <stand_checker+0x6a4>)
 8002d16:	6013      	str	r3, [r2, #0]
				currentTime = HAL_GetTick();
 8002d18:	f000 ff9e 	bl	8003c58 <HAL_GetTick>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd ffb8 	bl	8000c94 <__aeabi_ui2f>
 8002d24:	4603      	mov	r3, r0
 8002d26:	4a34      	ldr	r2, [pc, #208]	; (8002df8 <stand_checker+0x6a0>)
 8002d28:	6013      	str	r3, [r2, #0]
				elapsedTime = (currentTime - previousTime) / 1000; // Divide by 1000 to get seconds
 8002d2a:	4b33      	ldr	r3, [pc, #204]	; (8002df8 <stand_checker+0x6a0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a33      	ldr	r2, [pc, #204]	; (8002dfc <stand_checker+0x6a4>)
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	4611      	mov	r1, r2
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fd fefb 	bl	8000b30 <__aeabi_fsub>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	4930      	ldr	r1, [pc, #192]	; (8002e00 <stand_checker+0x6a8>)
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe f8b4 	bl	8000eac <__aeabi_fdiv>
 8002d44:	4603      	mov	r3, r0
 8002d46:	461a      	mov	r2, r3
 8002d48:	4b2e      	ldr	r3, [pc, #184]	; (8002e04 <stand_checker+0x6ac>)
 8002d4a:	601a      	str	r2, [r3, #0]

				ICM20948_Read_Gyro(&hi2c2, &ICMData);
 8002d4c:	4924      	ldr	r1, [pc, #144]	; (8002de0 <stand_checker+0x688>)
 8002d4e:	4825      	ldr	r0, [pc, #148]	; (8002de4 <stand_checker+0x68c>)
 8002d50:	f7fe fc3e 	bl	80015d0 <ICM20948_Read_Gyro>
				gyro_x = gyro_x + (ICMData.Gx * elapsedTime);
 8002d54:	4b2c      	ldr	r3, [pc, #176]	; (8002e08 <stand_checker+0x6b0>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fd fb53 	bl	8000404 <__aeabi_i2d>
 8002d5e:	4680      	mov	r8, r0
 8002d60:	4689      	mov	r9, r1
 8002d62:	4b1f      	ldr	r3, [pc, #124]	; (8002de0 <stand_checker+0x688>)
 8002d64:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002d68:	4b26      	ldr	r3, [pc, #152]	; (8002e04 <stand_checker+0x6ac>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fd fb5b 	bl	8000428 <__aeabi_f2d>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4620      	mov	r0, r4
 8002d78:	4629      	mov	r1, r5
 8002d7a:	f7fd fbad 	bl	80004d8 <__aeabi_dmul>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4640      	mov	r0, r8
 8002d84:	4649      	mov	r1, r9
 8002d86:	f7fd f9f1 	bl	800016c <__adddf3>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4610      	mov	r0, r2
 8002d90:	4619      	mov	r1, r3
 8002d92:	f7fd fe51 	bl	8000a38 <__aeabi_d2iz>
 8002d96:	4603      	mov	r3, r0
 8002d98:	4a1b      	ldr	r2, [pc, #108]	; (8002e08 <stand_checker+0x6b0>)
 8002d9a:	6013      	str	r3, [r2, #0]
				gyro_y = gyro_y + (ICMData.Gy * elapsedTime);
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <stand_checker+0x674>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7fd fb2f 	bl	8000404 <__aeabi_i2d>
 8002da6:	4680      	mov	r8, r0
 8002da8:	4689      	mov	r9, r1
 8002daa:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <stand_checker+0x688>)
 8002dac:	e02e      	b.n	8002e0c <stand_checker+0x6b4>
 8002dae:	bf00      	nop
 8002db0:	20000000 	.word	0x20000000
 8002db4:	404ca5dc 	.word	0x404ca5dc
 8002db8:	28f5c28f 	.word	0x28f5c28f
 8002dbc:	3fe28f5c 	.word	0x3fe28f5c
 8002dc0:	147ae148 	.word	0x147ae148
 8002dc4:	3ff947ae 	.word	0x3ff947ae
 8002dc8:	20000310 	.word	0x20000310
 8002dcc:	2000034c 	.word	0x2000034c
 8002dd0:	20000338 	.word	0x20000338
 8002dd4:	20000308 	.word	0x20000308
 8002dd8:	20000350 	.word	0x20000350
 8002ddc:	2000030c 	.word	0x2000030c
 8002de0:	20000380 	.word	0x20000380
 8002de4:	20000250 	.word	0x20000250
 8002de8:	2000033c 	.word	0x2000033c
 8002dec:	20000340 	.word	0x20000340
 8002df0:	20000344 	.word	0x20000344
 8002df4:	20000334 	.word	0x20000334
 8002df8:	20000324 	.word	0x20000324
 8002dfc:	20000328 	.word	0x20000328
 8002e00:	447a0000 	.word	0x447a0000
 8002e04:	20000320 	.word	0x20000320
 8002e08:	20000348 	.word	0x20000348
 8002e0c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002e10:	4b98      	ldr	r3, [pc, #608]	; (8003074 <stand_checker+0x91c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fd fb07 	bl	8000428 <__aeabi_f2d>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4620      	mov	r0, r4
 8002e20:	4629      	mov	r1, r5
 8002e22:	f7fd fb59 	bl	80004d8 <__aeabi_dmul>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4640      	mov	r0, r8
 8002e2c:	4649      	mov	r1, r9
 8002e2e:	f7fd f99d 	bl	800016c <__adddf3>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4610      	mov	r0, r2
 8002e38:	4619      	mov	r1, r3
 8002e3a:	f7fd fdfd 	bl	8000a38 <__aeabi_d2iz>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4a8d      	ldr	r2, [pc, #564]	; (8003078 <stand_checker+0x920>)
 8002e42:	6013      	str	r3, [r2, #0]
				gyro_z = gyro_z + (ICMData.Gz * elapsedTime);
 8002e44:	4b8d      	ldr	r3, [pc, #564]	; (800307c <stand_checker+0x924>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fd fadb 	bl	8000404 <__aeabi_i2d>
 8002e4e:	4680      	mov	r8, r0
 8002e50:	4689      	mov	r9, r1
 8002e52:	4b8b      	ldr	r3, [pc, #556]	; (8003080 <stand_checker+0x928>)
 8002e54:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002e58:	4b86      	ldr	r3, [pc, #536]	; (8003074 <stand_checker+0x91c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fd fae3 	bl	8000428 <__aeabi_f2d>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4620      	mov	r0, r4
 8002e68:	4629      	mov	r1, r5
 8002e6a:	f7fd fb35 	bl	80004d8 <__aeabi_dmul>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4640      	mov	r0, r8
 8002e74:	4649      	mov	r1, r9
 8002e76:	f7fd f979 	bl	800016c <__adddf3>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4610      	mov	r0, r2
 8002e80:	4619      	mov	r1, r3
 8002e82:	f7fd fdd9 	bl	8000a38 <__aeabi_d2iz>
 8002e86:	4603      	mov	r3, r0
 8002e88:	4a7c      	ldr	r2, [pc, #496]	; (800307c <stand_checker+0x924>)
 8002e8a:	6013      	str	r3, [r2, #0]


		      //Complimentary filter- combine accelerometer and gyro angle values.
				roll2 = alpha * gyro_x + (1-alpha) * acc_angle_x;
 8002e8c:	88fb      	ldrh	r3, [r7, #6]
 8002e8e:	4a7d      	ldr	r2, [pc, #500]	; (8003084 <stand_checker+0x92c>)
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	fb02 f303 	mul.w	r3, r2, r3
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fd ff00 	bl	8000c9c <__aeabi_i2f>
 8002e9c:	4604      	mov	r4, r0
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	f1c3 0301 	rsb	r3, r3, #1
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fd fef9 	bl	8000c9c <__aeabi_i2f>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	4b76      	ldr	r3, [pc, #472]	; (8003088 <stand_checker+0x930>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	f7fd ff46 	bl	8000d44 <__aeabi_fmul>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4620      	mov	r0, r4
 8002ebe:	f7fd fe39 	bl	8000b34 <__addsf3>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4b71      	ldr	r3, [pc, #452]	; (800308c <stand_checker+0x934>)
 8002ec8:	601a      	str	r2, [r3, #0]
				pitch2 = alpha * gyro_y + (1-alpha) * acc_angle_y;
 8002eca:	88fb      	ldrh	r3, [r7, #6]
 8002ecc:	4a6a      	ldr	r2, [pc, #424]	; (8003078 <stand_checker+0x920>)
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	fb02 f303 	mul.w	r3, r2, r3
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fd fee1 	bl	8000c9c <__aeabi_i2f>
 8002eda:	4604      	mov	r4, r0
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	f1c3 0301 	rsb	r3, r3, #1
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fd feda 	bl	8000c9c <__aeabi_i2f>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	4b69      	ldr	r3, [pc, #420]	; (8003090 <stand_checker+0x938>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	f7fd ff27 	bl	8000d44 <__aeabi_fmul>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4620      	mov	r0, r4
 8002efc:	f7fd fe1a 	bl	8000b34 <__addsf3>
 8002f00:	4603      	mov	r3, r0
 8002f02:	461a      	mov	r2, r3
 8002f04:	4b63      	ldr	r3, [pc, #396]	; (8003094 <stand_checker+0x93c>)
 8002f06:	601a      	str	r2, [r3, #0]
				yaw2 = gyro_z;
 8002f08:	4b5c      	ldr	r3, [pc, #368]	; (800307c <stand_checker+0x924>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fd fec5 	bl	8000c9c <__aeabi_i2f>
 8002f12:	4603      	mov	r3, r0
 8002f14:	4a60      	ldr	r2, [pc, #384]	; (8003098 <stand_checker+0x940>)
 8002f16:	6013      	str	r3, [r2, #0]

				roll2 = noise_removal_float(roll2);
 8002f18:	4b5c      	ldr	r3, [pc, #368]	; (800308c <stand_checker+0x934>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fe fd73 	bl	8001a08 <noise_removal_float>
 8002f22:	4603      	mov	r3, r0
 8002f24:	4a59      	ldr	r2, [pc, #356]	; (800308c <stand_checker+0x934>)
 8002f26:	6013      	str	r3, [r2, #0]
				pitch2 = noise_removal_float(pitch2);
 8002f28:	4b5a      	ldr	r3, [pc, #360]	; (8003094 <stand_checker+0x93c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fe fd6b 	bl	8001a08 <noise_removal_float>
 8002f32:	4603      	mov	r3, r0
 8002f34:	4a57      	ldr	r2, [pc, #348]	; (8003094 <stand_checker+0x93c>)
 8002f36:	6013      	str	r3, [r2, #0]



				av_roll2 += roll2;
 8002f38:	4b54      	ldr	r3, [pc, #336]	; (800308c <stand_checker+0x934>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	6978      	ldr	r0, [r7, #20]
 8002f40:	f7fd fdf8 	bl	8000b34 <__addsf3>
 8002f44:	4603      	mov	r3, r0
 8002f46:	617b      	str	r3, [r7, #20]
				av_pitch2 += pitch2;
 8002f48:	4b52      	ldr	r3, [pc, #328]	; (8003094 <stand_checker+0x93c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	6938      	ldr	r0, [r7, #16]
 8002f50:	f7fd fdf0 	bl	8000b34 <__addsf3>
 8002f54:	4603      	mov	r3, r0
 8002f56:	613b      	str	r3, [r7, #16]
			for (int i = 0; i <= 10; i++) {
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b0a      	cmp	r3, #10
 8002f62:	f77f ac0f 	ble.w	8002784 <stand_checker+0x2c>

			}

			walker();
 8002f66:	f7fe fdaf 	bl	8001ac8 <walker>
				av_roll /= 10;
 8002f6a:	494c      	ldr	r1, [pc, #304]	; (800309c <stand_checker+0x944>)
 8002f6c:	69f8      	ldr	r0, [r7, #28]
 8002f6e:	f7fd ff9d 	bl	8000eac <__aeabi_fdiv>
 8002f72:	4603      	mov	r3, r0
 8002f74:	61fb      	str	r3, [r7, #28]
				av_pitch /= 10;
 8002f76:	4949      	ldr	r1, [pc, #292]	; (800309c <stand_checker+0x944>)
 8002f78:	69b8      	ldr	r0, [r7, #24]
 8002f7a:	f7fd ff97 	bl	8000eac <__aeabi_fdiv>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	61bb      	str	r3, [r7, #24]
				av_roll2 /= 10;
 8002f82:	4946      	ldr	r1, [pc, #280]	; (800309c <stand_checker+0x944>)
 8002f84:	6978      	ldr	r0, [r7, #20]
 8002f86:	f7fd ff91 	bl	8000eac <__aeabi_fdiv>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	617b      	str	r3, [r7, #20]
				av_pitch2 /= 10;
 8002f8e:	4943      	ldr	r1, [pc, #268]	; (800309c <stand_checker+0x944>)
 8002f90:	6938      	ldr	r0, [r7, #16]
 8002f92:	f7fd ff8b 	bl	8000eac <__aeabi_fdiv>
 8002f96:	4603      	mov	r3, r0
 8002f98:	613b      	str	r3, [r7, #16]


			if(av_pitch2 <= 10){
 8002f9a:	4940      	ldr	r1, [pc, #256]	; (800309c <stand_checker+0x944>)
 8002f9c:	6938      	ldr	r0, [r7, #16]
 8002f9e:	f7fe f879 	bl	8001094 <__aeabi_fcmple>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d004      	beq.n	8002fb2 <stand_checker+0x85a>
				lying++;
 8002fa8:	4b3d      	ldr	r3, [pc, #244]	; (80030a0 <stand_checker+0x948>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	3301      	adds	r3, #1
 8002fae:	4a3c      	ldr	r2, [pc, #240]	; (80030a0 <stand_checker+0x948>)
 8002fb0:	6013      	str	r3, [r2, #0]
			}
			if(av_pitch2 >= 55){
 8002fb2:	493c      	ldr	r1, [pc, #240]	; (80030a4 <stand_checker+0x94c>)
 8002fb4:	6938      	ldr	r0, [r7, #16]
 8002fb6:	f7fe f877 	bl	80010a8 <__aeabi_fcmpge>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d002      	beq.n	8002fc6 <stand_checker+0x86e>
				tof = false;
 8002fc0:	4b39      	ldr	r3, [pc, #228]	; (80030a8 <stand_checker+0x950>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	701a      	strb	r2, [r3, #0]
			}
			if(av_pitch2 <= 55){
 8002fc6:	4937      	ldr	r1, [pc, #220]	; (80030a4 <stand_checker+0x94c>)
 8002fc8:	6938      	ldr	r0, [r7, #16]
 8002fca:	f7fe f863 	bl	8001094 <__aeabi_fcmple>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00c      	beq.n	8002fee <stand_checker+0x896>
				tof = true;
 8002fd4:	4b34      	ldr	r3, [pc, #208]	; (80030a8 <stand_checker+0x950>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	701a      	strb	r2, [r3, #0]
				if(av_pitch >= 75 ){
 8002fda:	4934      	ldr	r1, [pc, #208]	; (80030ac <stand_checker+0x954>)
 8002fdc:	69b8      	ldr	r0, [r7, #24]
 8002fde:	f7fe f863 	bl	80010a8 <__aeabi_fcmpge>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <stand_checker+0x896>
					tof = false;
 8002fe8:	4b2f      	ldr	r3, [pc, #188]	; (80030a8 <stand_checker+0x950>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	701a      	strb	r2, [r3, #0]
				}
			}



			av_pitch = 0;
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	61bb      	str	r3, [r7, #24]
			av_roll = 0 ;
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
			av_pitch2 = 0;
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	613b      	str	r3, [r7, #16]
			av_roll2 = 0;
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	617b      	str	r3, [r7, #20]

			if(tof == true){
 8003006:	4b28      	ldr	r3, [pc, #160]	; (80030a8 <stand_checker+0x950>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d004      	beq.n	8003018 <stand_checker+0x8c0>
		    	count++;
 800300e:	4b28      	ldr	r3, [pc, #160]	; (80030b0 <stand_checker+0x958>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	3301      	adds	r3, #1
 8003014:	4a26      	ldr	r2, [pc, #152]	; (80030b0 <stand_checker+0x958>)
 8003016:	6013      	str	r3, [r2, #0]
		    }
			if(motion_count == 40){
 8003018:	4b26      	ldr	r3, [pc, #152]	; (80030b4 <stand_checker+0x95c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b28      	cmp	r3, #40	; 0x28
 800301e:	d104      	bne.n	800302a <stand_checker+0x8d2>
				walking++;
 8003020:	4b25      	ldr	r3, [pc, #148]	; (80030b8 <stand_checker+0x960>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	3301      	adds	r3, #1
 8003026:	4a24      	ldr	r2, [pc, #144]	; (80030b8 <stand_checker+0x960>)
 8003028:	6013      	str	r3, [r2, #0]
		for(int i =0; i <= 50; i++){
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	3301      	adds	r3, #1
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2b32      	cmp	r3, #50	; 0x32
 8003034:	f77f ab9e 	ble.w	8002774 <stand_checker+0x1c>
			}

		  }

		if (count >= 25) {
 8003038:	4b1d      	ldr	r3, [pc, #116]	; (80030b0 <stand_checker+0x958>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b18      	cmp	r3, #24
 800303e:	dd61      	ble.n	8003104 <stand_checker+0x9ac>
					if (lying >= 25) {
 8003040:	4b17      	ldr	r3, [pc, #92]	; (80030a0 <stand_checker+0x948>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b18      	cmp	r3, #24
 8003046:	dd41      	ble.n	80030cc <stand_checker+0x974>
						lay = true;
 8003048:	4b1c      	ldr	r3, [pc, #112]	; (80030bc <stand_checker+0x964>)
 800304a:	2201      	movs	r2, #1
 800304c:	701a      	strb	r2, [r3, #0]
						st = false;
 800304e:	4b1c      	ldr	r3, [pc, #112]	; (80030c0 <stand_checker+0x968>)
 8003050:	2200      	movs	r2, #0
 8003052:	701a      	strb	r2, [r3, #0]
						stnd = false;
 8003054:	4b1b      	ldr	r3, [pc, #108]	; (80030c4 <stand_checker+0x96c>)
 8003056:	2200      	movs	r2, #0
 8003058:	701a      	strb	r2, [r3, #0]
						layTime = layTime + elapsedTime;
 800305a:	4b1b      	ldr	r3, [pc, #108]	; (80030c8 <stand_checker+0x970>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a05      	ldr	r2, [pc, #20]	; (8003074 <stand_checker+0x91c>)
 8003060:	6812      	ldr	r2, [r2, #0]
 8003062:	4611      	mov	r1, r2
 8003064:	4618      	mov	r0, r3
 8003066:	f7fd fd65 	bl	8000b34 <__addsf3>
 800306a:	4603      	mov	r3, r0
 800306c:	461a      	mov	r2, r3
 800306e:	4b16      	ldr	r3, [pc, #88]	; (80030c8 <stand_checker+0x970>)
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	e040      	b.n	80030f6 <stand_checker+0x99e>
 8003074:	20000320 	.word	0x20000320
 8003078:	2000034c 	.word	0x2000034c
 800307c:	20000350 	.word	0x20000350
 8003080:	20000380 	.word	0x20000380
 8003084:	20000348 	.word	0x20000348
 8003088:	20000334 	.word	0x20000334
 800308c:	2000031c 	.word	0x2000031c
 8003090:	20000338 	.word	0x20000338
 8003094:	20000314 	.word	0x20000314
 8003098:	20000318 	.word	0x20000318
 800309c:	41200000 	.word	0x41200000
 80030a0:	2000035c 	.word	0x2000035c
 80030a4:	425c0000 	.word	0x425c0000
 80030a8:	20000460 	.word	0x20000460
 80030ac:	42960000 	.word	0x42960000
 80030b0:	20000358 	.word	0x20000358
 80030b4:	20000354 	.word	0x20000354
 80030b8:	20000360 	.word	0x20000360
 80030bc:	20000464 	.word	0x20000464
 80030c0:	20000463 	.word	0x20000463
 80030c4:	20000462 	.word	0x20000462
 80030c8:	20000330 	.word	0x20000330
					} else {
						st = true;
 80030cc:	4b42      	ldr	r3, [pc, #264]	; (80031d8 <stand_checker+0xa80>)
 80030ce:	2201      	movs	r2, #1
 80030d0:	701a      	strb	r2, [r3, #0]
						stnd = false;
 80030d2:	4b42      	ldr	r3, [pc, #264]	; (80031dc <stand_checker+0xa84>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]
						lay = false;
 80030d8:	4b41      	ldr	r3, [pc, #260]	; (80031e0 <stand_checker+0xa88>)
 80030da:	2200      	movs	r2, #0
 80030dc:	701a      	strb	r2, [r3, #0]
						sitTime = sitTime + elapsedTime;
 80030de:	4b41      	ldr	r3, [pc, #260]	; (80031e4 <stand_checker+0xa8c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a41      	ldr	r2, [pc, #260]	; (80031e8 <stand_checker+0xa90>)
 80030e4:	6812      	ldr	r2, [r2, #0]
 80030e6:	4611      	mov	r1, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fd fd23 	bl	8000b34 <__addsf3>
 80030ee:	4603      	mov	r3, r0
 80030f0:	461a      	mov	r2, r3
 80030f2:	4b3c      	ldr	r3, [pc, #240]	; (80031e4 <stand_checker+0xa8c>)
 80030f4:	601a      	str	r2, [r3, #0]
					}
					count = 0;
 80030f6:	4b3d      	ldr	r3, [pc, #244]	; (80031ec <stand_checker+0xa94>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
					lying = 0;
 80030fc:	4b3c      	ldr	r3, [pc, #240]	; (80031f0 <stand_checker+0xa98>)
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	e01d      	b.n	8003140 <stand_checker+0x9e8>
				} else {

					layTime = layTime + elapsedTime;
 8003104:	4b3b      	ldr	r3, [pc, #236]	; (80031f4 <stand_checker+0xa9c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a37      	ldr	r2, [pc, #220]	; (80031e8 <stand_checker+0xa90>)
 800310a:	6812      	ldr	r2, [r2, #0]
 800310c:	4611      	mov	r1, r2
 800310e:	4618      	mov	r0, r3
 8003110:	f7fd fd10 	bl	8000b34 <__addsf3>
 8003114:	4603      	mov	r3, r0
 8003116:	461a      	mov	r2, r3
 8003118:	4b36      	ldr	r3, [pc, #216]	; (80031f4 <stand_checker+0xa9c>)
 800311a:	601a      	str	r2, [r3, #0]
					stnd = true;
 800311c:	4b2f      	ldr	r3, [pc, #188]	; (80031dc <stand_checker+0xa84>)
 800311e:	2201      	movs	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]
					st= false;
 8003122:	4b2d      	ldr	r3, [pc, #180]	; (80031d8 <stand_checker+0xa80>)
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]
					lay = false;
 8003128:	4b2d      	ldr	r3, [pc, #180]	; (80031e0 <stand_checker+0xa88>)
 800312a:	2200      	movs	r2, #0
 800312c:	701a      	strb	r2, [r3, #0]
					count = 0;
 800312e:	4b2f      	ldr	r3, [pc, #188]	; (80031ec <stand_checker+0xa94>)
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
					lying = 0;
 8003134:	4b2e      	ldr	r3, [pc, #184]	; (80031f0 <stand_checker+0xa98>)
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
					walking = 0;
 800313a:	4b2f      	ldr	r3, [pc, #188]	; (80031f8 <stand_checker+0xaa0>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
				}
				if (stnd == true) {
 8003140:	4b26      	ldr	r3, [pc, #152]	; (80031dc <stand_checker+0xa84>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d012      	beq.n	800316e <stand_checker+0xa16>
						if (fstnd == true ){
 8003148:	4b2c      	ldr	r3, [pc, #176]	; (80031fc <stand_checker+0xaa4>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00e      	beq.n	800316e <stand_checker+0xa16>
							sprintf((char*) buf, "Standing \r\n");
 8003150:	492b      	ldr	r1, [pc, #172]	; (8003200 <stand_checker+0xaa8>)
 8003152:	482c      	ldr	r0, [pc, #176]	; (8003204 <stand_checker+0xaac>)
 8003154:	f004 f800 	bl	8007158 <siprintf>
							inflation_On();
 8003158:	f7fe fb3e 	bl	80017d8 <inflation_On>
						     fstnd = false;
 800315c:	4b27      	ldr	r3, [pc, #156]	; (80031fc <stand_checker+0xaa4>)
 800315e:	2200      	movs	r2, #0
 8003160:	701a      	strb	r2, [r3, #0]
						     fst = true;
 8003162:	4b29      	ldr	r3, [pc, #164]	; (8003208 <stand_checker+0xab0>)
 8003164:	2201      	movs	r2, #1
 8003166:	701a      	strb	r2, [r3, #0]
						     flay = true;
 8003168:	4b28      	ldr	r3, [pc, #160]	; (800320c <stand_checker+0xab4>)
 800316a:	2201      	movs	r2, #1
 800316c:	701a      	strb	r2, [r3, #0]
						}
					}
				if (st == true) {
 800316e:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <stand_checker+0xa80>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d012      	beq.n	800319c <stand_checker+0xa44>
					if (fst == true){
 8003176:	4b24      	ldr	r3, [pc, #144]	; (8003208 <stand_checker+0xab0>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00e      	beq.n	800319c <stand_checker+0xa44>
			//			HAL_Delay(3000
						sprintf((char*) buf, "Sitting \r\n");
 800317e:	4924      	ldr	r1, [pc, #144]	; (8003210 <stand_checker+0xab8>)
 8003180:	4820      	ldr	r0, [pc, #128]	; (8003204 <stand_checker+0xaac>)
 8003182:	f003 ffe9 	bl	8007158 <siprintf>
						inflation_Off();
 8003186:	f7fe fba1 	bl	80018cc <inflation_Off>
						fst = false;
 800318a:	4b1f      	ldr	r3, [pc, #124]	; (8003208 <stand_checker+0xab0>)
 800318c:	2200      	movs	r2, #0
 800318e:	701a      	strb	r2, [r3, #0]
						fstnd = true;
 8003190:	4b1a      	ldr	r3, [pc, #104]	; (80031fc <stand_checker+0xaa4>)
 8003192:	2201      	movs	r2, #1
 8003194:	701a      	strb	r2, [r3, #0]
						flay = true;
 8003196:	4b1d      	ldr	r3, [pc, #116]	; (800320c <stand_checker+0xab4>)
 8003198:	2201      	movs	r2, #1
 800319a:	701a      	strb	r2, [r3, #0]
					}
				}
				if (lay == true) {
 800319c:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <stand_checker+0xa88>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d010      	beq.n	80031c6 <stand_checker+0xa6e>
					if (flay == true){
 80031a4:	4b19      	ldr	r3, [pc, #100]	; (800320c <stand_checker+0xab4>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00c      	beq.n	80031c6 <stand_checker+0xa6e>
						sprintf((char*) buf, "Laying \r\n");
 80031ac:	4919      	ldr	r1, [pc, #100]	; (8003214 <stand_checker+0xabc>)
 80031ae:	4815      	ldr	r0, [pc, #84]	; (8003204 <stand_checker+0xaac>)
 80031b0:	f003 ffd2 	bl	8007158 <siprintf>
						fst = true;
 80031b4:	4b14      	ldr	r3, [pc, #80]	; (8003208 <stand_checker+0xab0>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	701a      	strb	r2, [r3, #0]
						fstnd = true;
 80031ba:	4b10      	ldr	r3, [pc, #64]	; (80031fc <stand_checker+0xaa4>)
 80031bc:	2201      	movs	r2, #1
 80031be:	701a      	strb	r2, [r3, #0]
						flay = false;
 80031c0:	4b12      	ldr	r3, [pc, #72]	; (800320c <stand_checker+0xab4>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	701a      	strb	r2, [r3, #0]
				    }
				}

				send_uart((char *) buf);
 80031c6:	480f      	ldr	r0, [pc, #60]	; (8003204 <stand_checker+0xaac>)
 80031c8:	f7fe fa9c 	bl	8001704 <send_uart>
}
 80031cc:	bf00      	nop
 80031ce:	3720      	adds	r7, #32
 80031d0:	46bd      	mov	sp, r7
 80031d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80031d6:	bf00      	nop
 80031d8:	20000463 	.word	0x20000463
 80031dc:	20000462 	.word	0x20000462
 80031e0:	20000464 	.word	0x20000464
 80031e4:	2000032c 	.word	0x2000032c
 80031e8:	20000320 	.word	0x20000320
 80031ec:	20000358 	.word	0x20000358
 80031f0:	2000035c 	.word	0x2000035c
 80031f4:	20000330 	.word	0x20000330
 80031f8:	20000360 	.word	0x20000360
 80031fc:	20000001 	.word	0x20000001
 8003200:	0800a788 	.word	0x0800a788
 8003204:	200002a4 	.word	0x200002a4
 8003208:	20000002 	.word	0x20000002
 800320c:	20000003 	.word	0x20000003
 8003210:	0800a794 	.word	0x0800a794
 8003214:	0800a7a0 	.word	0x0800a7a0

08003218 <main>:
int main(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0

// Initialization of the Peripherals
  HAL_Init();
 800321e:	f000 fcc3 	bl	8003ba8 <HAL_Init>
  SystemClock_Config();
 8003222:	f000 f94d 	bl	80034c0 <SystemClock_Config>
  MX_GPIO_Init();
 8003226:	f7fd ff79 	bl	800111c <MX_GPIO_Init>
  MX_I2C1_Init();
 800322a:	f7fd fff3 	bl	8001214 <MX_I2C1_Init>
  MX_I2C2_Init();
 800322e:	f7fe f81f 	bl	8001270 <MX_I2C2_Init>
  MX_TIM1_Init();
 8003232:	f000 faa7 	bl	8003784 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003236:	f000 fb35 	bl	80038a4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800323a:	f000 fc19 	bl	8003a70 <MX_USART1_UART_Init>




  //Initialization of the Timers ( For PWM Generation)
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800323e:	210c      	movs	r1, #12
 8003240:	4889      	ldr	r0, [pc, #548]	; (8003468 <main+0x250>)
 8003242:	f002 fd07 	bl	8005c54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003246:	2100      	movs	r1, #0
 8003248:	4888      	ldr	r0, [pc, #544]	; (800346c <main+0x254>)
 800324a:	f002 fd03 	bl	8005c54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800324e:	2100      	movs	r1, #0
 8003250:	4885      	ldr	r0, [pc, #532]	; (8003468 <main+0x250>)
 8003252:	f002 fcff 	bl	8005c54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8003256:	2104      	movs	r1, #4
 8003258:	4884      	ldr	r0, [pc, #528]	; (800346c <main+0x254>)
 800325a:	f002 fcfb 	bl	8005c54 <HAL_TIM_PWM_Start>
//   }




  HAL_Delay(4000);
 800325e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8003262:	f000 fd03 	bl	8003c6c <HAL_Delay>
  TIM1->CCR1 = 200;
 8003266:	4b82      	ldr	r3, [pc, #520]	; (8003470 <main+0x258>)
 8003268:	22c8      	movs	r2, #200	; 0xc8
 800326a:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = 200;
 800326c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003270:	22c8      	movs	r2, #200	; 0xc8
 8003272:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(4000);
 8003274:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8003278:	f000 fcf8 	bl	8003c6c <HAL_Delay>
  TIM1->CCR1 = 100;
 800327c:	4b7c      	ldr	r3, [pc, #496]	; (8003470 <main+0x258>)
 800327e:	2264      	movs	r2, #100	; 0x64
 8003280:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = 100;
 8003282:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003286:	2264      	movs	r2, #100	; 0x64
 8003288:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(3000);
 800328a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800328e:	f000 fced 	bl	8003c6c <HAL_Delay>
  TIM1->CCR1 =  0;
 8003292:	4b77      	ldr	r3, [pc, #476]	; (8003470 <main+0x258>)
 8003294:	2200      	movs	r2, #0
 8003296:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2  = 0;
 8003298:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800329c:	2200      	movs	r2, #0
 800329e:	639a      	str	r2, [r3, #56]	; 0x38
//  HAL_Delay(100);

  HAL_Delay(1000);
 80032a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032a4:	f000 fce2 	bl	8003c6c <HAL_Delay>
  TIM1->CCR4 = 140;
 80032a8:	4b71      	ldr	r3, [pc, #452]	; (8003470 <main+0x258>)
 80032aa:	228c      	movs	r2, #140	; 0x8c
 80032ac:	641a      	str	r2, [r3, #64]	; 0x40
  TIM2->CCR1 = 140;
 80032ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032b2:	228c      	movs	r2, #140	; 0x8c
 80032b4:	635a      	str	r2, [r3, #52]	; 0x34

  	sprintf((char*) buf, "One \r\n\n");
 80032b6:	496f      	ldr	r1, [pc, #444]	; (8003474 <main+0x25c>)
 80032b8:	486f      	ldr	r0, [pc, #444]	; (8003478 <main+0x260>)
 80032ba:	f003 ff4d 	bl	8007158 <siprintf>

  //Initializing the ICM20948 for the stomach
  	ICM20948_Init(&hi2c1);
 80032be:	486f      	ldr	r0, [pc, #444]	; (800347c <main+0x264>)
 80032c0:	f7fe f89e 	bl	8001400 <ICM20948_Init>
  	ICM20948_Init(&hi2c1);
 80032c4:	486d      	ldr	r0, [pc, #436]	; (800347c <main+0x264>)
 80032c6:	f7fe f89b 	bl	8001400 <ICM20948_Init>
  	sprintf((char*) buf, "Two \r\n\n");
 80032ca:	496d      	ldr	r1, [pc, #436]	; (8003480 <main+0x268>)
 80032cc:	486a      	ldr	r0, [pc, #424]	; (8003478 <main+0x260>)
 80032ce:	f003 ff43 	bl	8007158 <siprintf>
  	HAL_Delay(200);
 80032d2:	20c8      	movs	r0, #200	; 0xc8
 80032d4:	f000 fcca 	bl	8003c6c <HAL_Delay>
  //Initializing the ICM20948 for the thigh
//   inflation_On();
  	ICM20948_Init(&hi2c2);
 80032d8:	486a      	ldr	r0, [pc, #424]	; (8003484 <main+0x26c>)
 80032da:	f7fe f891 	bl	8001400 <ICM20948_Init>
  	ICM20948_Init(&hi2c2);
 80032de:	4869      	ldr	r0, [pc, #420]	; (8003484 <main+0x26c>)
 80032e0:	f7fe f88e 	bl	8001400 <ICM20948_Init>
  	sprintf((char*) buf, "Three Go.. \r\n\n");
 80032e4:	4968      	ldr	r1, [pc, #416]	; (8003488 <main+0x270>)
 80032e6:	4864      	ldr	r0, [pc, #400]	; (8003478 <main+0x260>)
 80032e8:	f003 ff36 	bl	8007158 <siprintf>
  	HAL_Delay(200);
 80032ec:	20c8      	movs	r0, #200	; 0xc8
 80032ee:	f000 fcbd 	bl	8003c6c <HAL_Delay>

//  inflation_On();
  // Reading  the acceleration
  	ICM20948_Read_Accel(&hi2c1, &ICMData);
 80032f2:	4966      	ldr	r1, [pc, #408]	; (800348c <main+0x274>)
 80032f4:	4861      	ldr	r0, [pc, #388]	; (800347c <main+0x264>)
 80032f6:	f7fe f901 	bl	80014fc <ICM20948_Read_Accel>
//  	initial_angle_y = RAD_TO_DEG * (atan2(-xAng, -yAng) + PI);
//  	initial_angle_z = RAD_TO_DEG * (atan2(-yAng, -xAng) + PI);


  	//Dc Noise Removal
  	for( int i =0 ; i <= 50; i++){
 80032fa:	2300      	movs	r3, #0
 80032fc:	607b      	str	r3, [r7, #4]
 80032fe:	e040      	b.n	8003382 <main+0x16a>
  		ICM20948_Read_Accel(&hi2c1, &ICMData);
 8003300:	4962      	ldr	r1, [pc, #392]	; (800348c <main+0x274>)
 8003302:	485e      	ldr	r0, [pc, #376]	; (800347c <main+0x264>)
 8003304:	f7fe f8fa 	bl	80014fc <ICM20948_Read_Accel>
  		dc_x1 += ICMData.ACCEL_X_RAW;
 8003308:	4b60      	ldr	r3, [pc, #384]	; (800348c <main+0x274>)
 800330a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800330e:	461a      	mov	r2, r3
 8003310:	4b5f      	ldr	r3, [pc, #380]	; (8003490 <main+0x278>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4413      	add	r3, r2
 8003316:	4a5e      	ldr	r2, [pc, #376]	; (8003490 <main+0x278>)
 8003318:	6013      	str	r3, [r2, #0]
  		dc_y1 += ICMData.ACCEL_Y_RAW;
 800331a:	4b5c      	ldr	r3, [pc, #368]	; (800348c <main+0x274>)
 800331c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003320:	461a      	mov	r2, r3
 8003322:	4b5c      	ldr	r3, [pc, #368]	; (8003494 <main+0x27c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4413      	add	r3, r2
 8003328:	4a5a      	ldr	r2, [pc, #360]	; (8003494 <main+0x27c>)
 800332a:	6013      	str	r3, [r2, #0]
  		dc_z1 += ICMData.ACCEL_Z_RAW;
 800332c:	4b57      	ldr	r3, [pc, #348]	; (800348c <main+0x274>)
 800332e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003332:	461a      	mov	r2, r3
 8003334:	4b58      	ldr	r3, [pc, #352]	; (8003498 <main+0x280>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4413      	add	r3, r2
 800333a:	4a57      	ldr	r2, [pc, #348]	; (8003498 <main+0x280>)
 800333c:	6013      	str	r3, [r2, #0]

  		ICM20948_Read_Accel(&hi2c2, &ICMData);
 800333e:	4953      	ldr	r1, [pc, #332]	; (800348c <main+0x274>)
 8003340:	4850      	ldr	r0, [pc, #320]	; (8003484 <main+0x26c>)
 8003342:	f7fe f8db 	bl	80014fc <ICM20948_Read_Accel>
  		dc_x2 += ICMData.ACCEL_X_RAW;
 8003346:	4b51      	ldr	r3, [pc, #324]	; (800348c <main+0x274>)
 8003348:	f9b3 3000 	ldrsh.w	r3, [r3]
 800334c:	461a      	mov	r2, r3
 800334e:	4b53      	ldr	r3, [pc, #332]	; (800349c <main+0x284>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4413      	add	r3, r2
 8003354:	4a51      	ldr	r2, [pc, #324]	; (800349c <main+0x284>)
 8003356:	6013      	str	r3, [r2, #0]
  		dc_y2 += ICMData.ACCEL_Y_RAW;
 8003358:	4b4c      	ldr	r3, [pc, #304]	; (800348c <main+0x274>)
 800335a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800335e:	461a      	mov	r2, r3
 8003360:	4b4f      	ldr	r3, [pc, #316]	; (80034a0 <main+0x288>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4413      	add	r3, r2
 8003366:	4a4e      	ldr	r2, [pc, #312]	; (80034a0 <main+0x288>)
 8003368:	6013      	str	r3, [r2, #0]
  		dc_z2 += ICMData.ACCEL_Z_RAW;
 800336a:	4b48      	ldr	r3, [pc, #288]	; (800348c <main+0x274>)
 800336c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003370:	461a      	mov	r2, r3
 8003372:	4b4c      	ldr	r3, [pc, #304]	; (80034a4 <main+0x28c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4413      	add	r3, r2
 8003378:	4a4a      	ldr	r2, [pc, #296]	; (80034a4 <main+0x28c>)
 800337a:	6013      	str	r3, [r2, #0]
  	for( int i =0 ; i <= 50; i++){
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3301      	adds	r3, #1
 8003380:	607b      	str	r3, [r7, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b32      	cmp	r3, #50	; 0x32
 8003386:	ddbb      	ble.n	8003300 <main+0xe8>
  	}

    dc_x1 /= 50;
 8003388:	4b41      	ldr	r3, [pc, #260]	; (8003490 <main+0x278>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a46      	ldr	r2, [pc, #280]	; (80034a8 <main+0x290>)
 800338e:	fba2 2303 	umull	r2, r3, r2, r3
 8003392:	091b      	lsrs	r3, r3, #4
 8003394:	4a3e      	ldr	r2, [pc, #248]	; (8003490 <main+0x278>)
 8003396:	6013      	str	r3, [r2, #0]
    dc_y1 /= 50;
 8003398:	4b3e      	ldr	r3, [pc, #248]	; (8003494 <main+0x27c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a42      	ldr	r2, [pc, #264]	; (80034a8 <main+0x290>)
 800339e:	fba2 2303 	umull	r2, r3, r2, r3
 80033a2:	091b      	lsrs	r3, r3, #4
 80033a4:	4a3b      	ldr	r2, [pc, #236]	; (8003494 <main+0x27c>)
 80033a6:	6013      	str	r3, [r2, #0]
    dc_z1 /= 50;
 80033a8:	4b3b      	ldr	r3, [pc, #236]	; (8003498 <main+0x280>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a3e      	ldr	r2, [pc, #248]	; (80034a8 <main+0x290>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	091b      	lsrs	r3, r3, #4
 80033b4:	4a38      	ldr	r2, [pc, #224]	; (8003498 <main+0x280>)
 80033b6:	6013      	str	r3, [r2, #0]
    dc_x2 /= 50;
 80033b8:	4b38      	ldr	r3, [pc, #224]	; (800349c <main+0x284>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a3a      	ldr	r2, [pc, #232]	; (80034a8 <main+0x290>)
 80033be:	fba2 2303 	umull	r2, r3, r2, r3
 80033c2:	091b      	lsrs	r3, r3, #4
 80033c4:	4a35      	ldr	r2, [pc, #212]	; (800349c <main+0x284>)
 80033c6:	6013      	str	r3, [r2, #0]
    dc_y2 /= 50;
 80033c8:	4b35      	ldr	r3, [pc, #212]	; (80034a0 <main+0x288>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a36      	ldr	r2, [pc, #216]	; (80034a8 <main+0x290>)
 80033ce:	fba2 2303 	umull	r2, r3, r2, r3
 80033d2:	091b      	lsrs	r3, r3, #4
 80033d4:	4a32      	ldr	r2, [pc, #200]	; (80034a0 <main+0x288>)
 80033d6:	6013      	str	r3, [r2, #0]
    dc_z2 /= 50;
 80033d8:	4b32      	ldr	r3, [pc, #200]	; (80034a4 <main+0x28c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a32      	ldr	r2, [pc, #200]	; (80034a8 <main+0x290>)
 80033de:	fba2 2303 	umull	r2, r3, r2, r3
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	4a2f      	ldr	r2, [pc, #188]	; (80034a4 <main+0x28c>)
 80033e6:	6013      	str	r3, [r2, #0]
  	/* USER CODE END 2 */
  	ICM20948_Read_Accel(&hi2c2, &ICMData2);
 80033e8:	4930      	ldr	r1, [pc, #192]	; (80034ac <main+0x294>)
 80033ea:	4826      	ldr	r0, [pc, #152]	; (8003484 <main+0x26c>)
 80033ec:	f7fe f886 	bl	80014fc <ICM20948_Read_Accel>
//  	inflation_On();
//    inflation_On();
  	while (1) {

  		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET){
 80033f0:	e00e      	b.n	8003410 <main+0x1f8>
  			if(flag == 1){
 80033f2:	4b2f      	ldr	r3, [pc, #188]	; (80034b0 <main+0x298>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d105      	bne.n	8003406 <main+0x1ee>
  				inflation_On();
 80033fa:	f7fe f9ed 	bl	80017d8 <inflation_On>
  			  	flag = 0 ;
 80033fe:	4b2c      	ldr	r3, [pc, #176]	; (80034b0 <main+0x298>)
 8003400:	2200      	movs	r2, #0
 8003402:	701a      	strb	r2, [r3, #0]
 8003404:	e004      	b.n	8003410 <main+0x1f8>
  			  	}
  			else
  			{
  				inflation_Off();
 8003406:	f7fe fa61 	bl	80018cc <inflation_Off>
  			  	flag = 1 ;
 800340a:	4b29      	ldr	r3, [pc, #164]	; (80034b0 <main+0x298>)
 800340c:	2201      	movs	r2, #1
 800340e:	701a      	strb	r2, [r3, #0]
  		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET){
 8003410:	2101      	movs	r1, #1
 8003412:	4828      	ldr	r0, [pc, #160]	; (80034b4 <main+0x29c>)
 8003414:	f000 fee0 	bl	80041d8 <HAL_GPIO_ReadPin>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0e9      	beq.n	80033f2 <main+0x1da>
  			 }
  		}
  		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET){
 800341e:	e001      	b.n	8003424 <main+0x20c>
  		  			held_press();
 8003420:	f7fe f988 	bl	8001734 <held_press>
  		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET){
 8003424:	2102      	movs	r1, #2
 8003426:	4823      	ldr	r0, [pc, #140]	; (80034b4 <main+0x29c>)
 8003428:	f000 fed6 	bl	80041d8 <HAL_GPIO_ReadPin>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f6      	beq.n	8003420 <main+0x208>
  		 }
  		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET){
 8003432:	e008      	b.n	8003446 <main+0x22e>
  			 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8003434:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003438:	481e      	ldr	r0, [pc, #120]	; (80034b4 <main+0x29c>)
 800343a:	f000 fefc 	bl	8004236 <HAL_GPIO_TogglePin>
  			 HAL_Delay(500);
 800343e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003442:	f000 fc13 	bl	8003c6c <HAL_Delay>
  		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET){
 8003446:	2104      	movs	r1, #4
 8003448:	481b      	ldr	r0, [pc, #108]	; (80034b8 <main+0x2a0>)
 800344a:	f000 fec5 	bl	80041d8 <HAL_GPIO_ReadPin>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0ef      	beq.n	8003434 <main+0x21c>
  		}


  		if (trigger == true) {
 8003454:	4b19      	ldr	r3, [pc, #100]	; (80034bc <main+0x2a4>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d002      	beq.n	8003462 <main+0x24a>
  			//This function initiate when person is in sitting condition
  			sit_checker();
 800345c:	f7fe fc1c 	bl	8001c98 <sit_checker>
 8003460:	e7d6      	b.n	8003410 <main+0x1f8>
  		} else {
  			//This function init
  			stand_checker();
 8003462:	f7ff f979 	bl	8002758 <stand_checker>
  		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET){
 8003466:	e7d3      	b.n	8003410 <main+0x1f8>
 8003468:	2000046c 	.word	0x2000046c
 800346c:	200004b4 	.word	0x200004b4
 8003470:	40012c00 	.word	0x40012c00
 8003474:	0800a7ac 	.word	0x0800a7ac
 8003478:	200002a4 	.word	0x200002a4
 800347c:	200001fc 	.word	0x200001fc
 8003480:	0800a7b4 	.word	0x0800a7b4
 8003484:	20000250 	.word	0x20000250
 8003488:	0800a7bc 	.word	0x0800a7bc
 800348c:	20000380 	.word	0x20000380
 8003490:	20000370 	.word	0x20000370
 8003494:	20000374 	.word	0x20000374
 8003498:	20000378 	.word	0x20000378
 800349c:	20000364 	.word	0x20000364
 80034a0:	20000368 	.word	0x20000368
 80034a4:	2000036c 	.word	0x2000036c
 80034a8:	51eb851f 	.word	0x51eb851f
 80034ac:	200003f0 	.word	0x200003f0
 80034b0:	20000000 	.word	0x20000000
 80034b4:	40010c00 	.word	0x40010c00
 80034b8:	40010800 	.word	0x40010800
 80034bc:	20000461 	.word	0x20000461

080034c0 <SystemClock_Config>:
//    	    		 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
//    	    	 }
//    }
//}
void SystemClock_Config(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b090      	sub	sp, #64	; 0x40
 80034c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034c6:	f107 0318 	add.w	r3, r7, #24
 80034ca:	2228      	movs	r2, #40	; 0x28
 80034cc:	2100      	movs	r1, #0
 80034ce:	4618      	mov	r0, r3
 80034d0:	f003 f9da 	bl	8006888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034d4:	1d3b      	adds	r3, r7, #4
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	605a      	str	r2, [r3, #4]
 80034dc:	609a      	str	r2, [r3, #8]
 80034de:	60da      	str	r2, [r3, #12]
 80034e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80034e2:	2301      	movs	r3, #1
 80034e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80034e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80034ec:	2300      	movs	r3, #0
 80034ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034f0:	2301      	movs	r3, #1
 80034f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034f4:	2302      	movs	r3, #2
 80034f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80034f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80034fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003502:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003504:	f107 0318 	add.w	r3, r7, #24
 8003508:	4618      	mov	r0, r3
 800350a:	f001 ff29 	bl	8005360 <HAL_RCC_OscConfig>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003514:	f000 f819 	bl	800354a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003518:	230f      	movs	r3, #15
 800351a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800351c:	2302      	movs	r3, #2
 800351e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003520:	2300      	movs	r3, #0
 8003522:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003528:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800352a:	2300      	movs	r3, #0
 800352c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800352e:	1d3b      	adds	r3, r7, #4
 8003530:	2102      	movs	r1, #2
 8003532:	4618      	mov	r0, r3
 8003534:	f002 f996 	bl	8005864 <HAL_RCC_ClockConfig>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800353e:	f000 f804 	bl	800354a <Error_Handler>
  }
}
 8003542:	bf00      	nop
 8003544:	3740      	adds	r7, #64	; 0x40
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <Error_Handler>:
void Error_Handler(void)
{
 800354a:	b480      	push	{r7}
 800354c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800354e:	b672      	cpsid	i
}
 8003550:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003552:	e7fe      	b.n	8003552 <Error_Handler+0x8>

08003554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800355a:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <HAL_MspInit+0x40>)
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	4a0d      	ldr	r2, [pc, #52]	; (8003594 <HAL_MspInit+0x40>)
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	6193      	str	r3, [r2, #24]
 8003566:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <HAL_MspInit+0x40>)
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	607b      	str	r3, [r7, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003572:	4b08      	ldr	r3, [pc, #32]	; (8003594 <HAL_MspInit+0x40>)
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	4a07      	ldr	r2, [pc, #28]	; (8003594 <HAL_MspInit+0x40>)
 8003578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357c:	61d3      	str	r3, [r2, #28]
 800357e:	4b05      	ldr	r3, [pc, #20]	; (8003594 <HAL_MspInit+0x40>)
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003586:	603b      	str	r3, [r7, #0]
 8003588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr
 8003594:	40021000 	.word	0x40021000

08003598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800359c:	f002 fad2 	bl	8005b44 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035a0:	e7fe      	b.n	80035a0 <NMI_Handler+0x8>

080035a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035a2:	b480      	push	{r7}
 80035a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035a6:	e7fe      	b.n	80035a6 <HardFault_Handler+0x4>

080035a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035ac:	e7fe      	b.n	80035ac <MemManage_Handler+0x4>

080035ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035ae:	b480      	push	{r7}
 80035b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035b2:	e7fe      	b.n	80035b2 <BusFault_Handler+0x4>

080035b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035b8:	e7fe      	b.n	80035b8 <UsageFault_Handler+0x4>

080035ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035ba:	b480      	push	{r7}
 80035bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035be:	bf00      	nop
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr

080035c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035c6:	b480      	push	{r7}
 80035c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035ca:	bf00      	nop
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc80      	pop	{r7}
 80035d0:	4770      	bx	lr

080035d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035d2:	b480      	push	{r7}
 80035d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035d6:	bf00      	nop
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr

080035de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035e2:	f000 fb27 	bl	8003c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035e6:	bf00      	nop
 80035e8:	bd80      	pop	{r7, pc}

080035ea <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80035ee:	2008      	movs	r0, #8
 80035f0:	f000 fe3a 	bl	8004268 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80035f4:	bf00      	nop
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return 1;
 80035fc:	2301      	movs	r3, #1
}
 80035fe:	4618      	mov	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr

08003606 <_kill>:

int _kill(int pid, int sig)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b082      	sub	sp, #8
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003610:	f003 f910 	bl	8006834 <__errno>
 8003614:	4603      	mov	r3, r0
 8003616:	2216      	movs	r2, #22
 8003618:	601a      	str	r2, [r3, #0]
  return -1;
 800361a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <_exit>:

void _exit (int status)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800362e:	f04f 31ff 	mov.w	r1, #4294967295
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7ff ffe7 	bl	8003606 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003638:	e7fe      	b.n	8003638 <_exit+0x12>

0800363a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b086      	sub	sp, #24
 800363e:	af00      	add	r7, sp, #0
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	e00a      	b.n	8003662 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800364c:	f3af 8000 	nop.w
 8003650:	4601      	mov	r1, r0
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	60ba      	str	r2, [r7, #8]
 8003658:	b2ca      	uxtb	r2, r1
 800365a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	3301      	adds	r3, #1
 8003660:	617b      	str	r3, [r7, #20]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	429a      	cmp	r2, r3
 8003668:	dbf0      	blt.n	800364c <_read+0x12>
  }

  return len;
 800366a:	687b      	ldr	r3, [r7, #4]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	e009      	b.n	800369a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	60ba      	str	r2, [r7, #8]
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	3301      	adds	r3, #1
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	429a      	cmp	r2, r3
 80036a0:	dbf1      	blt.n	8003686 <_write+0x12>
  }
  return len;
 80036a2:	687b      	ldr	r3, [r7, #4]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <_close>:

int _close(int file)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80036b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	bc80      	pop	{r7}
 80036c0:	4770      	bx	lr

080036c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036d2:	605a      	str	r2, [r3, #4]
  return 0;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr

080036e0 <_isatty>:

int _isatty(int file)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036e8:	2301      	movs	r3, #1
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr

080036f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr

0800370c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003714:	4a14      	ldr	r2, [pc, #80]	; (8003768 <_sbrk+0x5c>)
 8003716:	4b15      	ldr	r3, [pc, #84]	; (800376c <_sbrk+0x60>)
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003720:	4b13      	ldr	r3, [pc, #76]	; (8003770 <_sbrk+0x64>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d102      	bne.n	800372e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003728:	4b11      	ldr	r3, [pc, #68]	; (8003770 <_sbrk+0x64>)
 800372a:	4a12      	ldr	r2, [pc, #72]	; (8003774 <_sbrk+0x68>)
 800372c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800372e:	4b10      	ldr	r3, [pc, #64]	; (8003770 <_sbrk+0x64>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4413      	add	r3, r2
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	429a      	cmp	r2, r3
 800373a:	d207      	bcs.n	800374c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800373c:	f003 f87a 	bl	8006834 <__errno>
 8003740:	4603      	mov	r3, r0
 8003742:	220c      	movs	r2, #12
 8003744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003746:	f04f 33ff 	mov.w	r3, #4294967295
 800374a:	e009      	b.n	8003760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800374c:	4b08      	ldr	r3, [pc, #32]	; (8003770 <_sbrk+0x64>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003752:	4b07      	ldr	r3, [pc, #28]	; (8003770 <_sbrk+0x64>)
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4413      	add	r3, r2
 800375a:	4a05      	ldr	r2, [pc, #20]	; (8003770 <_sbrk+0x64>)
 800375c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800375e:	68fb      	ldr	r3, [r7, #12]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	20005000 	.word	0x20005000
 800376c:	00000400 	.word	0x00000400
 8003770:	20000468 	.word	0x20000468
 8003774:	20000558 	.word	0x20000558

08003778 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800377c:	bf00      	nop
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr

08003784 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b092      	sub	sp, #72	; 0x48
 8003788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800378a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	609a      	str	r2, [r3, #8]
 80037a0:	60da      	str	r2, [r3, #12]
 80037a2:	611a      	str	r2, [r3, #16]
 80037a4:	615a      	str	r2, [r3, #20]
 80037a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80037a8:	1d3b      	adds	r3, r7, #4
 80037aa:	2220      	movs	r2, #32
 80037ac:	2100      	movs	r1, #0
 80037ae:	4618      	mov	r0, r3
 80037b0:	f003 f86a 	bl	8006888 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80037b4:	4b39      	ldr	r3, [pc, #228]	; (800389c <MX_TIM1_Init+0x118>)
 80037b6:	4a3a      	ldr	r2, [pc, #232]	; (80038a0 <MX_TIM1_Init+0x11c>)
 80037b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 719;
 80037ba:	4b38      	ldr	r3, [pc, #224]	; (800389c <MX_TIM1_Init+0x118>)
 80037bc:	f240 22cf 	movw	r2, #719	; 0x2cf
 80037c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037c2:	4b36      	ldr	r3, [pc, #216]	; (800389c <MX_TIM1_Init+0x118>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80037c8:	4b34      	ldr	r3, [pc, #208]	; (800389c <MX_TIM1_Init+0x118>)
 80037ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037d0:	4b32      	ldr	r3, [pc, #200]	; (800389c <MX_TIM1_Init+0x118>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80037d6:	4b31      	ldr	r3, [pc, #196]	; (800389c <MX_TIM1_Init+0x118>)
 80037d8:	2200      	movs	r2, #0
 80037da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037dc:	4b2f      	ldr	r3, [pc, #188]	; (800389c <MX_TIM1_Init+0x118>)
 80037de:	2200      	movs	r2, #0
 80037e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80037e2:	482e      	ldr	r0, [pc, #184]	; (800389c <MX_TIM1_Init+0x118>)
 80037e4:	f002 f9e6 	bl	8005bb4 <HAL_TIM_PWM_Init>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80037ee:	f7ff feac 	bl	800354a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037f2:	2300      	movs	r3, #0
 80037f4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037f6:	2300      	movs	r3, #0
 80037f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80037fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037fe:	4619      	mov	r1, r3
 8003800:	4826      	ldr	r0, [pc, #152]	; (800389c <MX_TIM1_Init+0x118>)
 8003802:	f002 fd99 	bl	8006338 <HAL_TIMEx_MasterConfigSynchronization>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 800380c:	f7ff fe9d 	bl	800354a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003810:	2360      	movs	r3, #96	; 0x60
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003814:	2300      	movs	r3, #0
 8003816:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003818:	2300      	movs	r3, #0
 800381a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800381c:	2300      	movs	r3, #0
 800381e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003820:	2300      	movs	r3, #0
 8003822:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003824:	2300      	movs	r3, #0
 8003826:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003828:	2300      	movs	r3, #0
 800382a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800382c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003830:	2200      	movs	r2, #0
 8003832:	4619      	mov	r1, r3
 8003834:	4819      	ldr	r0, [pc, #100]	; (800389c <MX_TIM1_Init+0x118>)
 8003836:	f002 faaf 	bl	8005d98 <HAL_TIM_PWM_ConfigChannel>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8003840:	f7ff fe83 	bl	800354a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003848:	220c      	movs	r2, #12
 800384a:	4619      	mov	r1, r3
 800384c:	4813      	ldr	r0, [pc, #76]	; (800389c <MX_TIM1_Init+0x118>)
 800384e:	f002 faa3 	bl	8005d98 <HAL_TIM_PWM_ConfigChannel>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8003858:	f7ff fe77 	bl	800354a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800385c:	2300      	movs	r3, #0
 800385e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003860:	2300      	movs	r3, #0
 8003862:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003864:	2300      	movs	r3, #0
 8003866:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003868:	2300      	movs	r3, #0
 800386a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003870:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003874:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003876:	2300      	movs	r3, #0
 8003878:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800387a:	1d3b      	adds	r3, r7, #4
 800387c:	4619      	mov	r1, r3
 800387e:	4807      	ldr	r0, [pc, #28]	; (800389c <MX_TIM1_Init+0x118>)
 8003880:	f002 fdb8 	bl	80063f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 800388a:	f7ff fe5e 	bl	800354a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800388e:	4803      	ldr	r0, [pc, #12]	; (800389c <MX_TIM1_Init+0x118>)
 8003890:	f000 f89c 	bl	80039cc <HAL_TIM_MspPostInit>

}
 8003894:	bf00      	nop
 8003896:	3748      	adds	r7, #72	; 0x48
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	2000046c 	.word	0x2000046c
 80038a0:	40012c00 	.word	0x40012c00

080038a4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08a      	sub	sp, #40	; 0x28
 80038a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038aa:	f107 0320 	add.w	r3, r7, #32
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038b4:	1d3b      	adds	r3, r7, #4
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	605a      	str	r2, [r3, #4]
 80038bc:	609a      	str	r2, [r3, #8]
 80038be:	60da      	str	r2, [r3, #12]
 80038c0:	611a      	str	r2, [r3, #16]
 80038c2:	615a      	str	r2, [r3, #20]
 80038c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80038c6:	4b28      	ldr	r3, [pc, #160]	; (8003968 <MX_TIM2_Init+0xc4>)
 80038c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 80038ce:	4b26      	ldr	r3, [pc, #152]	; (8003968 <MX_TIM2_Init+0xc4>)
 80038d0:	f240 22cf 	movw	r2, #719	; 0x2cf
 80038d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038d6:	4b24      	ldr	r3, [pc, #144]	; (8003968 <MX_TIM2_Init+0xc4>)
 80038d8:	2200      	movs	r2, #0
 80038da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80038dc:	4b22      	ldr	r3, [pc, #136]	; (8003968 <MX_TIM2_Init+0xc4>)
 80038de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038e4:	4b20      	ldr	r3, [pc, #128]	; (8003968 <MX_TIM2_Init+0xc4>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038ea:	4b1f      	ldr	r3, [pc, #124]	; (8003968 <MX_TIM2_Init+0xc4>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80038f0:	481d      	ldr	r0, [pc, #116]	; (8003968 <MX_TIM2_Init+0xc4>)
 80038f2:	f002 f95f 	bl	8005bb4 <HAL_TIM_PWM_Init>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80038fc:	f7ff fe25 	bl	800354a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003900:	2300      	movs	r3, #0
 8003902:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003904:	2300      	movs	r3, #0
 8003906:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003908:	f107 0320 	add.w	r3, r7, #32
 800390c:	4619      	mov	r1, r3
 800390e:	4816      	ldr	r0, [pc, #88]	; (8003968 <MX_TIM2_Init+0xc4>)
 8003910:	f002 fd12 	bl	8006338 <HAL_TIMEx_MasterConfigSynchronization>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800391a:	f7ff fe16 	bl	800354a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800391e:	2360      	movs	r3, #96	; 0x60
 8003920:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003922:	2300      	movs	r3, #0
 8003924:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800392e:	1d3b      	adds	r3, r7, #4
 8003930:	2200      	movs	r2, #0
 8003932:	4619      	mov	r1, r3
 8003934:	480c      	ldr	r0, [pc, #48]	; (8003968 <MX_TIM2_Init+0xc4>)
 8003936:	f002 fa2f 	bl	8005d98 <HAL_TIM_PWM_ConfigChannel>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8003940:	f7ff fe03 	bl	800354a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003944:	1d3b      	adds	r3, r7, #4
 8003946:	2204      	movs	r2, #4
 8003948:	4619      	mov	r1, r3
 800394a:	4807      	ldr	r0, [pc, #28]	; (8003968 <MX_TIM2_Init+0xc4>)
 800394c:	f002 fa24 	bl	8005d98 <HAL_TIM_PWM_ConfigChannel>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8003956:	f7ff fdf8 	bl	800354a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800395a:	4803      	ldr	r0, [pc, #12]	; (8003968 <MX_TIM2_Init+0xc4>)
 800395c:	f000 f836 	bl	80039cc <HAL_TIM_MspPostInit>

}
 8003960:	bf00      	nop
 8003962:	3728      	adds	r7, #40	; 0x28
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	200004b4 	.word	0x200004b4

0800396c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a12      	ldr	r2, [pc, #72]	; (80039c4 <HAL_TIM_PWM_MspInit+0x58>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d10c      	bne.n	8003998 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800397e:	4b12      	ldr	r3, [pc, #72]	; (80039c8 <HAL_TIM_PWM_MspInit+0x5c>)
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	4a11      	ldr	r2, [pc, #68]	; (80039c8 <HAL_TIM_PWM_MspInit+0x5c>)
 8003984:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003988:	6193      	str	r3, [r2, #24]
 800398a:	4b0f      	ldr	r3, [pc, #60]	; (80039c8 <HAL_TIM_PWM_MspInit+0x5c>)
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003996:	e010      	b.n	80039ba <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM2)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a0:	d10b      	bne.n	80039ba <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039a2:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <HAL_TIM_PWM_MspInit+0x5c>)
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	4a08      	ldr	r2, [pc, #32]	; (80039c8 <HAL_TIM_PWM_MspInit+0x5c>)
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	61d3      	str	r3, [r2, #28]
 80039ae:	4b06      	ldr	r3, [pc, #24]	; (80039c8 <HAL_TIM_PWM_MspInit+0x5c>)
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	60bb      	str	r3, [r7, #8]
 80039b8:	68bb      	ldr	r3, [r7, #8]
}
 80039ba:	bf00      	nop
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr
 80039c4:	40012c00 	.word	0x40012c00
 80039c8:	40021000 	.word	0x40021000

080039cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d4:	f107 0310 	add.w	r3, r7, #16
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	605a      	str	r2, [r3, #4]
 80039de:	609a      	str	r2, [r3, #8]
 80039e0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a1f      	ldr	r2, [pc, #124]	; (8003a64 <HAL_TIM_MspPostInit+0x98>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d119      	bne.n	8003a20 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ec:	4b1e      	ldr	r3, [pc, #120]	; (8003a68 <HAL_TIM_MspPostInit+0x9c>)
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	4a1d      	ldr	r2, [pc, #116]	; (8003a68 <HAL_TIM_MspPostInit+0x9c>)
 80039f2:	f043 0304 	orr.w	r3, r3, #4
 80039f6:	6193      	str	r3, [r2, #24]
 80039f8:	4b1b      	ldr	r3, [pc, #108]	; (8003a68 <HAL_TIM_MspPostInit+0x9c>)
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8003a04:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8003a08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a12:	f107 0310 	add.w	r3, r7, #16
 8003a16:	4619      	mov	r1, r3
 8003a18:	4814      	ldr	r0, [pc, #80]	; (8003a6c <HAL_TIM_MspPostInit+0xa0>)
 8003a1a:	f000 fa59 	bl	8003ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003a1e:	e01c      	b.n	8003a5a <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM2)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a28:	d117      	bne.n	8003a5a <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2a:	4b0f      	ldr	r3, [pc, #60]	; (8003a68 <HAL_TIM_MspPostInit+0x9c>)
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	4a0e      	ldr	r2, [pc, #56]	; (8003a68 <HAL_TIM_MspPostInit+0x9c>)
 8003a30:	f043 0304 	orr.w	r3, r3, #4
 8003a34:	6193      	str	r3, [r2, #24]
 8003a36:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <HAL_TIM_MspPostInit+0x9c>)
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	60bb      	str	r3, [r7, #8]
 8003a40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003a42:	2303      	movs	r3, #3
 8003a44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a46:	2302      	movs	r3, #2
 8003a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a4e:	f107 0310 	add.w	r3, r7, #16
 8003a52:	4619      	mov	r1, r3
 8003a54:	4805      	ldr	r0, [pc, #20]	; (8003a6c <HAL_TIM_MspPostInit+0xa0>)
 8003a56:	f000 fa3b 	bl	8003ed0 <HAL_GPIO_Init>
}
 8003a5a:	bf00      	nop
 8003a5c:	3720      	adds	r7, #32
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40012c00 	.word	0x40012c00
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	40010800 	.word	0x40010800

08003a70 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a74:	4b11      	ldr	r3, [pc, #68]	; (8003abc <MX_USART1_UART_Init+0x4c>)
 8003a76:	4a12      	ldr	r2, [pc, #72]	; (8003ac0 <MX_USART1_UART_Init+0x50>)
 8003a78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003a7a:	4b10      	ldr	r3, [pc, #64]	; (8003abc <MX_USART1_UART_Init+0x4c>)
 8003a7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a82:	4b0e      	ldr	r3, [pc, #56]	; (8003abc <MX_USART1_UART_Init+0x4c>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a88:	4b0c      	ldr	r3, [pc, #48]	; (8003abc <MX_USART1_UART_Init+0x4c>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a8e:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <MX_USART1_UART_Init+0x4c>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a94:	4b09      	ldr	r3, [pc, #36]	; (8003abc <MX_USART1_UART_Init+0x4c>)
 8003a96:	220c      	movs	r2, #12
 8003a98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a9a:	4b08      	ldr	r3, [pc, #32]	; (8003abc <MX_USART1_UART_Init+0x4c>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <MX_USART1_UART_Init+0x4c>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003aa6:	4805      	ldr	r0, [pc, #20]	; (8003abc <MX_USART1_UART_Init+0x4c>)
 8003aa8:	f002 fcf5 	bl	8006496 <HAL_UART_Init>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003ab2:	f7ff fd4a 	bl	800354a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003ab6:	bf00      	nop
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	200004fc 	.word	0x200004fc
 8003ac0:	40013800 	.word	0x40013800

08003ac4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003acc:	f107 0310 	add.w	r3, r7, #16
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	605a      	str	r2, [r3, #4]
 8003ad6:	609a      	str	r2, [r3, #8]
 8003ad8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a1c      	ldr	r2, [pc, #112]	; (8003b50 <HAL_UART_MspInit+0x8c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d131      	bne.n	8003b48 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ae4:	4b1b      	ldr	r3, [pc, #108]	; (8003b54 <HAL_UART_MspInit+0x90>)
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	4a1a      	ldr	r2, [pc, #104]	; (8003b54 <HAL_UART_MspInit+0x90>)
 8003aea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aee:	6193      	str	r3, [r2, #24]
 8003af0:	4b18      	ldr	r3, [pc, #96]	; (8003b54 <HAL_UART_MspInit+0x90>)
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003afc:	4b15      	ldr	r3, [pc, #84]	; (8003b54 <HAL_UART_MspInit+0x90>)
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	4a14      	ldr	r2, [pc, #80]	; (8003b54 <HAL_UART_MspInit+0x90>)
 8003b02:	f043 0304 	orr.w	r3, r3, #4
 8003b06:	6193      	str	r3, [r2, #24]
 8003b08:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <HAL_UART_MspInit+0x90>)
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003b14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b22:	f107 0310 	add.w	r3, r7, #16
 8003b26:	4619      	mov	r1, r3
 8003b28:	480b      	ldr	r0, [pc, #44]	; (8003b58 <HAL_UART_MspInit+0x94>)
 8003b2a:	f000 f9d1 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b3c:	f107 0310 	add.w	r3, r7, #16
 8003b40:	4619      	mov	r1, r3
 8003b42:	4805      	ldr	r0, [pc, #20]	; (8003b58 <HAL_UART_MspInit+0x94>)
 8003b44:	f000 f9c4 	bl	8003ed0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003b48:	bf00      	nop
 8003b4a:	3720      	adds	r7, #32
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40013800 	.word	0x40013800
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40010800 	.word	0x40010800

08003b5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
   bl  SystemInit
 8003b5c:	f7ff fe0c 	bl	8003778 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b60:	480b      	ldr	r0, [pc, #44]	; (8003b90 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003b62:	490c      	ldr	r1, [pc, #48]	; (8003b94 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003b64:	4a0c      	ldr	r2, [pc, #48]	; (8003b98 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b68:	e002      	b.n	8003b70 <LoopCopyDataInit>

08003b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b6e:	3304      	adds	r3, #4

08003b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b74:	d3f9      	bcc.n	8003b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b76:	4a09      	ldr	r2, [pc, #36]	; (8003b9c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003b78:	4c09      	ldr	r4, [pc, #36]	; (8003ba0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b7c:	e001      	b.n	8003b82 <LoopFillZerobss>

08003b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b80:	3204      	adds	r2, #4

08003b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b84:	d3fb      	bcc.n	8003b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b86:	f002 fe5b 	bl	8006840 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b8a:	f7ff fb45 	bl	8003218 <main>
  bx lr
 8003b8e:	4770      	bx	lr
  ldr r0, =_sdata
 8003b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b94:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003b98:	0800ac50 	.word	0x0800ac50
  ldr r2, =_sbss
 8003b9c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003ba0:	20000558 	.word	0x20000558

08003ba4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ba4:	e7fe      	b.n	8003ba4 <ADC1_2_IRQHandler>
	...

08003ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bac:	4b08      	ldr	r3, [pc, #32]	; (8003bd0 <HAL_Init+0x28>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a07      	ldr	r2, [pc, #28]	; (8003bd0 <HAL_Init+0x28>)
 8003bb2:	f043 0310 	orr.w	r3, r3, #16
 8003bb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bb8:	2003      	movs	r0, #3
 8003bba:	f000 f947 	bl	8003e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bbe:	200f      	movs	r0, #15
 8003bc0:	f000 f808 	bl	8003bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bc4:	f7ff fcc6 	bl	8003554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40022000 	.word	0x40022000

08003bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bdc:	4b12      	ldr	r3, [pc, #72]	; (8003c28 <HAL_InitTick+0x54>)
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	4b12      	ldr	r3, [pc, #72]	; (8003c2c <HAL_InitTick+0x58>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	4619      	mov	r1, r3
 8003be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 f95f 	bl	8003eb6 <HAL_SYSTICK_Config>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e00e      	b.n	8003c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b0f      	cmp	r3, #15
 8003c06:	d80a      	bhi.n	8003c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c08:	2200      	movs	r2, #0
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c10:	f000 f927 	bl	8003e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c14:	4a06      	ldr	r2, [pc, #24]	; (8003c30 <HAL_InitTick+0x5c>)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e000      	b.n	8003c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20000004 	.word	0x20000004
 8003c2c:	2000000c 	.word	0x2000000c
 8003c30:	20000008 	.word	0x20000008

08003c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c38:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <HAL_IncTick+0x1c>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <HAL_IncTick+0x20>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4413      	add	r3, r2
 8003c44:	4a03      	ldr	r2, [pc, #12]	; (8003c54 <HAL_IncTick+0x20>)
 8003c46:	6013      	str	r3, [r2, #0]
}
 8003c48:	bf00      	nop
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr
 8003c50:	2000000c 	.word	0x2000000c
 8003c54:	20000544 	.word	0x20000544

08003c58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003c5c:	4b02      	ldr	r3, [pc, #8]	; (8003c68 <HAL_GetTick+0x10>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr
 8003c68:	20000544 	.word	0x20000544

08003c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c74:	f7ff fff0 	bl	8003c58 <HAL_GetTick>
 8003c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c84:	d005      	beq.n	8003c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c86:	4b0a      	ldr	r3, [pc, #40]	; (8003cb0 <HAL_Delay+0x44>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4413      	add	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c92:	bf00      	nop
 8003c94:	f7ff ffe0 	bl	8003c58 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d8f7      	bhi.n	8003c94 <HAL_Delay+0x28>
  {
  }
}
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	2000000c 	.word	0x2000000c

08003cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cc4:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ce6:	4a04      	ldr	r2, [pc, #16]	; (8003cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	60d3      	str	r3, [r2, #12]
}
 8003cec:	bf00      	nop
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	e000ed00 	.word	0xe000ed00

08003cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d00:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <__NVIC_GetPriorityGrouping+0x18>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	0a1b      	lsrs	r3, r3, #8
 8003d06:	f003 0307 	and.w	r3, r3, #7
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bc80      	pop	{r7}
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	e000ed00 	.word	0xe000ed00

08003d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	db0b      	blt.n	8003d42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d2a:	79fb      	ldrb	r3, [r7, #7]
 8003d2c:	f003 021f 	and.w	r2, r3, #31
 8003d30:	4906      	ldr	r1, [pc, #24]	; (8003d4c <__NVIC_EnableIRQ+0x34>)
 8003d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d36:	095b      	lsrs	r3, r3, #5
 8003d38:	2001      	movs	r0, #1
 8003d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr
 8003d4c:	e000e100 	.word	0xe000e100

08003d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	4603      	mov	r3, r0
 8003d58:	6039      	str	r1, [r7, #0]
 8003d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	db0a      	blt.n	8003d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	490c      	ldr	r1, [pc, #48]	; (8003d9c <__NVIC_SetPriority+0x4c>)
 8003d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6e:	0112      	lsls	r2, r2, #4
 8003d70:	b2d2      	uxtb	r2, r2
 8003d72:	440b      	add	r3, r1
 8003d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d78:	e00a      	b.n	8003d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	4908      	ldr	r1, [pc, #32]	; (8003da0 <__NVIC_SetPriority+0x50>)
 8003d80:	79fb      	ldrb	r3, [r7, #7]
 8003d82:	f003 030f 	and.w	r3, r3, #15
 8003d86:	3b04      	subs	r3, #4
 8003d88:	0112      	lsls	r2, r2, #4
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	761a      	strb	r2, [r3, #24]
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bc80      	pop	{r7}
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	e000e100 	.word	0xe000e100
 8003da0:	e000ed00 	.word	0xe000ed00

08003da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b089      	sub	sp, #36	; 0x24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f1c3 0307 	rsb	r3, r3, #7
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	bf28      	it	cs
 8003dc2:	2304      	movcs	r3, #4
 8003dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	2b06      	cmp	r3, #6
 8003dcc:	d902      	bls.n	8003dd4 <NVIC_EncodePriority+0x30>
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	3b03      	subs	r3, #3
 8003dd2:	e000      	b.n	8003dd6 <NVIC_EncodePriority+0x32>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	43da      	mvns	r2, r3
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	401a      	ands	r2, r3
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dec:	f04f 31ff 	mov.w	r1, #4294967295
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	fa01 f303 	lsl.w	r3, r1, r3
 8003df6:	43d9      	mvns	r1, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dfc:	4313      	orrs	r3, r2
         );
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3724      	adds	r7, #36	; 0x24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr

08003e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e18:	d301      	bcc.n	8003e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e00f      	b.n	8003e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e1e:	4a0a      	ldr	r2, [pc, #40]	; (8003e48 <SysTick_Config+0x40>)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e26:	210f      	movs	r1, #15
 8003e28:	f04f 30ff 	mov.w	r0, #4294967295
 8003e2c:	f7ff ff90 	bl	8003d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e30:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <SysTick_Config+0x40>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e36:	4b04      	ldr	r3, [pc, #16]	; (8003e48 <SysTick_Config+0x40>)
 8003e38:	2207      	movs	r2, #7
 8003e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	e000e010 	.word	0xe000e010

08003e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff ff2d 	bl	8003cb4 <__NVIC_SetPriorityGrouping>
}
 8003e5a:	bf00      	nop
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b086      	sub	sp, #24
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	4603      	mov	r3, r0
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	607a      	str	r2, [r7, #4]
 8003e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e74:	f7ff ff42 	bl	8003cfc <__NVIC_GetPriorityGrouping>
 8003e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	68b9      	ldr	r1, [r7, #8]
 8003e7e:	6978      	ldr	r0, [r7, #20]
 8003e80:	f7ff ff90 	bl	8003da4 <NVIC_EncodePriority>
 8003e84:	4602      	mov	r2, r0
 8003e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff ff5f 	bl	8003d50 <__NVIC_SetPriority>
}
 8003e92:	bf00      	nop
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b082      	sub	sp, #8
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff ff35 	bl	8003d18 <__NVIC_EnableIRQ>
}
 8003eae:	bf00      	nop
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b082      	sub	sp, #8
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7ff ffa2 	bl	8003e08 <SysTick_Config>
 8003ec4:	4603      	mov	r3, r0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b08b      	sub	sp, #44	; 0x2c
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003eda:	2300      	movs	r3, #0
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ee2:	e169      	b.n	80041b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69fa      	ldr	r2, [r7, #28]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	f040 8158 	bne.w	80041b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	4a9a      	ldr	r2, [pc, #616]	; (8004170 <HAL_GPIO_Init+0x2a0>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d05e      	beq.n	8003fca <HAL_GPIO_Init+0xfa>
 8003f0c:	4a98      	ldr	r2, [pc, #608]	; (8004170 <HAL_GPIO_Init+0x2a0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d875      	bhi.n	8003ffe <HAL_GPIO_Init+0x12e>
 8003f12:	4a98      	ldr	r2, [pc, #608]	; (8004174 <HAL_GPIO_Init+0x2a4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d058      	beq.n	8003fca <HAL_GPIO_Init+0xfa>
 8003f18:	4a96      	ldr	r2, [pc, #600]	; (8004174 <HAL_GPIO_Init+0x2a4>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d86f      	bhi.n	8003ffe <HAL_GPIO_Init+0x12e>
 8003f1e:	4a96      	ldr	r2, [pc, #600]	; (8004178 <HAL_GPIO_Init+0x2a8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d052      	beq.n	8003fca <HAL_GPIO_Init+0xfa>
 8003f24:	4a94      	ldr	r2, [pc, #592]	; (8004178 <HAL_GPIO_Init+0x2a8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d869      	bhi.n	8003ffe <HAL_GPIO_Init+0x12e>
 8003f2a:	4a94      	ldr	r2, [pc, #592]	; (800417c <HAL_GPIO_Init+0x2ac>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d04c      	beq.n	8003fca <HAL_GPIO_Init+0xfa>
 8003f30:	4a92      	ldr	r2, [pc, #584]	; (800417c <HAL_GPIO_Init+0x2ac>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d863      	bhi.n	8003ffe <HAL_GPIO_Init+0x12e>
 8003f36:	4a92      	ldr	r2, [pc, #584]	; (8004180 <HAL_GPIO_Init+0x2b0>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d046      	beq.n	8003fca <HAL_GPIO_Init+0xfa>
 8003f3c:	4a90      	ldr	r2, [pc, #576]	; (8004180 <HAL_GPIO_Init+0x2b0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d85d      	bhi.n	8003ffe <HAL_GPIO_Init+0x12e>
 8003f42:	2b12      	cmp	r3, #18
 8003f44:	d82a      	bhi.n	8003f9c <HAL_GPIO_Init+0xcc>
 8003f46:	2b12      	cmp	r3, #18
 8003f48:	d859      	bhi.n	8003ffe <HAL_GPIO_Init+0x12e>
 8003f4a:	a201      	add	r2, pc, #4	; (adr r2, 8003f50 <HAL_GPIO_Init+0x80>)
 8003f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f50:	08003fcb 	.word	0x08003fcb
 8003f54:	08003fa5 	.word	0x08003fa5
 8003f58:	08003fb7 	.word	0x08003fb7
 8003f5c:	08003ff9 	.word	0x08003ff9
 8003f60:	08003fff 	.word	0x08003fff
 8003f64:	08003fff 	.word	0x08003fff
 8003f68:	08003fff 	.word	0x08003fff
 8003f6c:	08003fff 	.word	0x08003fff
 8003f70:	08003fff 	.word	0x08003fff
 8003f74:	08003fff 	.word	0x08003fff
 8003f78:	08003fff 	.word	0x08003fff
 8003f7c:	08003fff 	.word	0x08003fff
 8003f80:	08003fff 	.word	0x08003fff
 8003f84:	08003fff 	.word	0x08003fff
 8003f88:	08003fff 	.word	0x08003fff
 8003f8c:	08003fff 	.word	0x08003fff
 8003f90:	08003fff 	.word	0x08003fff
 8003f94:	08003fad 	.word	0x08003fad
 8003f98:	08003fc1 	.word	0x08003fc1
 8003f9c:	4a79      	ldr	r2, [pc, #484]	; (8004184 <HAL_GPIO_Init+0x2b4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003fa2:	e02c      	b.n	8003ffe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	623b      	str	r3, [r7, #32]
          break;
 8003faa:	e029      	b.n	8004000 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	623b      	str	r3, [r7, #32]
          break;
 8003fb4:	e024      	b.n	8004000 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	3308      	adds	r3, #8
 8003fbc:	623b      	str	r3, [r7, #32]
          break;
 8003fbe:	e01f      	b.n	8004000 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	330c      	adds	r3, #12
 8003fc6:	623b      	str	r3, [r7, #32]
          break;
 8003fc8:	e01a      	b.n	8004000 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d102      	bne.n	8003fd8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003fd2:	2304      	movs	r3, #4
 8003fd4:	623b      	str	r3, [r7, #32]
          break;
 8003fd6:	e013      	b.n	8004000 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d105      	bne.n	8003fec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003fe0:	2308      	movs	r3, #8
 8003fe2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69fa      	ldr	r2, [r7, #28]
 8003fe8:	611a      	str	r2, [r3, #16]
          break;
 8003fea:	e009      	b.n	8004000 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003fec:	2308      	movs	r3, #8
 8003fee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	69fa      	ldr	r2, [r7, #28]
 8003ff4:	615a      	str	r2, [r3, #20]
          break;
 8003ff6:	e003      	b.n	8004000 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	623b      	str	r3, [r7, #32]
          break;
 8003ffc:	e000      	b.n	8004000 <HAL_GPIO_Init+0x130>
          break;
 8003ffe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	2bff      	cmp	r3, #255	; 0xff
 8004004:	d801      	bhi.n	800400a <HAL_GPIO_Init+0x13a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	e001      	b.n	800400e <HAL_GPIO_Init+0x13e>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3304      	adds	r3, #4
 800400e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2bff      	cmp	r3, #255	; 0xff
 8004014:	d802      	bhi.n	800401c <HAL_GPIO_Init+0x14c>
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	e002      	b.n	8004022 <HAL_GPIO_Init+0x152>
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	3b08      	subs	r3, #8
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	210f      	movs	r1, #15
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	fa01 f303 	lsl.w	r3, r1, r3
 8004030:	43db      	mvns	r3, r3
 8004032:	401a      	ands	r2, r3
 8004034:	6a39      	ldr	r1, [r7, #32]
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	fa01 f303 	lsl.w	r3, r1, r3
 800403c:	431a      	orrs	r2, r3
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 80b1 	beq.w	80041b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004050:	4b4d      	ldr	r3, [pc, #308]	; (8004188 <HAL_GPIO_Init+0x2b8>)
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	4a4c      	ldr	r2, [pc, #304]	; (8004188 <HAL_GPIO_Init+0x2b8>)
 8004056:	f043 0301 	orr.w	r3, r3, #1
 800405a:	6193      	str	r3, [r2, #24]
 800405c:	4b4a      	ldr	r3, [pc, #296]	; (8004188 <HAL_GPIO_Init+0x2b8>)
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004068:	4a48      	ldr	r2, [pc, #288]	; (800418c <HAL_GPIO_Init+0x2bc>)
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	089b      	lsrs	r3, r3, #2
 800406e:	3302      	adds	r3, #2
 8004070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004074:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	220f      	movs	r2, #15
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	43db      	mvns	r3, r3
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4013      	ands	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a40      	ldr	r2, [pc, #256]	; (8004190 <HAL_GPIO_Init+0x2c0>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d013      	beq.n	80040bc <HAL_GPIO_Init+0x1ec>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a3f      	ldr	r2, [pc, #252]	; (8004194 <HAL_GPIO_Init+0x2c4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d00d      	beq.n	80040b8 <HAL_GPIO_Init+0x1e8>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a3e      	ldr	r2, [pc, #248]	; (8004198 <HAL_GPIO_Init+0x2c8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d007      	beq.n	80040b4 <HAL_GPIO_Init+0x1e4>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a3d      	ldr	r2, [pc, #244]	; (800419c <HAL_GPIO_Init+0x2cc>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d101      	bne.n	80040b0 <HAL_GPIO_Init+0x1e0>
 80040ac:	2303      	movs	r3, #3
 80040ae:	e006      	b.n	80040be <HAL_GPIO_Init+0x1ee>
 80040b0:	2304      	movs	r3, #4
 80040b2:	e004      	b.n	80040be <HAL_GPIO_Init+0x1ee>
 80040b4:	2302      	movs	r3, #2
 80040b6:	e002      	b.n	80040be <HAL_GPIO_Init+0x1ee>
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <HAL_GPIO_Init+0x1ee>
 80040bc:	2300      	movs	r3, #0
 80040be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c0:	f002 0203 	and.w	r2, r2, #3
 80040c4:	0092      	lsls	r2, r2, #2
 80040c6:	4093      	lsls	r3, r2
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80040ce:	492f      	ldr	r1, [pc, #188]	; (800418c <HAL_GPIO_Init+0x2bc>)
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	089b      	lsrs	r3, r3, #2
 80040d4:	3302      	adds	r3, #2
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d006      	beq.n	80040f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80040e8:	4b2d      	ldr	r3, [pc, #180]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	492c      	ldr	r1, [pc, #176]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	608b      	str	r3, [r1, #8]
 80040f4:	e006      	b.n	8004104 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80040f6:	4b2a      	ldr	r3, [pc, #168]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	43db      	mvns	r3, r3
 80040fe:	4928      	ldr	r1, [pc, #160]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 8004100:	4013      	ands	r3, r2
 8004102:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d006      	beq.n	800411e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004110:	4b23      	ldr	r3, [pc, #140]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	4922      	ldr	r1, [pc, #136]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	4313      	orrs	r3, r2
 800411a:	60cb      	str	r3, [r1, #12]
 800411c:	e006      	b.n	800412c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800411e:	4b20      	ldr	r3, [pc, #128]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	43db      	mvns	r3, r3
 8004126:	491e      	ldr	r1, [pc, #120]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 8004128:	4013      	ands	r3, r2
 800412a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d006      	beq.n	8004146 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004138:	4b19      	ldr	r3, [pc, #100]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	4918      	ldr	r1, [pc, #96]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	4313      	orrs	r3, r2
 8004142:	604b      	str	r3, [r1, #4]
 8004144:	e006      	b.n	8004154 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004146:	4b16      	ldr	r3, [pc, #88]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	43db      	mvns	r3, r3
 800414e:	4914      	ldr	r1, [pc, #80]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 8004150:	4013      	ands	r3, r2
 8004152:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d021      	beq.n	80041a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004160:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	490e      	ldr	r1, [pc, #56]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	4313      	orrs	r3, r2
 800416a:	600b      	str	r3, [r1, #0]
 800416c:	e021      	b.n	80041b2 <HAL_GPIO_Init+0x2e2>
 800416e:	bf00      	nop
 8004170:	10320000 	.word	0x10320000
 8004174:	10310000 	.word	0x10310000
 8004178:	10220000 	.word	0x10220000
 800417c:	10210000 	.word	0x10210000
 8004180:	10120000 	.word	0x10120000
 8004184:	10110000 	.word	0x10110000
 8004188:	40021000 	.word	0x40021000
 800418c:	40010000 	.word	0x40010000
 8004190:	40010800 	.word	0x40010800
 8004194:	40010c00 	.word	0x40010c00
 8004198:	40011000 	.word	0x40011000
 800419c:	40011400 	.word	0x40011400
 80041a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80041a4:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <HAL_GPIO_Init+0x304>)
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	43db      	mvns	r3, r3
 80041ac:	4909      	ldr	r1, [pc, #36]	; (80041d4 <HAL_GPIO_Init+0x304>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	3301      	adds	r3, #1
 80041b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	fa22 f303 	lsr.w	r3, r2, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f47f ae8e 	bne.w	8003ee4 <HAL_GPIO_Init+0x14>
  }
}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop
 80041cc:	372c      	adds	r7, #44	; 0x2c
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bc80      	pop	{r7}
 80041d2:	4770      	bx	lr
 80041d4:	40010400 	.word	0x40010400

080041d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	887b      	ldrh	r3, [r7, #2]
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
 80041f4:	e001      	b.n	80041fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041f6:	2300      	movs	r3, #0
 80041f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	bc80      	pop	{r7}
 8004204:	4770      	bx	lr

08004206 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	460b      	mov	r3, r1
 8004210:	807b      	strh	r3, [r7, #2]
 8004212:	4613      	mov	r3, r2
 8004214:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004216:	787b      	ldrb	r3, [r7, #1]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800421c:	887a      	ldrh	r2, [r7, #2]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004222:	e003      	b.n	800422c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004224:	887b      	ldrh	r3, [r7, #2]
 8004226:	041a      	lsls	r2, r3, #16
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	611a      	str	r2, [r3, #16]
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	bc80      	pop	{r7}
 8004234:	4770      	bx	lr

08004236 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004236:	b480      	push	{r7}
 8004238:	b085      	sub	sp, #20
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	460b      	mov	r3, r1
 8004240:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004248:	887a      	ldrh	r2, [r7, #2]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4013      	ands	r3, r2
 800424e:	041a      	lsls	r2, r3, #16
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	43d9      	mvns	r1, r3
 8004254:	887b      	ldrh	r3, [r7, #2]
 8004256:	400b      	ands	r3, r1
 8004258:	431a      	orrs	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	611a      	str	r2, [r3, #16]
}
 800425e:	bf00      	nop
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr

08004268 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	4603      	mov	r3, r0
 8004270:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004272:	4b08      	ldr	r3, [pc, #32]	; (8004294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004274:	695a      	ldr	r2, [r3, #20]
 8004276:	88fb      	ldrh	r3, [r7, #6]
 8004278:	4013      	ands	r3, r2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d006      	beq.n	800428c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800427e:	4a05      	ldr	r2, [pc, #20]	; (8004294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004280:	88fb      	ldrh	r3, [r7, #6]
 8004282:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004284:	88fb      	ldrh	r3, [r7, #6]
 8004286:	4618      	mov	r0, r3
 8004288:	f000 f806 	bl	8004298 <HAL_GPIO_EXTI_Callback>
  }
}
 800428c:	bf00      	nop
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40010400 	.word	0x40010400

08004298 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr

080042ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e12b      	b.n	8004516 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d106      	bne.n	80042d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7fc fffa 	bl	80012cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2224      	movs	r2, #36	; 0x24
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0201 	bic.w	r2, r2, #1
 80042ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800430e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004310:	f001 fbf0 	bl	8005af4 <HAL_RCC_GetPCLK1Freq>
 8004314:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	4a81      	ldr	r2, [pc, #516]	; (8004520 <HAL_I2C_Init+0x274>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d807      	bhi.n	8004330 <HAL_I2C_Init+0x84>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4a80      	ldr	r2, [pc, #512]	; (8004524 <HAL_I2C_Init+0x278>)
 8004324:	4293      	cmp	r3, r2
 8004326:	bf94      	ite	ls
 8004328:	2301      	movls	r3, #1
 800432a:	2300      	movhi	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	e006      	b.n	800433e <HAL_I2C_Init+0x92>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4a7d      	ldr	r2, [pc, #500]	; (8004528 <HAL_I2C_Init+0x27c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	bf94      	ite	ls
 8004338:	2301      	movls	r3, #1
 800433a:	2300      	movhi	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e0e7      	b.n	8004516 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4a78      	ldr	r2, [pc, #480]	; (800452c <HAL_I2C_Init+0x280>)
 800434a:	fba2 2303 	umull	r2, r3, r2, r3
 800434e:	0c9b      	lsrs	r3, r3, #18
 8004350:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	430a      	orrs	r2, r1
 8004364:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	4a6a      	ldr	r2, [pc, #424]	; (8004520 <HAL_I2C_Init+0x274>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d802      	bhi.n	8004380 <HAL_I2C_Init+0xd4>
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	3301      	adds	r3, #1
 800437e:	e009      	b.n	8004394 <HAL_I2C_Init+0xe8>
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004386:	fb02 f303 	mul.w	r3, r2, r3
 800438a:	4a69      	ldr	r2, [pc, #420]	; (8004530 <HAL_I2C_Init+0x284>)
 800438c:	fba2 2303 	umull	r2, r3, r2, r3
 8004390:	099b      	lsrs	r3, r3, #6
 8004392:	3301      	adds	r3, #1
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6812      	ldr	r2, [r2, #0]
 8004398:	430b      	orrs	r3, r1
 800439a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	495c      	ldr	r1, [pc, #368]	; (8004520 <HAL_I2C_Init+0x274>)
 80043b0:	428b      	cmp	r3, r1
 80043b2:	d819      	bhi.n	80043e8 <HAL_I2C_Init+0x13c>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	1e59      	subs	r1, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	fbb1 f3f3 	udiv	r3, r1, r3
 80043c2:	1c59      	adds	r1, r3, #1
 80043c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043c8:	400b      	ands	r3, r1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <HAL_I2C_Init+0x138>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	1e59      	subs	r1, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80043dc:	3301      	adds	r3, #1
 80043de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043e2:	e051      	b.n	8004488 <HAL_I2C_Init+0x1dc>
 80043e4:	2304      	movs	r3, #4
 80043e6:	e04f      	b.n	8004488 <HAL_I2C_Init+0x1dc>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d111      	bne.n	8004414 <HAL_I2C_Init+0x168>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	1e58      	subs	r0, r3, #1
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6859      	ldr	r1, [r3, #4]
 80043f8:	460b      	mov	r3, r1
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	440b      	add	r3, r1
 80043fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004402:	3301      	adds	r3, #1
 8004404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004408:	2b00      	cmp	r3, #0
 800440a:	bf0c      	ite	eq
 800440c:	2301      	moveq	r3, #1
 800440e:	2300      	movne	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	e012      	b.n	800443a <HAL_I2C_Init+0x18e>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	1e58      	subs	r0, r3, #1
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6859      	ldr	r1, [r3, #4]
 800441c:	460b      	mov	r3, r1
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	440b      	add	r3, r1
 8004422:	0099      	lsls	r1, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	fbb0 f3f3 	udiv	r3, r0, r3
 800442a:	3301      	adds	r3, #1
 800442c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004430:	2b00      	cmp	r3, #0
 8004432:	bf0c      	ite	eq
 8004434:	2301      	moveq	r3, #1
 8004436:	2300      	movne	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_I2C_Init+0x196>
 800443e:	2301      	movs	r3, #1
 8004440:	e022      	b.n	8004488 <HAL_I2C_Init+0x1dc>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10e      	bne.n	8004468 <HAL_I2C_Init+0x1bc>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	1e58      	subs	r0, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6859      	ldr	r1, [r3, #4]
 8004452:	460b      	mov	r3, r1
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	440b      	add	r3, r1
 8004458:	fbb0 f3f3 	udiv	r3, r0, r3
 800445c:	3301      	adds	r3, #1
 800445e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004466:	e00f      	b.n	8004488 <HAL_I2C_Init+0x1dc>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	1e58      	subs	r0, r3, #1
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6859      	ldr	r1, [r3, #4]
 8004470:	460b      	mov	r3, r1
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	440b      	add	r3, r1
 8004476:	0099      	lsls	r1, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	fbb0 f3f3 	udiv	r3, r0, r3
 800447e:	3301      	adds	r3, #1
 8004480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004484:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	6809      	ldr	r1, [r1, #0]
 800448c:	4313      	orrs	r3, r2
 800448e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	69da      	ldr	r2, [r3, #28]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6911      	ldr	r1, [r2, #16]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	68d2      	ldr	r2, [r2, #12]
 80044c2:	4311      	orrs	r1, r2
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6812      	ldr	r2, [r2, #0]
 80044c8:	430b      	orrs	r3, r1
 80044ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	695a      	ldr	r2, [r3, #20]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	000186a0 	.word	0x000186a0
 8004524:	001e847f 	.word	0x001e847f
 8004528:	003d08ff 	.word	0x003d08ff
 800452c:	431bde83 	.word	0x431bde83
 8004530:	10624dd3 	.word	0x10624dd3

08004534 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af02      	add	r7, sp, #8
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	4608      	mov	r0, r1
 800453e:	4611      	mov	r1, r2
 8004540:	461a      	mov	r2, r3
 8004542:	4603      	mov	r3, r0
 8004544:	817b      	strh	r3, [r7, #10]
 8004546:	460b      	mov	r3, r1
 8004548:	813b      	strh	r3, [r7, #8]
 800454a:	4613      	mov	r3, r2
 800454c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800454e:	f7ff fb83 	bl	8003c58 <HAL_GetTick>
 8004552:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b20      	cmp	r3, #32
 800455e:	f040 80d9 	bne.w	8004714 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	2319      	movs	r3, #25
 8004568:	2201      	movs	r2, #1
 800456a:	496d      	ldr	r1, [pc, #436]	; (8004720 <HAL_I2C_Mem_Write+0x1ec>)
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 fcc1 	bl	8004ef4 <I2C_WaitOnFlagUntilTimeout>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d001      	beq.n	800457c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004578:	2302      	movs	r3, #2
 800457a:	e0cc      	b.n	8004716 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004582:	2b01      	cmp	r3, #1
 8004584:	d101      	bne.n	800458a <HAL_I2C_Mem_Write+0x56>
 8004586:	2302      	movs	r3, #2
 8004588:	e0c5      	b.n	8004716 <HAL_I2C_Mem_Write+0x1e2>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b01      	cmp	r3, #1
 800459e:	d007      	beq.n	80045b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0201 	orr.w	r2, r2, #1
 80045ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2221      	movs	r2, #33	; 0x21
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2240      	movs	r2, #64	; 0x40
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6a3a      	ldr	r2, [r7, #32]
 80045da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4a4d      	ldr	r2, [pc, #308]	; (8004724 <HAL_I2C_Mem_Write+0x1f0>)
 80045f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045f2:	88f8      	ldrh	r0, [r7, #6]
 80045f4:	893a      	ldrh	r2, [r7, #8]
 80045f6:	8979      	ldrh	r1, [r7, #10]
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	9301      	str	r3, [sp, #4]
 80045fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	4603      	mov	r3, r0
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 faf8 	bl	8004bf8 <I2C_RequestMemoryWrite>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d052      	beq.n	80046b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e081      	b.n	8004716 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 fd86 	bl	8005128 <I2C_WaitOnTXEFlagUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00d      	beq.n	800463e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	2b04      	cmp	r3, #4
 8004628:	d107      	bne.n	800463a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004638:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e06b      	b.n	8004716 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	781a      	ldrb	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004664:	b29b      	uxth	r3, r3
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b04      	cmp	r3, #4
 800467a:	d11b      	bne.n	80046b4 <HAL_I2C_Mem_Write+0x180>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004680:	2b00      	cmp	r3, #0
 8004682:	d017      	beq.n	80046b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	781a      	ldrb	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1aa      	bne.n	8004612 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 fd79 	bl	80051b8 <I2C_WaitOnBTFFlagUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00d      	beq.n	80046e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	2b04      	cmp	r3, #4
 80046d2:	d107      	bne.n	80046e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e016      	b.n	8004716 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004710:	2300      	movs	r3, #0
 8004712:	e000      	b.n	8004716 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004714:	2302      	movs	r3, #2
  }
}
 8004716:	4618      	mov	r0, r3
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	00100002 	.word	0x00100002
 8004724:	ffff0000 	.word	0xffff0000

08004728 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b08c      	sub	sp, #48	; 0x30
 800472c:	af02      	add	r7, sp, #8
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	4608      	mov	r0, r1
 8004732:	4611      	mov	r1, r2
 8004734:	461a      	mov	r2, r3
 8004736:	4603      	mov	r3, r0
 8004738:	817b      	strh	r3, [r7, #10]
 800473a:	460b      	mov	r3, r1
 800473c:	813b      	strh	r3, [r7, #8]
 800473e:	4613      	mov	r3, r2
 8004740:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004746:	f7ff fa87 	bl	8003c58 <HAL_GetTick>
 800474a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b20      	cmp	r3, #32
 8004756:	f040 8244 	bne.w	8004be2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	2319      	movs	r3, #25
 8004760:	2201      	movs	r2, #1
 8004762:	4982      	ldr	r1, [pc, #520]	; (800496c <HAL_I2C_Mem_Read+0x244>)
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 fbc5 	bl	8004ef4 <I2C_WaitOnFlagUntilTimeout>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004770:	2302      	movs	r3, #2
 8004772:	e237      	b.n	8004be4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800477a:	2b01      	cmp	r3, #1
 800477c:	d101      	bne.n	8004782 <HAL_I2C_Mem_Read+0x5a>
 800477e:	2302      	movs	r3, #2
 8004780:	e230      	b.n	8004be4 <HAL_I2C_Mem_Read+0x4bc>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b01      	cmp	r3, #1
 8004796:	d007      	beq.n	80047a8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2222      	movs	r2, #34	; 0x22
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2240      	movs	r2, #64	; 0x40
 80047c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80047d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047de:	b29a      	uxth	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4a62      	ldr	r2, [pc, #392]	; (8004970 <HAL_I2C_Mem_Read+0x248>)
 80047e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047ea:	88f8      	ldrh	r0, [r7, #6]
 80047ec:	893a      	ldrh	r2, [r7, #8]
 80047ee:	8979      	ldrh	r1, [r7, #10]
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	9301      	str	r3, [sp, #4]
 80047f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	4603      	mov	r3, r0
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 fa92 	bl	8004d24 <I2C_RequestMemoryRead>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e1ec      	b.n	8004be4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800480e:	2b00      	cmp	r3, #0
 8004810:	d113      	bne.n	800483a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004812:	2300      	movs	r3, #0
 8004814:	61fb      	str	r3, [r7, #28]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	61fb      	str	r3, [r7, #28]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	61fb      	str	r3, [r7, #28]
 8004826:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	e1c0      	b.n	8004bbc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800483e:	2b01      	cmp	r3, #1
 8004840:	d11e      	bne.n	8004880 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004850:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004852:	b672      	cpsid	i
}
 8004854:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004856:	2300      	movs	r3, #0
 8004858:	61bb      	str	r3, [r7, #24]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	61bb      	str	r3, [r7, #24]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	61bb      	str	r3, [r7, #24]
 800486a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800487a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800487c:	b662      	cpsie	i
}
 800487e:	e035      	b.n	80048ec <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004884:	2b02      	cmp	r3, #2
 8004886:	d11e      	bne.n	80048c6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004896:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004898:	b672      	cpsid	i
}
 800489a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800489c:	2300      	movs	r3, #0
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	617b      	str	r3, [r7, #20]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	617b      	str	r3, [r7, #20]
 80048b0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80048c2:	b662      	cpsie	i
}
 80048c4:	e012      	b.n	80048ec <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048d4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048d6:	2300      	movs	r3, #0
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	613b      	str	r3, [r7, #16]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	613b      	str	r3, [r7, #16]
 80048ea:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80048ec:	e166      	b.n	8004bbc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	f200 811f 	bhi.w	8004b36 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d123      	bne.n	8004948 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004902:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 fc9f 	bl	8005248 <I2C_WaitOnRXNEFlagUntilTimeout>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e167      	b.n	8004be4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691a      	ldr	r2, [r3, #16]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800493c:	b29b      	uxth	r3, r3
 800493e:	3b01      	subs	r3, #1
 8004940:	b29a      	uxth	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004946:	e139      	b.n	8004bbc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800494c:	2b02      	cmp	r3, #2
 800494e:	d152      	bne.n	80049f6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004956:	2200      	movs	r2, #0
 8004958:	4906      	ldr	r1, [pc, #24]	; (8004974 <HAL_I2C_Mem_Read+0x24c>)
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 faca 	bl	8004ef4 <I2C_WaitOnFlagUntilTimeout>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d008      	beq.n	8004978 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e13c      	b.n	8004be4 <HAL_I2C_Mem_Read+0x4bc>
 800496a:	bf00      	nop
 800496c:	00100002 	.word	0x00100002
 8004970:	ffff0000 	.word	0xffff0000
 8004974:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004978:	b672      	cpsid	i
}
 800497a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800498a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691a      	ldr	r2, [r3, #16]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	3b01      	subs	r3, #1
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80049be:	b662      	cpsie	i
}
 80049c0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	691a      	ldr	r2, [r3, #16]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	b2d2      	uxtb	r2, r2
 80049ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	1c5a      	adds	r2, r3, #1
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049f4:	e0e2      	b.n	8004bbc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fc:	2200      	movs	r2, #0
 80049fe:	497b      	ldr	r1, [pc, #492]	; (8004bec <HAL_I2C_Mem_Read+0x4c4>)
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 fa77 	bl	8004ef4 <I2C_WaitOnFlagUntilTimeout>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e0e9      	b.n	8004be4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a20:	b672      	cpsid	i
}
 8004a22:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691a      	ldr	r2, [r3, #16]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a40:	3b01      	subs	r3, #1
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a56:	4b66      	ldr	r3, [pc, #408]	; (8004bf0 <HAL_I2C_Mem_Read+0x4c8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	08db      	lsrs	r3, r3, #3
 8004a5c:	4a65      	ldr	r2, [pc, #404]	; (8004bf4 <HAL_I2C_Mem_Read+0x4cc>)
 8004a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a62:	0a1a      	lsrs	r2, r3, #8
 8004a64:	4613      	mov	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	00da      	lsls	r2, r3, #3
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d118      	bne.n	8004aae <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	f043 0220 	orr.w	r2, r3, #32
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004a9e:	b662      	cpsie	i
}
 8004aa0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e09a      	b.n	8004be4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	d1d9      	bne.n	8004a70 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691a      	ldr	r2, [r3, #16]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3b01      	subs	r3, #1
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004afe:	b662      	cpsie	i
}
 8004b00:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b34:	e042      	b.n	8004bbc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 fb84 	bl	8005248 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e04c      	b.n	8004be4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	b2d2      	uxtb	r2, r2
 8004b56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b66:	3b01      	subs	r3, #1
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d118      	bne.n	8004bbc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f47f ae94 	bne.w	80048ee <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004bde:	2300      	movs	r3, #0
 8004be0:	e000      	b.n	8004be4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004be2:	2302      	movs	r3, #2
  }
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3728      	adds	r7, #40	; 0x28
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	00010004 	.word	0x00010004
 8004bf0:	20000004 	.word	0x20000004
 8004bf4:	14f8b589 	.word	0x14f8b589

08004bf8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b088      	sub	sp, #32
 8004bfc:	af02      	add	r7, sp, #8
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	4608      	mov	r0, r1
 8004c02:	4611      	mov	r1, r2
 8004c04:	461a      	mov	r2, r3
 8004c06:	4603      	mov	r3, r0
 8004c08:	817b      	strh	r3, [r7, #10]
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	813b      	strh	r3, [r7, #8]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 f960 	bl	8004ef4 <I2C_WaitOnFlagUntilTimeout>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00d      	beq.n	8004c56 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c48:	d103      	bne.n	8004c52 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e05f      	b.n	8004d16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c56:	897b      	ldrh	r3, [r7, #10]
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	6a3a      	ldr	r2, [r7, #32]
 8004c6a:	492d      	ldr	r1, [pc, #180]	; (8004d20 <I2C_RequestMemoryWrite+0x128>)
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 f9bb 	bl	8004fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d001      	beq.n	8004c7c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e04c      	b.n	8004d16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	617b      	str	r3, [r7, #20]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	617b      	str	r3, [r7, #20]
 8004c90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c94:	6a39      	ldr	r1, [r7, #32]
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 fa46 	bl	8005128 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00d      	beq.n	8004cbe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	d107      	bne.n	8004cba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e02b      	b.n	8004d16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cbe:	88fb      	ldrh	r3, [r7, #6]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d105      	bne.n	8004cd0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cc4:	893b      	ldrh	r3, [r7, #8]
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	611a      	str	r2, [r3, #16]
 8004cce:	e021      	b.n	8004d14 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004cd0:	893b      	ldrh	r3, [r7, #8]
 8004cd2:	0a1b      	lsrs	r3, r3, #8
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce0:	6a39      	ldr	r1, [r7, #32]
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f000 fa20 	bl	8005128 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00d      	beq.n	8004d0a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d107      	bne.n	8004d06 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e005      	b.n	8004d16 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d0a:	893b      	ldrh	r3, [r7, #8]
 8004d0c:	b2da      	uxtb	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	00010002 	.word	0x00010002

08004d24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b088      	sub	sp, #32
 8004d28:	af02      	add	r7, sp, #8
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	4608      	mov	r0, r1
 8004d2e:	4611      	mov	r1, r2
 8004d30:	461a      	mov	r2, r3
 8004d32:	4603      	mov	r3, r0
 8004d34:	817b      	strh	r3, [r7, #10]
 8004d36:	460b      	mov	r3, r1
 8004d38:	813b      	strh	r3, [r7, #8]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 f8c2 	bl	8004ef4 <I2C_WaitOnFlagUntilTimeout>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00d      	beq.n	8004d92 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d84:	d103      	bne.n	8004d8e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e0aa      	b.n	8004ee8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d92:	897b      	ldrh	r3, [r7, #10]
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	461a      	mov	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004da0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	6a3a      	ldr	r2, [r7, #32]
 8004da6:	4952      	ldr	r1, [pc, #328]	; (8004ef0 <I2C_RequestMemoryRead+0x1cc>)
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 f91d 	bl	8004fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e097      	b.n	8004ee8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	617b      	str	r3, [r7, #20]
 8004dcc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd0:	6a39      	ldr	r1, [r7, #32]
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f000 f9a8 	bl	8005128 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00d      	beq.n	8004dfa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d107      	bne.n	8004df6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e076      	b.n	8004ee8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004dfa:	88fb      	ldrh	r3, [r7, #6]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d105      	bne.n	8004e0c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e00:	893b      	ldrh	r3, [r7, #8]
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	611a      	str	r2, [r3, #16]
 8004e0a:	e021      	b.n	8004e50 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e0c:	893b      	ldrh	r3, [r7, #8]
 8004e0e:	0a1b      	lsrs	r3, r3, #8
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e1c:	6a39      	ldr	r1, [r7, #32]
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 f982 	bl	8005128 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00d      	beq.n	8004e46 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d107      	bne.n	8004e42 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e050      	b.n	8004ee8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e46:	893b      	ldrh	r3, [r7, #8]
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e52:	6a39      	ldr	r1, [r7, #32]
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 f967 	bl	8005128 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00d      	beq.n	8004e7c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d107      	bne.n	8004e78 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e035      	b.n	8004ee8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e8a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 f82b 	bl	8004ef4 <I2C_WaitOnFlagUntilTimeout>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00d      	beq.n	8004ec0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eb2:	d103      	bne.n	8004ebc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004eba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e013      	b.n	8004ee8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ec0:	897b      	ldrh	r3, [r7, #10]
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	f043 0301 	orr.w	r3, r3, #1
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	6a3a      	ldr	r2, [r7, #32]
 8004ed4:	4906      	ldr	r1, [pc, #24]	; (8004ef0 <I2C_RequestMemoryRead+0x1cc>)
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 f886 	bl	8004fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e000      	b.n	8004ee8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	00010002 	.word	0x00010002

08004ef4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	4613      	mov	r3, r2
 8004f02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f04:	e048      	b.n	8004f98 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0c:	d044      	beq.n	8004f98 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f0e:	f7fe fea3 	bl	8003c58 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d302      	bcc.n	8004f24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d139      	bne.n	8004f98 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	0c1b      	lsrs	r3, r3, #16
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d10d      	bne.n	8004f4a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	43da      	mvns	r2, r3
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	bf0c      	ite	eq
 8004f40:	2301      	moveq	r3, #1
 8004f42:	2300      	movne	r3, #0
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	461a      	mov	r2, r3
 8004f48:	e00c      	b.n	8004f64 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	43da      	mvns	r2, r3
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	4013      	ands	r3, r2
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	bf0c      	ite	eq
 8004f5c:	2301      	moveq	r3, #1
 8004f5e:	2300      	movne	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	461a      	mov	r2, r3
 8004f64:	79fb      	ldrb	r3, [r7, #7]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d116      	bne.n	8004f98 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	f043 0220 	orr.w	r2, r3, #32
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e023      	b.n	8004fe0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	0c1b      	lsrs	r3, r3, #16
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d10d      	bne.n	8004fbe <I2C_WaitOnFlagUntilTimeout+0xca>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	43da      	mvns	r2, r3
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	4013      	ands	r3, r2
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	bf0c      	ite	eq
 8004fb4:	2301      	moveq	r3, #1
 8004fb6:	2300      	movne	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	461a      	mov	r2, r3
 8004fbc:	e00c      	b.n	8004fd8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	43da      	mvns	r2, r3
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	bf0c      	ite	eq
 8004fd0:	2301      	moveq	r3, #1
 8004fd2:	2300      	movne	r3, #0
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	79fb      	ldrb	r3, [r7, #7]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d093      	beq.n	8004f06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ff6:	e071      	b.n	80050dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005006:	d123      	bne.n	8005050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005016:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005020:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503c:	f043 0204 	orr.w	r2, r3, #4
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e067      	b.n	8005120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005056:	d041      	beq.n	80050dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005058:	f7fe fdfe 	bl	8003c58 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	429a      	cmp	r2, r3
 8005066:	d302      	bcc.n	800506e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d136      	bne.n	80050dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	0c1b      	lsrs	r3, r3, #16
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b01      	cmp	r3, #1
 8005076:	d10c      	bne.n	8005092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	43da      	mvns	r2, r3
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	4013      	ands	r3, r2
 8005084:	b29b      	uxth	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	bf14      	ite	ne
 800508a:	2301      	movne	r3, #1
 800508c:	2300      	moveq	r3, #0
 800508e:	b2db      	uxtb	r3, r3
 8005090:	e00b      	b.n	80050aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	43da      	mvns	r2, r3
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	4013      	ands	r3, r2
 800509e:	b29b      	uxth	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	bf14      	ite	ne
 80050a4:	2301      	movne	r3, #1
 80050a6:	2300      	moveq	r3, #0
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d016      	beq.n	80050dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c8:	f043 0220 	orr.w	r2, r3, #32
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e021      	b.n	8005120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	0c1b      	lsrs	r3, r3, #16
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d10c      	bne.n	8005100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	43da      	mvns	r2, r3
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	4013      	ands	r3, r2
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	bf14      	ite	ne
 80050f8:	2301      	movne	r3, #1
 80050fa:	2300      	moveq	r3, #0
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	e00b      	b.n	8005118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	43da      	mvns	r2, r3
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	4013      	ands	r3, r2
 800510c:	b29b      	uxth	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	bf14      	ite	ne
 8005112:	2301      	movne	r3, #1
 8005114:	2300      	moveq	r3, #0
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	f47f af6d 	bne.w	8004ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005134:	e034      	b.n	80051a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f000 f8e3 	bl	8005302 <I2C_IsAcknowledgeFailed>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e034      	b.n	80051b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514c:	d028      	beq.n	80051a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800514e:	f7fe fd83 	bl	8003c58 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	429a      	cmp	r2, r3
 800515c:	d302      	bcc.n	8005164 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d11d      	bne.n	80051a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516e:	2b80      	cmp	r3, #128	; 0x80
 8005170:	d016      	beq.n	80051a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2220      	movs	r2, #32
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518c:	f043 0220 	orr.w	r2, r3, #32
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e007      	b.n	80051b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051aa:	2b80      	cmp	r3, #128	; 0x80
 80051ac:	d1c3      	bne.n	8005136 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051c4:	e034      	b.n	8005230 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f000 f89b 	bl	8005302 <I2C_IsAcknowledgeFailed>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e034      	b.n	8005240 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051dc:	d028      	beq.n	8005230 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051de:	f7fe fd3b 	bl	8003c58 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d302      	bcc.n	80051f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d11d      	bne.n	8005230 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	f003 0304 	and.w	r3, r3, #4
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d016      	beq.n	8005230 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2220      	movs	r2, #32
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521c:	f043 0220 	orr.w	r2, r3, #32
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e007      	b.n	8005240 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	f003 0304 	and.w	r3, r3, #4
 800523a:	2b04      	cmp	r3, #4
 800523c:	d1c3      	bne.n	80051c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005254:	e049      	b.n	80052ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	f003 0310 	and.w	r3, r3, #16
 8005260:	2b10      	cmp	r3, #16
 8005262:	d119      	bne.n	8005298 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f06f 0210 	mvn.w	r2, #16
 800526c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2220      	movs	r2, #32
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e030      	b.n	80052fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005298:	f7fe fcde 	bl	8003c58 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d302      	bcc.n	80052ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d11d      	bne.n	80052ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b8:	2b40      	cmp	r3, #64	; 0x40
 80052ba:	d016      	beq.n	80052ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	f043 0220 	orr.w	r2, r3, #32
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e007      	b.n	80052fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f4:	2b40      	cmp	r3, #64	; 0x40
 80052f6:	d1ae      	bne.n	8005256 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005318:	d11b      	bne.n	8005352 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005322:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2220      	movs	r2, #32
 800532e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	f043 0204 	orr.w	r2, r3, #4
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e000      	b.n	8005354 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	bc80      	pop	{r7}
 800535c:	4770      	bx	lr
	...

08005360 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e272      	b.n	8005858 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 8087 	beq.w	800548e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005380:	4b92      	ldr	r3, [pc, #584]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f003 030c 	and.w	r3, r3, #12
 8005388:	2b04      	cmp	r3, #4
 800538a:	d00c      	beq.n	80053a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800538c:	4b8f      	ldr	r3, [pc, #572]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f003 030c 	and.w	r3, r3, #12
 8005394:	2b08      	cmp	r3, #8
 8005396:	d112      	bne.n	80053be <HAL_RCC_OscConfig+0x5e>
 8005398:	4b8c      	ldr	r3, [pc, #560]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a4:	d10b      	bne.n	80053be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a6:	4b89      	ldr	r3, [pc, #548]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d06c      	beq.n	800548c <HAL_RCC_OscConfig+0x12c>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d168      	bne.n	800548c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e24c      	b.n	8005858 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c6:	d106      	bne.n	80053d6 <HAL_RCC_OscConfig+0x76>
 80053c8:	4b80      	ldr	r3, [pc, #512]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a7f      	ldr	r2, [pc, #508]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 80053ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	e02e      	b.n	8005434 <HAL_RCC_OscConfig+0xd4>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10c      	bne.n	80053f8 <HAL_RCC_OscConfig+0x98>
 80053de:	4b7b      	ldr	r3, [pc, #492]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a7a      	ldr	r2, [pc, #488]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 80053e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	4b78      	ldr	r3, [pc, #480]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a77      	ldr	r2, [pc, #476]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 80053f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	e01d      	b.n	8005434 <HAL_RCC_OscConfig+0xd4>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005400:	d10c      	bne.n	800541c <HAL_RCC_OscConfig+0xbc>
 8005402:	4b72      	ldr	r3, [pc, #456]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a71      	ldr	r2, [pc, #452]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 8005408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800540c:	6013      	str	r3, [r2, #0]
 800540e:	4b6f      	ldr	r3, [pc, #444]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a6e      	ldr	r2, [pc, #440]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 8005414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	e00b      	b.n	8005434 <HAL_RCC_OscConfig+0xd4>
 800541c:	4b6b      	ldr	r3, [pc, #428]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a6a      	ldr	r2, [pc, #424]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 8005422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	4b68      	ldr	r3, [pc, #416]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a67      	ldr	r2, [pc, #412]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 800542e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005432:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d013      	beq.n	8005464 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543c:	f7fe fc0c 	bl	8003c58 <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005442:	e008      	b.n	8005456 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005444:	f7fe fc08 	bl	8003c58 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b64      	cmp	r3, #100	; 0x64
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e200      	b.n	8005858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005456:	4b5d      	ldr	r3, [pc, #372]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d0f0      	beq.n	8005444 <HAL_RCC_OscConfig+0xe4>
 8005462:	e014      	b.n	800548e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005464:	f7fe fbf8 	bl	8003c58 <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800546c:	f7fe fbf4 	bl	8003c58 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b64      	cmp	r3, #100	; 0x64
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e1ec      	b.n	8005858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800547e:	4b53      	ldr	r3, [pc, #332]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1f0      	bne.n	800546c <HAL_RCC_OscConfig+0x10c>
 800548a:	e000      	b.n	800548e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800548c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d063      	beq.n	8005562 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800549a:	4b4c      	ldr	r3, [pc, #304]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f003 030c 	and.w	r3, r3, #12
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00b      	beq.n	80054be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80054a6:	4b49      	ldr	r3, [pc, #292]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f003 030c 	and.w	r3, r3, #12
 80054ae:	2b08      	cmp	r3, #8
 80054b0:	d11c      	bne.n	80054ec <HAL_RCC_OscConfig+0x18c>
 80054b2:	4b46      	ldr	r3, [pc, #280]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d116      	bne.n	80054ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054be:	4b43      	ldr	r3, [pc, #268]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d005      	beq.n	80054d6 <HAL_RCC_OscConfig+0x176>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d001      	beq.n	80054d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e1c0      	b.n	8005858 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054d6:	4b3d      	ldr	r3, [pc, #244]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	4939      	ldr	r1, [pc, #228]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ea:	e03a      	b.n	8005562 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d020      	beq.n	8005536 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054f4:	4b36      	ldr	r3, [pc, #216]	; (80055d0 <HAL_RCC_OscConfig+0x270>)
 80054f6:	2201      	movs	r2, #1
 80054f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054fa:	f7fe fbad 	bl	8003c58 <HAL_GetTick>
 80054fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005500:	e008      	b.n	8005514 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005502:	f7fe fba9 	bl	8003c58 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d901      	bls.n	8005514 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e1a1      	b.n	8005858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005514:	4b2d      	ldr	r3, [pc, #180]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d0f0      	beq.n	8005502 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005520:	4b2a      	ldr	r3, [pc, #168]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	4927      	ldr	r1, [pc, #156]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 8005530:	4313      	orrs	r3, r2
 8005532:	600b      	str	r3, [r1, #0]
 8005534:	e015      	b.n	8005562 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005536:	4b26      	ldr	r3, [pc, #152]	; (80055d0 <HAL_RCC_OscConfig+0x270>)
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800553c:	f7fe fb8c 	bl	8003c58 <HAL_GetTick>
 8005540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005544:	f7fe fb88 	bl	8003c58 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e180      	b.n	8005858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005556:	4b1d      	ldr	r3, [pc, #116]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1f0      	bne.n	8005544 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0308 	and.w	r3, r3, #8
 800556a:	2b00      	cmp	r3, #0
 800556c:	d03a      	beq.n	80055e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d019      	beq.n	80055aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005576:	4b17      	ldr	r3, [pc, #92]	; (80055d4 <HAL_RCC_OscConfig+0x274>)
 8005578:	2201      	movs	r2, #1
 800557a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800557c:	f7fe fb6c 	bl	8003c58 <HAL_GetTick>
 8005580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005582:	e008      	b.n	8005596 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005584:	f7fe fb68 	bl	8003c58 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e160      	b.n	8005858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005596:	4b0d      	ldr	r3, [pc, #52]	; (80055cc <HAL_RCC_OscConfig+0x26c>)
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d0f0      	beq.n	8005584 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80055a2:	2001      	movs	r0, #1
 80055a4:	f000 fae2 	bl	8005b6c <RCC_Delay>
 80055a8:	e01c      	b.n	80055e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055aa:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <HAL_RCC_OscConfig+0x274>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055b0:	f7fe fb52 	bl	8003c58 <HAL_GetTick>
 80055b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055b6:	e00f      	b.n	80055d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055b8:	f7fe fb4e 	bl	8003c58 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d908      	bls.n	80055d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e146      	b.n	8005858 <HAL_RCC_OscConfig+0x4f8>
 80055ca:	bf00      	nop
 80055cc:	40021000 	.word	0x40021000
 80055d0:	42420000 	.word	0x42420000
 80055d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055d8:	4b92      	ldr	r3, [pc, #584]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e9      	bne.n	80055b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 80a6 	beq.w	800573e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055f2:	2300      	movs	r3, #0
 80055f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055f6:	4b8b      	ldr	r3, [pc, #556]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10d      	bne.n	800561e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005602:	4b88      	ldr	r3, [pc, #544]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	4a87      	ldr	r2, [pc, #540]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 8005608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800560c:	61d3      	str	r3, [r2, #28]
 800560e:	4b85      	ldr	r3, [pc, #532]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005616:	60bb      	str	r3, [r7, #8]
 8005618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800561a:	2301      	movs	r3, #1
 800561c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800561e:	4b82      	ldr	r3, [pc, #520]	; (8005828 <HAL_RCC_OscConfig+0x4c8>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005626:	2b00      	cmp	r3, #0
 8005628:	d118      	bne.n	800565c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800562a:	4b7f      	ldr	r3, [pc, #508]	; (8005828 <HAL_RCC_OscConfig+0x4c8>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a7e      	ldr	r2, [pc, #504]	; (8005828 <HAL_RCC_OscConfig+0x4c8>)
 8005630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005636:	f7fe fb0f 	bl	8003c58 <HAL_GetTick>
 800563a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800563e:	f7fe fb0b 	bl	8003c58 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b64      	cmp	r3, #100	; 0x64
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e103      	b.n	8005858 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005650:	4b75      	ldr	r3, [pc, #468]	; (8005828 <HAL_RCC_OscConfig+0x4c8>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0f0      	beq.n	800563e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d106      	bne.n	8005672 <HAL_RCC_OscConfig+0x312>
 8005664:	4b6f      	ldr	r3, [pc, #444]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	4a6e      	ldr	r2, [pc, #440]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 800566a:	f043 0301 	orr.w	r3, r3, #1
 800566e:	6213      	str	r3, [r2, #32]
 8005670:	e02d      	b.n	80056ce <HAL_RCC_OscConfig+0x36e>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10c      	bne.n	8005694 <HAL_RCC_OscConfig+0x334>
 800567a:	4b6a      	ldr	r3, [pc, #424]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	4a69      	ldr	r2, [pc, #420]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 8005680:	f023 0301 	bic.w	r3, r3, #1
 8005684:	6213      	str	r3, [r2, #32]
 8005686:	4b67      	ldr	r3, [pc, #412]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	4a66      	ldr	r2, [pc, #408]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 800568c:	f023 0304 	bic.w	r3, r3, #4
 8005690:	6213      	str	r3, [r2, #32]
 8005692:	e01c      	b.n	80056ce <HAL_RCC_OscConfig+0x36e>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	2b05      	cmp	r3, #5
 800569a:	d10c      	bne.n	80056b6 <HAL_RCC_OscConfig+0x356>
 800569c:	4b61      	ldr	r3, [pc, #388]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	4a60      	ldr	r2, [pc, #384]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 80056a2:	f043 0304 	orr.w	r3, r3, #4
 80056a6:	6213      	str	r3, [r2, #32]
 80056a8:	4b5e      	ldr	r3, [pc, #376]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	4a5d      	ldr	r2, [pc, #372]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 80056ae:	f043 0301 	orr.w	r3, r3, #1
 80056b2:	6213      	str	r3, [r2, #32]
 80056b4:	e00b      	b.n	80056ce <HAL_RCC_OscConfig+0x36e>
 80056b6:	4b5b      	ldr	r3, [pc, #364]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	4a5a      	ldr	r2, [pc, #360]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 80056bc:	f023 0301 	bic.w	r3, r3, #1
 80056c0:	6213      	str	r3, [r2, #32]
 80056c2:	4b58      	ldr	r3, [pc, #352]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	4a57      	ldr	r2, [pc, #348]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 80056c8:	f023 0304 	bic.w	r3, r3, #4
 80056cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d015      	beq.n	8005702 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056d6:	f7fe fabf 	bl	8003c58 <HAL_GetTick>
 80056da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056dc:	e00a      	b.n	80056f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056de:	f7fe fabb 	bl	8003c58 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d901      	bls.n	80056f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e0b1      	b.n	8005858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f4:	4b4b      	ldr	r3, [pc, #300]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	f003 0302 	and.w	r3, r3, #2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d0ee      	beq.n	80056de <HAL_RCC_OscConfig+0x37e>
 8005700:	e014      	b.n	800572c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005702:	f7fe faa9 	bl	8003c58 <HAL_GetTick>
 8005706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005708:	e00a      	b.n	8005720 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800570a:	f7fe faa5 	bl	8003c58 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	f241 3288 	movw	r2, #5000	; 0x1388
 8005718:	4293      	cmp	r3, r2
 800571a:	d901      	bls.n	8005720 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e09b      	b.n	8005858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005720:	4b40      	ldr	r3, [pc, #256]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1ee      	bne.n	800570a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800572c:	7dfb      	ldrb	r3, [r7, #23]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d105      	bne.n	800573e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005732:	4b3c      	ldr	r3, [pc, #240]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	4a3b      	ldr	r2, [pc, #236]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 8005738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800573c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 8087 	beq.w	8005856 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005748:	4b36      	ldr	r3, [pc, #216]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f003 030c 	and.w	r3, r3, #12
 8005750:	2b08      	cmp	r3, #8
 8005752:	d061      	beq.n	8005818 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	69db      	ldr	r3, [r3, #28]
 8005758:	2b02      	cmp	r3, #2
 800575a:	d146      	bne.n	80057ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800575c:	4b33      	ldr	r3, [pc, #204]	; (800582c <HAL_RCC_OscConfig+0x4cc>)
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005762:	f7fe fa79 	bl	8003c58 <HAL_GetTick>
 8005766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005768:	e008      	b.n	800577c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800576a:	f7fe fa75 	bl	8003c58 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d901      	bls.n	800577c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e06d      	b.n	8005858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800577c:	4b29      	ldr	r3, [pc, #164]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1f0      	bne.n	800576a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005790:	d108      	bne.n	80057a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005792:	4b24      	ldr	r3, [pc, #144]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	4921      	ldr	r1, [pc, #132]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057a4:	4b1f      	ldr	r3, [pc, #124]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a19      	ldr	r1, [r3, #32]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	430b      	orrs	r3, r1
 80057b6:	491b      	ldr	r1, [pc, #108]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057bc:	4b1b      	ldr	r3, [pc, #108]	; (800582c <HAL_RCC_OscConfig+0x4cc>)
 80057be:	2201      	movs	r2, #1
 80057c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c2:	f7fe fa49 	bl	8003c58 <HAL_GetTick>
 80057c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057c8:	e008      	b.n	80057dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ca:	f7fe fa45 	bl	8003c58 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d901      	bls.n	80057dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e03d      	b.n	8005858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057dc:	4b11      	ldr	r3, [pc, #68]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d0f0      	beq.n	80057ca <HAL_RCC_OscConfig+0x46a>
 80057e8:	e035      	b.n	8005856 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ea:	4b10      	ldr	r3, [pc, #64]	; (800582c <HAL_RCC_OscConfig+0x4cc>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f0:	f7fe fa32 	bl	8003c58 <HAL_GetTick>
 80057f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057f6:	e008      	b.n	800580a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f8:	f7fe fa2e 	bl	8003c58 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	2b02      	cmp	r3, #2
 8005804:	d901      	bls.n	800580a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e026      	b.n	8005858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800580a:	4b06      	ldr	r3, [pc, #24]	; (8005824 <HAL_RCC_OscConfig+0x4c4>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1f0      	bne.n	80057f8 <HAL_RCC_OscConfig+0x498>
 8005816:	e01e      	b.n	8005856 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	69db      	ldr	r3, [r3, #28]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d107      	bne.n	8005830 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e019      	b.n	8005858 <HAL_RCC_OscConfig+0x4f8>
 8005824:	40021000 	.word	0x40021000
 8005828:	40007000 	.word	0x40007000
 800582c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005830:	4b0b      	ldr	r3, [pc, #44]	; (8005860 <HAL_RCC_OscConfig+0x500>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	429a      	cmp	r2, r3
 8005842:	d106      	bne.n	8005852 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800584e:	429a      	cmp	r2, r3
 8005850:	d001      	beq.n	8005856 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e000      	b.n	8005858 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	40021000 	.word	0x40021000

08005864 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e0d0      	b.n	8005a1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005878:	4b6a      	ldr	r3, [pc, #424]	; (8005a24 <HAL_RCC_ClockConfig+0x1c0>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	429a      	cmp	r2, r3
 8005884:	d910      	bls.n	80058a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005886:	4b67      	ldr	r3, [pc, #412]	; (8005a24 <HAL_RCC_ClockConfig+0x1c0>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f023 0207 	bic.w	r2, r3, #7
 800588e:	4965      	ldr	r1, [pc, #404]	; (8005a24 <HAL_RCC_ClockConfig+0x1c0>)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	4313      	orrs	r3, r2
 8005894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005896:	4b63      	ldr	r3, [pc, #396]	; (8005a24 <HAL_RCC_ClockConfig+0x1c0>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0307 	and.w	r3, r3, #7
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d001      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e0b8      	b.n	8005a1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d020      	beq.n	80058f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d005      	beq.n	80058cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058c0:	4b59      	ldr	r3, [pc, #356]	; (8005a28 <HAL_RCC_ClockConfig+0x1c4>)
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	4a58      	ldr	r2, [pc, #352]	; (8005a28 <HAL_RCC_ClockConfig+0x1c4>)
 80058c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80058ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0308 	and.w	r3, r3, #8
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d005      	beq.n	80058e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058d8:	4b53      	ldr	r3, [pc, #332]	; (8005a28 <HAL_RCC_ClockConfig+0x1c4>)
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	4a52      	ldr	r2, [pc, #328]	; (8005a28 <HAL_RCC_ClockConfig+0x1c4>)
 80058de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80058e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058e4:	4b50      	ldr	r3, [pc, #320]	; (8005a28 <HAL_RCC_ClockConfig+0x1c4>)
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	494d      	ldr	r1, [pc, #308]	; (8005a28 <HAL_RCC_ClockConfig+0x1c4>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d040      	beq.n	8005984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d107      	bne.n	800591a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800590a:	4b47      	ldr	r3, [pc, #284]	; (8005a28 <HAL_RCC_ClockConfig+0x1c4>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d115      	bne.n	8005942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e07f      	b.n	8005a1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	2b02      	cmp	r3, #2
 8005920:	d107      	bne.n	8005932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005922:	4b41      	ldr	r3, [pc, #260]	; (8005a28 <HAL_RCC_ClockConfig+0x1c4>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d109      	bne.n	8005942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e073      	b.n	8005a1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005932:	4b3d      	ldr	r3, [pc, #244]	; (8005a28 <HAL_RCC_ClockConfig+0x1c4>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e06b      	b.n	8005a1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005942:	4b39      	ldr	r3, [pc, #228]	; (8005a28 <HAL_RCC_ClockConfig+0x1c4>)
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f023 0203 	bic.w	r2, r3, #3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	4936      	ldr	r1, [pc, #216]	; (8005a28 <HAL_RCC_ClockConfig+0x1c4>)
 8005950:	4313      	orrs	r3, r2
 8005952:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005954:	f7fe f980 	bl	8003c58 <HAL_GetTick>
 8005958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800595a:	e00a      	b.n	8005972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800595c:	f7fe f97c 	bl	8003c58 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	f241 3288 	movw	r2, #5000	; 0x1388
 800596a:	4293      	cmp	r3, r2
 800596c:	d901      	bls.n	8005972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e053      	b.n	8005a1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005972:	4b2d      	ldr	r3, [pc, #180]	; (8005a28 <HAL_RCC_ClockConfig+0x1c4>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f003 020c 	and.w	r2, r3, #12
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	429a      	cmp	r2, r3
 8005982:	d1eb      	bne.n	800595c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005984:	4b27      	ldr	r3, [pc, #156]	; (8005a24 <HAL_RCC_ClockConfig+0x1c0>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0307 	and.w	r3, r3, #7
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	429a      	cmp	r2, r3
 8005990:	d210      	bcs.n	80059b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005992:	4b24      	ldr	r3, [pc, #144]	; (8005a24 <HAL_RCC_ClockConfig+0x1c0>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f023 0207 	bic.w	r2, r3, #7
 800599a:	4922      	ldr	r1, [pc, #136]	; (8005a24 <HAL_RCC_ClockConfig+0x1c0>)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	4313      	orrs	r3, r2
 80059a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a2:	4b20      	ldr	r3, [pc, #128]	; (8005a24 <HAL_RCC_ClockConfig+0x1c0>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d001      	beq.n	80059b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e032      	b.n	8005a1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d008      	beq.n	80059d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059c0:	4b19      	ldr	r3, [pc, #100]	; (8005a28 <HAL_RCC_ClockConfig+0x1c4>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	4916      	ldr	r1, [pc, #88]	; (8005a28 <HAL_RCC_ClockConfig+0x1c4>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0308 	and.w	r3, r3, #8
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d009      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80059de:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <HAL_RCC_ClockConfig+0x1c4>)
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	490e      	ldr	r1, [pc, #56]	; (8005a28 <HAL_RCC_ClockConfig+0x1c4>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80059f2:	f000 f821 	bl	8005a38 <HAL_RCC_GetSysClockFreq>
 80059f6:	4602      	mov	r2, r0
 80059f8:	4b0b      	ldr	r3, [pc, #44]	; (8005a28 <HAL_RCC_ClockConfig+0x1c4>)
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	091b      	lsrs	r3, r3, #4
 80059fe:	f003 030f 	and.w	r3, r3, #15
 8005a02:	490a      	ldr	r1, [pc, #40]	; (8005a2c <HAL_RCC_ClockConfig+0x1c8>)
 8005a04:	5ccb      	ldrb	r3, [r1, r3]
 8005a06:	fa22 f303 	lsr.w	r3, r2, r3
 8005a0a:	4a09      	ldr	r2, [pc, #36]	; (8005a30 <HAL_RCC_ClockConfig+0x1cc>)
 8005a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a0e:	4b09      	ldr	r3, [pc, #36]	; (8005a34 <HAL_RCC_ClockConfig+0x1d0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fe f8de 	bl	8003bd4 <HAL_InitTick>

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	40022000 	.word	0x40022000
 8005a28:	40021000 	.word	0x40021000
 8005a2c:	0800a7cc 	.word	0x0800a7cc
 8005a30:	20000004 	.word	0x20000004
 8005a34:	20000008 	.word	0x20000008

08005a38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	2300      	movs	r3, #0
 8005a44:	60bb      	str	r3, [r7, #8]
 8005a46:	2300      	movs	r3, #0
 8005a48:	617b      	str	r3, [r7, #20]
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005a52:	4b1e      	ldr	r3, [pc, #120]	; (8005acc <HAL_RCC_GetSysClockFreq+0x94>)
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f003 030c 	and.w	r3, r3, #12
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	d002      	beq.n	8005a68 <HAL_RCC_GetSysClockFreq+0x30>
 8005a62:	2b08      	cmp	r3, #8
 8005a64:	d003      	beq.n	8005a6e <HAL_RCC_GetSysClockFreq+0x36>
 8005a66:	e027      	b.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a68:	4b19      	ldr	r3, [pc, #100]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a6a:	613b      	str	r3, [r7, #16]
      break;
 8005a6c:	e027      	b.n	8005abe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	0c9b      	lsrs	r3, r3, #18
 8005a72:	f003 030f 	and.w	r3, r3, #15
 8005a76:	4a17      	ldr	r2, [pc, #92]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005a78:	5cd3      	ldrb	r3, [r2, r3]
 8005a7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d010      	beq.n	8005aa8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005a86:	4b11      	ldr	r3, [pc, #68]	; (8005acc <HAL_RCC_GetSysClockFreq+0x94>)
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	0c5b      	lsrs	r3, r3, #17
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	4a11      	ldr	r2, [pc, #68]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005a92:	5cd3      	ldrb	r3, [r2, r3]
 8005a94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a0d      	ldr	r2, [pc, #52]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a9a:	fb03 f202 	mul.w	r2, r3, r2
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa4:	617b      	str	r3, [r7, #20]
 8005aa6:	e004      	b.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a0c      	ldr	r2, [pc, #48]	; (8005adc <HAL_RCC_GetSysClockFreq+0xa4>)
 8005aac:	fb02 f303 	mul.w	r3, r2, r3
 8005ab0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	613b      	str	r3, [r7, #16]
      break;
 8005ab6:	e002      	b.n	8005abe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ab8:	4b05      	ldr	r3, [pc, #20]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005aba:	613b      	str	r3, [r7, #16]
      break;
 8005abc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005abe:	693b      	ldr	r3, [r7, #16]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	371c      	adds	r7, #28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bc80      	pop	{r7}
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	40021000 	.word	0x40021000
 8005ad0:	007a1200 	.word	0x007a1200
 8005ad4:	0800a7e4 	.word	0x0800a7e4
 8005ad8:	0800a7f4 	.word	0x0800a7f4
 8005adc:	003d0900 	.word	0x003d0900

08005ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ae4:	4b02      	ldr	r3, [pc, #8]	; (8005af0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bc80      	pop	{r7}
 8005aee:	4770      	bx	lr
 8005af0:	20000004 	.word	0x20000004

08005af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005af8:	f7ff fff2 	bl	8005ae0 <HAL_RCC_GetHCLKFreq>
 8005afc:	4602      	mov	r2, r0
 8005afe:	4b05      	ldr	r3, [pc, #20]	; (8005b14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	0a1b      	lsrs	r3, r3, #8
 8005b04:	f003 0307 	and.w	r3, r3, #7
 8005b08:	4903      	ldr	r1, [pc, #12]	; (8005b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b0a:	5ccb      	ldrb	r3, [r1, r3]
 8005b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	40021000 	.word	0x40021000
 8005b18:	0800a7dc 	.word	0x0800a7dc

08005b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b20:	f7ff ffde 	bl	8005ae0 <HAL_RCC_GetHCLKFreq>
 8005b24:	4602      	mov	r2, r0
 8005b26:	4b05      	ldr	r3, [pc, #20]	; (8005b3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	0adb      	lsrs	r3, r3, #11
 8005b2c:	f003 0307 	and.w	r3, r3, #7
 8005b30:	4903      	ldr	r1, [pc, #12]	; (8005b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b32:	5ccb      	ldrb	r3, [r1, r3]
 8005b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	0800a7dc 	.word	0x0800a7dc

08005b44 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005b48:	4b06      	ldr	r3, [pc, #24]	; (8005b64 <HAL_RCC_NMI_IRQHandler+0x20>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b50:	2b80      	cmp	r3, #128	; 0x80
 8005b52:	d104      	bne.n	8005b5e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005b54:	f000 f828 	bl	8005ba8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005b58:	4b03      	ldr	r3, [pc, #12]	; (8005b68 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005b5a:	2280      	movs	r2, #128	; 0x80
 8005b5c:	701a      	strb	r2, [r3, #0]
  }
}
 8005b5e:	bf00      	nop
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	40021000 	.word	0x40021000
 8005b68:	4002100a 	.word	0x4002100a

08005b6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005b74:	4b0a      	ldr	r3, [pc, #40]	; (8005ba0 <RCC_Delay+0x34>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a0a      	ldr	r2, [pc, #40]	; (8005ba4 <RCC_Delay+0x38>)
 8005b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7e:	0a5b      	lsrs	r3, r3, #9
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	fb02 f303 	mul.w	r3, r2, r3
 8005b86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005b88:	bf00      	nop
  }
  while (Delay --);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	1e5a      	subs	r2, r3, #1
 8005b8e:	60fa      	str	r2, [r7, #12]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1f9      	bne.n	8005b88 <RCC_Delay+0x1c>
}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bc80      	pop	{r7}
 8005b9e:	4770      	bx	lr
 8005ba0:	20000004 	.word	0x20000004
 8005ba4:	10624dd3 	.word	0x10624dd3

08005ba8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8005bac:	bf00      	nop
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bc80      	pop	{r7}
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e041      	b.n	8005c4a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d106      	bne.n	8005be0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7fd fec6 	bl	800396c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	3304      	adds	r3, #4
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	4610      	mov	r0, r2
 8005bf4:	f000 f992 	bl	8005f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3708      	adds	r7, #8
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d109      	bne.n	8005c78 <HAL_TIM_PWM_Start+0x24>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	bf14      	ite	ne
 8005c70:	2301      	movne	r3, #1
 8005c72:	2300      	moveq	r3, #0
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	e022      	b.n	8005cbe <HAL_TIM_PWM_Start+0x6a>
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	2b04      	cmp	r3, #4
 8005c7c:	d109      	bne.n	8005c92 <HAL_TIM_PWM_Start+0x3e>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	bf14      	ite	ne
 8005c8a:	2301      	movne	r3, #1
 8005c8c:	2300      	moveq	r3, #0
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	e015      	b.n	8005cbe <HAL_TIM_PWM_Start+0x6a>
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d109      	bne.n	8005cac <HAL_TIM_PWM_Start+0x58>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	bf14      	ite	ne
 8005ca4:	2301      	movne	r3, #1
 8005ca6:	2300      	moveq	r3, #0
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	e008      	b.n	8005cbe <HAL_TIM_PWM_Start+0x6a>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	bf14      	ite	ne
 8005cb8:	2301      	movne	r3, #1
 8005cba:	2300      	moveq	r3, #0
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e05e      	b.n	8005d84 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d104      	bne.n	8005cd6 <HAL_TIM_PWM_Start+0x82>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cd4:	e013      	b.n	8005cfe <HAL_TIM_PWM_Start+0xaa>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	d104      	bne.n	8005ce6 <HAL_TIM_PWM_Start+0x92>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ce4:	e00b      	b.n	8005cfe <HAL_TIM_PWM_Start+0xaa>
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b08      	cmp	r3, #8
 8005cea:	d104      	bne.n	8005cf6 <HAL_TIM_PWM_Start+0xa2>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cf4:	e003      	b.n	8005cfe <HAL_TIM_PWM_Start+0xaa>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2201      	movs	r2, #1
 8005d04:	6839      	ldr	r1, [r7, #0]
 8005d06:	4618      	mov	r0, r3
 8005d08:	f000 faf2 	bl	80062f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a1e      	ldr	r2, [pc, #120]	; (8005d8c <HAL_TIM_PWM_Start+0x138>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d107      	bne.n	8005d26 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a18      	ldr	r2, [pc, #96]	; (8005d8c <HAL_TIM_PWM_Start+0x138>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d00e      	beq.n	8005d4e <HAL_TIM_PWM_Start+0xfa>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d38:	d009      	beq.n	8005d4e <HAL_TIM_PWM_Start+0xfa>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a14      	ldr	r2, [pc, #80]	; (8005d90 <HAL_TIM_PWM_Start+0x13c>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d004      	beq.n	8005d4e <HAL_TIM_PWM_Start+0xfa>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a12      	ldr	r2, [pc, #72]	; (8005d94 <HAL_TIM_PWM_Start+0x140>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d111      	bne.n	8005d72 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2b06      	cmp	r3, #6
 8005d5e:	d010      	beq.n	8005d82 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0201 	orr.w	r2, r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d70:	e007      	b.n	8005d82 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f042 0201 	orr.w	r2, r2, #1
 8005d80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	40012c00 	.word	0x40012c00
 8005d90:	40000400 	.word	0x40000400
 8005d94:	40000800 	.word	0x40000800

08005d98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d101      	bne.n	8005db6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005db2:	2302      	movs	r3, #2
 8005db4:	e0ae      	b.n	8005f14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b0c      	cmp	r3, #12
 8005dc2:	f200 809f 	bhi.w	8005f04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005dc6:	a201      	add	r2, pc, #4	; (adr r2, 8005dcc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dcc:	08005e01 	.word	0x08005e01
 8005dd0:	08005f05 	.word	0x08005f05
 8005dd4:	08005f05 	.word	0x08005f05
 8005dd8:	08005f05 	.word	0x08005f05
 8005ddc:	08005e41 	.word	0x08005e41
 8005de0:	08005f05 	.word	0x08005f05
 8005de4:	08005f05 	.word	0x08005f05
 8005de8:	08005f05 	.word	0x08005f05
 8005dec:	08005e83 	.word	0x08005e83
 8005df0:	08005f05 	.word	0x08005f05
 8005df4:	08005f05 	.word	0x08005f05
 8005df8:	08005f05 	.word	0x08005f05
 8005dfc:	08005ec3 	.word	0x08005ec3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68b9      	ldr	r1, [r7, #8]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 f8ea 	bl	8005fe0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699a      	ldr	r2, [r3, #24]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0208 	orr.w	r2, r2, #8
 8005e1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	699a      	ldr	r2, [r3, #24]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 0204 	bic.w	r2, r2, #4
 8005e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6999      	ldr	r1, [r3, #24]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	691a      	ldr	r2, [r3, #16]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	619a      	str	r2, [r3, #24]
      break;
 8005e3e:	e064      	b.n	8005f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68b9      	ldr	r1, [r7, #8]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 f930 	bl	80060ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	699a      	ldr	r2, [r3, #24]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	699a      	ldr	r2, [r3, #24]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6999      	ldr	r1, [r3, #24]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	021a      	lsls	r2, r3, #8
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	619a      	str	r2, [r3, #24]
      break;
 8005e80:	e043      	b.n	8005f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68b9      	ldr	r1, [r7, #8]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 f979 	bl	8006180 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	69da      	ldr	r2, [r3, #28]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f042 0208 	orr.w	r2, r2, #8
 8005e9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	69da      	ldr	r2, [r3, #28]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0204 	bic.w	r2, r2, #4
 8005eac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69d9      	ldr	r1, [r3, #28]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	691a      	ldr	r2, [r3, #16]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	61da      	str	r2, [r3, #28]
      break;
 8005ec0:	e023      	b.n	8005f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68b9      	ldr	r1, [r7, #8]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f000 f9c3 	bl	8006254 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	69da      	ldr	r2, [r3, #28]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005edc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	69da      	ldr	r2, [r3, #28]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69d9      	ldr	r1, [r3, #28]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	021a      	lsls	r2, r3, #8
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	61da      	str	r2, [r3, #28]
      break;
 8005f02:	e002      	b.n	8005f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	75fb      	strb	r3, [r7, #23]
      break;
 8005f08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3718      	adds	r7, #24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a29      	ldr	r2, [pc, #164]	; (8005fd4 <TIM_Base_SetConfig+0xb8>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d00b      	beq.n	8005f4c <TIM_Base_SetConfig+0x30>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f3a:	d007      	beq.n	8005f4c <TIM_Base_SetConfig+0x30>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a26      	ldr	r2, [pc, #152]	; (8005fd8 <TIM_Base_SetConfig+0xbc>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d003      	beq.n	8005f4c <TIM_Base_SetConfig+0x30>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a25      	ldr	r2, [pc, #148]	; (8005fdc <TIM_Base_SetConfig+0xc0>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d108      	bne.n	8005f5e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a1c      	ldr	r2, [pc, #112]	; (8005fd4 <TIM_Base_SetConfig+0xb8>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d00b      	beq.n	8005f7e <TIM_Base_SetConfig+0x62>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f6c:	d007      	beq.n	8005f7e <TIM_Base_SetConfig+0x62>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a19      	ldr	r2, [pc, #100]	; (8005fd8 <TIM_Base_SetConfig+0xbc>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d003      	beq.n	8005f7e <TIM_Base_SetConfig+0x62>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a18      	ldr	r2, [pc, #96]	; (8005fdc <TIM_Base_SetConfig+0xc0>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d108      	bne.n	8005f90 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	689a      	ldr	r2, [r3, #8]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a07      	ldr	r2, [pc, #28]	; (8005fd4 <TIM_Base_SetConfig+0xb8>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d103      	bne.n	8005fc4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	691a      	ldr	r2, [r3, #16]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	615a      	str	r2, [r3, #20]
}
 8005fca:	bf00      	nop
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bc80      	pop	{r7}
 8005fd2:	4770      	bx	lr
 8005fd4:	40012c00 	.word	0x40012c00
 8005fd8:	40000400 	.word	0x40000400
 8005fdc:	40000800 	.word	0x40000800

08005fe0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b087      	sub	sp, #28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a1b      	ldr	r3, [r3, #32]
 8005ff4:	f023 0201 	bic.w	r2, r3, #1
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 0303 	bic.w	r3, r3, #3
 8006016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f023 0302 	bic.w	r3, r3, #2
 8006028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	4313      	orrs	r3, r2
 8006032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a1c      	ldr	r2, [pc, #112]	; (80060a8 <TIM_OC1_SetConfig+0xc8>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d10c      	bne.n	8006056 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f023 0308 	bic.w	r3, r3, #8
 8006042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	4313      	orrs	r3, r2
 800604c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f023 0304 	bic.w	r3, r3, #4
 8006054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a13      	ldr	r2, [pc, #76]	; (80060a8 <TIM_OC1_SetConfig+0xc8>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d111      	bne.n	8006082 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800606c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	4313      	orrs	r3, r2
 8006076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	4313      	orrs	r3, r2
 8006080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	621a      	str	r2, [r3, #32]
}
 800609c:	bf00      	nop
 800609e:	371c      	adds	r7, #28
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bc80      	pop	{r7}
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	40012c00 	.word	0x40012c00

080060ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	f023 0210 	bic.w	r2, r3, #16
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	021b      	lsls	r3, r3, #8
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f023 0320 	bic.w	r3, r3, #32
 80060f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	011b      	lsls	r3, r3, #4
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	4313      	orrs	r3, r2
 8006102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a1d      	ldr	r2, [pc, #116]	; (800617c <TIM_OC2_SetConfig+0xd0>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d10d      	bne.n	8006128 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	011b      	lsls	r3, r3, #4
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	4313      	orrs	r3, r2
 800611e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006126:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a14      	ldr	r2, [pc, #80]	; (800617c <TIM_OC2_SetConfig+0xd0>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d113      	bne.n	8006158 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800613e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	4313      	orrs	r3, r2
 800614a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	4313      	orrs	r3, r2
 8006156:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	621a      	str	r2, [r3, #32]
}
 8006172:	bf00      	nop
 8006174:	371c      	adds	r7, #28
 8006176:	46bd      	mov	sp, r7
 8006178:	bc80      	pop	{r7}
 800617a:	4770      	bx	lr
 800617c:	40012c00 	.word	0x40012c00

08006180 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006180:	b480      	push	{r7}
 8006182:	b087      	sub	sp, #28
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 0303 	bic.w	r3, r3, #3
 80061b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	4313      	orrs	r3, r2
 80061c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	021b      	lsls	r3, r3, #8
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a1d      	ldr	r2, [pc, #116]	; (8006250 <TIM_OC3_SetConfig+0xd0>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d10d      	bne.n	80061fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	021b      	lsls	r3, r3, #8
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a14      	ldr	r2, [pc, #80]	; (8006250 <TIM_OC3_SetConfig+0xd0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d113      	bne.n	800622a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	011b      	lsls	r3, r3, #4
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	4313      	orrs	r3, r2
 800621c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	011b      	lsls	r3, r3, #4
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	4313      	orrs	r3, r2
 8006228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	621a      	str	r2, [r3, #32]
}
 8006244:	bf00      	nop
 8006246:	371c      	adds	r7, #28
 8006248:	46bd      	mov	sp, r7
 800624a:	bc80      	pop	{r7}
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	40012c00 	.word	0x40012c00

08006254 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a1b      	ldr	r3, [r3, #32]
 8006268:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800628a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	021b      	lsls	r3, r3, #8
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	4313      	orrs	r3, r2
 8006296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800629e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	031b      	lsls	r3, r3, #12
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a0f      	ldr	r2, [pc, #60]	; (80062ec <TIM_OC4_SetConfig+0x98>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d109      	bne.n	80062c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	019b      	lsls	r3, r3, #6
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	621a      	str	r2, [r3, #32]
}
 80062e2:	bf00      	nop
 80062e4:	371c      	adds	r7, #28
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bc80      	pop	{r7}
 80062ea:	4770      	bx	lr
 80062ec:	40012c00 	.word	0x40012c00

080062f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b087      	sub	sp, #28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f003 031f 	and.w	r3, r3, #31
 8006302:	2201      	movs	r2, #1
 8006304:	fa02 f303 	lsl.w	r3, r2, r3
 8006308:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6a1a      	ldr	r2, [r3, #32]
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	43db      	mvns	r3, r3
 8006312:	401a      	ands	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6a1a      	ldr	r2, [r3, #32]
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f003 031f 	and.w	r3, r3, #31
 8006322:	6879      	ldr	r1, [r7, #4]
 8006324:	fa01 f303 	lsl.w	r3, r1, r3
 8006328:	431a      	orrs	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	621a      	str	r2, [r3, #32]
}
 800632e:	bf00      	nop
 8006330:	371c      	adds	r7, #28
 8006332:	46bd      	mov	sp, r7
 8006334:	bc80      	pop	{r7}
 8006336:	4770      	bx	lr

08006338 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800634c:	2302      	movs	r3, #2
 800634e:	e046      	b.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006376:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	4313      	orrs	r3, r2
 8006380:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a16      	ldr	r2, [pc, #88]	; (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d00e      	beq.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800639c:	d009      	beq.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a12      	ldr	r2, [pc, #72]	; (80063ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d004      	beq.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a10      	ldr	r2, [pc, #64]	; (80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d10c      	bne.n	80063cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bc80      	pop	{r7}
 80063e6:	4770      	bx	lr
 80063e8:	40012c00 	.word	0x40012c00
 80063ec:	40000400 	.word	0x40000400
 80063f0:	40000800 	.word	0x40000800

080063f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006408:	2b01      	cmp	r3, #1
 800640a:	d101      	bne.n	8006410 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800640c:	2302      	movs	r3, #2
 800640e:	e03d      	b.n	800648c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4313      	orrs	r3, r2
 800644e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	4313      	orrs	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	4313      	orrs	r3, r2
 8006478:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	bc80      	pop	{r7}
 8006494:	4770      	bx	lr

08006496 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b082      	sub	sp, #8
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e042      	b.n	800652e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d106      	bne.n	80064c2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7fd fb01 	bl	8003ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2224      	movs	r2, #36	; 0x24
 80064c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68da      	ldr	r2, [r3, #12]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064d8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f91c 	bl	8006718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691a      	ldr	r2, [r3, #16]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	695a      	ldr	r2, [r3, #20]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064fe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800650e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2220      	movs	r2, #32
 800651a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2220      	movs	r2, #32
 8006522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b08a      	sub	sp, #40	; 0x28
 800653a:	af02      	add	r7, sp, #8
 800653c:	60f8      	str	r0, [r7, #12]
 800653e:	60b9      	str	r1, [r7, #8]
 8006540:	603b      	str	r3, [r7, #0]
 8006542:	4613      	mov	r3, r2
 8006544:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006546:	2300      	movs	r3, #0
 8006548:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b20      	cmp	r3, #32
 8006554:	d16d      	bne.n	8006632 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d002      	beq.n	8006562 <HAL_UART_Transmit+0x2c>
 800655c:	88fb      	ldrh	r3, [r7, #6]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e066      	b.n	8006634 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2221      	movs	r2, #33	; 0x21
 8006570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006574:	f7fd fb70 	bl	8003c58 <HAL_GetTick>
 8006578:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	88fa      	ldrh	r2, [r7, #6]
 800657e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	88fa      	ldrh	r2, [r7, #6]
 8006584:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800658e:	d108      	bne.n	80065a2 <HAL_UART_Transmit+0x6c>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d104      	bne.n	80065a2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006598:	2300      	movs	r3, #0
 800659a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	61bb      	str	r3, [r7, #24]
 80065a0:	e003      	b.n	80065aa <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065a6:	2300      	movs	r3, #0
 80065a8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80065aa:	e02a      	b.n	8006602 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	2200      	movs	r2, #0
 80065b4:	2180      	movs	r1, #128	; 0x80
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f000 f840 	bl	800663c <UART_WaitOnFlagUntilTimeout>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e036      	b.n	8006634 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10b      	bne.n	80065e4 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	461a      	mov	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065da:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	3302      	adds	r3, #2
 80065e0:	61bb      	str	r3, [r7, #24]
 80065e2:	e007      	b.n	80065f4 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	781a      	ldrb	r2, [r3, #0]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	3301      	adds	r3, #1
 80065f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	3b01      	subs	r3, #1
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006606:	b29b      	uxth	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1cf      	bne.n	80065ac <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	2200      	movs	r2, #0
 8006614:	2140      	movs	r1, #64	; 0x40
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 f810 	bl	800663c <UART_WaitOnFlagUntilTimeout>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e006      	b.n	8006634 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2220      	movs	r2, #32
 800662a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	e000      	b.n	8006634 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006632:	2302      	movs	r3, #2
  }
}
 8006634:	4618      	mov	r0, r3
 8006636:	3720      	adds	r7, #32
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b090      	sub	sp, #64	; 0x40
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	603b      	str	r3, [r7, #0]
 8006648:	4613      	mov	r3, r2
 800664a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800664c:	e050      	b.n	80066f0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800664e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006654:	d04c      	beq.n	80066f0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006658:	2b00      	cmp	r3, #0
 800665a:	d007      	beq.n	800666c <UART_WaitOnFlagUntilTimeout+0x30>
 800665c:	f7fd fafc 	bl	8003c58 <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006668:	429a      	cmp	r2, r3
 800666a:	d241      	bcs.n	80066f0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	330c      	adds	r3, #12
 8006672:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006676:	e853 3f00 	ldrex	r3, [r3]
 800667a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800667c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	330c      	adds	r3, #12
 800668a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800668c:	637a      	str	r2, [r7, #52]	; 0x34
 800668e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006690:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006694:	e841 2300 	strex	r3, r2, [r1]
 8006698:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800669a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1e5      	bne.n	800666c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	3314      	adds	r3, #20
 80066a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	e853 3f00 	ldrex	r3, [r3]
 80066ae:	613b      	str	r3, [r7, #16]
   return(result);
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f023 0301 	bic.w	r3, r3, #1
 80066b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	3314      	adds	r3, #20
 80066be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066c0:	623a      	str	r2, [r7, #32]
 80066c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c4:	69f9      	ldr	r1, [r7, #28]
 80066c6:	6a3a      	ldr	r2, [r7, #32]
 80066c8:	e841 2300 	strex	r3, r2, [r1]
 80066cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1e5      	bne.n	80066a0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2220      	movs	r2, #32
 80066d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2220      	movs	r2, #32
 80066e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e00f      	b.n	8006710 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	4013      	ands	r3, r2
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	bf0c      	ite	eq
 8006700:	2301      	moveq	r3, #1
 8006702:	2300      	movne	r3, #0
 8006704:	b2db      	uxtb	r3, r3
 8006706:	461a      	mov	r2, r3
 8006708:	79fb      	ldrb	r3, [r7, #7]
 800670a:	429a      	cmp	r2, r3
 800670c:	d09f      	beq.n	800664e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3740      	adds	r7, #64	; 0x40
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	430a      	orrs	r2, r1
 8006734:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	689a      	ldr	r2, [r3, #8]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	431a      	orrs	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	695b      	ldr	r3, [r3, #20]
 8006744:	4313      	orrs	r3, r2
 8006746:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006752:	f023 030c 	bic.w	r3, r3, #12
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	6812      	ldr	r2, [r2, #0]
 800675a:	68b9      	ldr	r1, [r7, #8]
 800675c:	430b      	orrs	r3, r1
 800675e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	699a      	ldr	r2, [r3, #24]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a2c      	ldr	r2, [pc, #176]	; (800682c <UART_SetConfig+0x114>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d103      	bne.n	8006788 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006780:	f7ff f9cc 	bl	8005b1c <HAL_RCC_GetPCLK2Freq>
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	e002      	b.n	800678e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006788:	f7ff f9b4 	bl	8005af4 <HAL_RCC_GetPCLK1Freq>
 800678c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	4613      	mov	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	009a      	lsls	r2, r3, #2
 8006798:	441a      	add	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a4:	4a22      	ldr	r2, [pc, #136]	; (8006830 <UART_SetConfig+0x118>)
 80067a6:	fba2 2303 	umull	r2, r3, r2, r3
 80067aa:	095b      	lsrs	r3, r3, #5
 80067ac:	0119      	lsls	r1, r3, #4
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	4613      	mov	r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	009a      	lsls	r2, r3, #2
 80067b8:	441a      	add	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80067c4:	4b1a      	ldr	r3, [pc, #104]	; (8006830 <UART_SetConfig+0x118>)
 80067c6:	fba3 0302 	umull	r0, r3, r3, r2
 80067ca:	095b      	lsrs	r3, r3, #5
 80067cc:	2064      	movs	r0, #100	; 0x64
 80067ce:	fb00 f303 	mul.w	r3, r0, r3
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	011b      	lsls	r3, r3, #4
 80067d6:	3332      	adds	r3, #50	; 0x32
 80067d8:	4a15      	ldr	r2, [pc, #84]	; (8006830 <UART_SetConfig+0x118>)
 80067da:	fba2 2303 	umull	r2, r3, r2, r3
 80067de:	095b      	lsrs	r3, r3, #5
 80067e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067e4:	4419      	add	r1, r3
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	4613      	mov	r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	009a      	lsls	r2, r3, #2
 80067f0:	441a      	add	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80067fc:	4b0c      	ldr	r3, [pc, #48]	; (8006830 <UART_SetConfig+0x118>)
 80067fe:	fba3 0302 	umull	r0, r3, r3, r2
 8006802:	095b      	lsrs	r3, r3, #5
 8006804:	2064      	movs	r0, #100	; 0x64
 8006806:	fb00 f303 	mul.w	r3, r0, r3
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	011b      	lsls	r3, r3, #4
 800680e:	3332      	adds	r3, #50	; 0x32
 8006810:	4a07      	ldr	r2, [pc, #28]	; (8006830 <UART_SetConfig+0x118>)
 8006812:	fba2 2303 	umull	r2, r3, r2, r3
 8006816:	095b      	lsrs	r3, r3, #5
 8006818:	f003 020f 	and.w	r2, r3, #15
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	440a      	add	r2, r1
 8006822:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006824:	bf00      	nop
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	40013800 	.word	0x40013800
 8006830:	51eb851f 	.word	0x51eb851f

08006834 <__errno>:
 8006834:	4b01      	ldr	r3, [pc, #4]	; (800683c <__errno+0x8>)
 8006836:	6818      	ldr	r0, [r3, #0]
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	20000010 	.word	0x20000010

08006840 <__libc_init_array>:
 8006840:	b570      	push	{r4, r5, r6, lr}
 8006842:	2600      	movs	r6, #0
 8006844:	4d0c      	ldr	r5, [pc, #48]	; (8006878 <__libc_init_array+0x38>)
 8006846:	4c0d      	ldr	r4, [pc, #52]	; (800687c <__libc_init_array+0x3c>)
 8006848:	1b64      	subs	r4, r4, r5
 800684a:	10a4      	asrs	r4, r4, #2
 800684c:	42a6      	cmp	r6, r4
 800684e:	d109      	bne.n	8006864 <__libc_init_array+0x24>
 8006850:	f003 ff8c 	bl	800a76c <_init>
 8006854:	2600      	movs	r6, #0
 8006856:	4d0a      	ldr	r5, [pc, #40]	; (8006880 <__libc_init_array+0x40>)
 8006858:	4c0a      	ldr	r4, [pc, #40]	; (8006884 <__libc_init_array+0x44>)
 800685a:	1b64      	subs	r4, r4, r5
 800685c:	10a4      	asrs	r4, r4, #2
 800685e:	42a6      	cmp	r6, r4
 8006860:	d105      	bne.n	800686e <__libc_init_array+0x2e>
 8006862:	bd70      	pop	{r4, r5, r6, pc}
 8006864:	f855 3b04 	ldr.w	r3, [r5], #4
 8006868:	4798      	blx	r3
 800686a:	3601      	adds	r6, #1
 800686c:	e7ee      	b.n	800684c <__libc_init_array+0xc>
 800686e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006872:	4798      	blx	r3
 8006874:	3601      	adds	r6, #1
 8006876:	e7f2      	b.n	800685e <__libc_init_array+0x1e>
 8006878:	0800ac48 	.word	0x0800ac48
 800687c:	0800ac48 	.word	0x0800ac48
 8006880:	0800ac48 	.word	0x0800ac48
 8006884:	0800ac4c 	.word	0x0800ac4c

08006888 <memset>:
 8006888:	4603      	mov	r3, r0
 800688a:	4402      	add	r2, r0
 800688c:	4293      	cmp	r3, r2
 800688e:	d100      	bne.n	8006892 <memset+0xa>
 8006890:	4770      	bx	lr
 8006892:	f803 1b01 	strb.w	r1, [r3], #1
 8006896:	e7f9      	b.n	800688c <memset+0x4>

08006898 <__cvt>:
 8006898:	2b00      	cmp	r3, #0
 800689a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800689e:	461f      	mov	r7, r3
 80068a0:	bfbb      	ittet	lt
 80068a2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80068a6:	461f      	movlt	r7, r3
 80068a8:	2300      	movge	r3, #0
 80068aa:	232d      	movlt	r3, #45	; 0x2d
 80068ac:	b088      	sub	sp, #32
 80068ae:	4614      	mov	r4, r2
 80068b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80068b2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80068b4:	7013      	strb	r3, [r2, #0]
 80068b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80068b8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80068bc:	f023 0820 	bic.w	r8, r3, #32
 80068c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80068c4:	d005      	beq.n	80068d2 <__cvt+0x3a>
 80068c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80068ca:	d100      	bne.n	80068ce <__cvt+0x36>
 80068cc:	3501      	adds	r5, #1
 80068ce:	2302      	movs	r3, #2
 80068d0:	e000      	b.n	80068d4 <__cvt+0x3c>
 80068d2:	2303      	movs	r3, #3
 80068d4:	aa07      	add	r2, sp, #28
 80068d6:	9204      	str	r2, [sp, #16]
 80068d8:	aa06      	add	r2, sp, #24
 80068da:	e9cd a202 	strd	sl, r2, [sp, #8]
 80068de:	e9cd 3500 	strd	r3, r5, [sp]
 80068e2:	4622      	mov	r2, r4
 80068e4:	463b      	mov	r3, r7
 80068e6:	f000 fce3 	bl	80072b0 <_dtoa_r>
 80068ea:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80068ee:	4606      	mov	r6, r0
 80068f0:	d102      	bne.n	80068f8 <__cvt+0x60>
 80068f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068f4:	07db      	lsls	r3, r3, #31
 80068f6:	d522      	bpl.n	800693e <__cvt+0xa6>
 80068f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80068fc:	eb06 0905 	add.w	r9, r6, r5
 8006900:	d110      	bne.n	8006924 <__cvt+0x8c>
 8006902:	7833      	ldrb	r3, [r6, #0]
 8006904:	2b30      	cmp	r3, #48	; 0x30
 8006906:	d10a      	bne.n	800691e <__cvt+0x86>
 8006908:	2200      	movs	r2, #0
 800690a:	2300      	movs	r3, #0
 800690c:	4620      	mov	r0, r4
 800690e:	4639      	mov	r1, r7
 8006910:	f7fa f84a 	bl	80009a8 <__aeabi_dcmpeq>
 8006914:	b918      	cbnz	r0, 800691e <__cvt+0x86>
 8006916:	f1c5 0501 	rsb	r5, r5, #1
 800691a:	f8ca 5000 	str.w	r5, [sl]
 800691e:	f8da 3000 	ldr.w	r3, [sl]
 8006922:	4499      	add	r9, r3
 8006924:	2200      	movs	r2, #0
 8006926:	2300      	movs	r3, #0
 8006928:	4620      	mov	r0, r4
 800692a:	4639      	mov	r1, r7
 800692c:	f7fa f83c 	bl	80009a8 <__aeabi_dcmpeq>
 8006930:	b108      	cbz	r0, 8006936 <__cvt+0x9e>
 8006932:	f8cd 901c 	str.w	r9, [sp, #28]
 8006936:	2230      	movs	r2, #48	; 0x30
 8006938:	9b07      	ldr	r3, [sp, #28]
 800693a:	454b      	cmp	r3, r9
 800693c:	d307      	bcc.n	800694e <__cvt+0xb6>
 800693e:	4630      	mov	r0, r6
 8006940:	9b07      	ldr	r3, [sp, #28]
 8006942:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006944:	1b9b      	subs	r3, r3, r6
 8006946:	6013      	str	r3, [r2, #0]
 8006948:	b008      	add	sp, #32
 800694a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800694e:	1c59      	adds	r1, r3, #1
 8006950:	9107      	str	r1, [sp, #28]
 8006952:	701a      	strb	r2, [r3, #0]
 8006954:	e7f0      	b.n	8006938 <__cvt+0xa0>

08006956 <__exponent>:
 8006956:	4603      	mov	r3, r0
 8006958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800695a:	2900      	cmp	r1, #0
 800695c:	f803 2b02 	strb.w	r2, [r3], #2
 8006960:	bfb6      	itet	lt
 8006962:	222d      	movlt	r2, #45	; 0x2d
 8006964:	222b      	movge	r2, #43	; 0x2b
 8006966:	4249      	neglt	r1, r1
 8006968:	2909      	cmp	r1, #9
 800696a:	7042      	strb	r2, [r0, #1]
 800696c:	dd2b      	ble.n	80069c6 <__exponent+0x70>
 800696e:	f10d 0407 	add.w	r4, sp, #7
 8006972:	46a4      	mov	ip, r4
 8006974:	270a      	movs	r7, #10
 8006976:	fb91 f6f7 	sdiv	r6, r1, r7
 800697a:	460a      	mov	r2, r1
 800697c:	46a6      	mov	lr, r4
 800697e:	fb07 1516 	mls	r5, r7, r6, r1
 8006982:	2a63      	cmp	r2, #99	; 0x63
 8006984:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006988:	4631      	mov	r1, r6
 800698a:	f104 34ff 	add.w	r4, r4, #4294967295
 800698e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006992:	dcf0      	bgt.n	8006976 <__exponent+0x20>
 8006994:	3130      	adds	r1, #48	; 0x30
 8006996:	f1ae 0502 	sub.w	r5, lr, #2
 800699a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800699e:	4629      	mov	r1, r5
 80069a0:	1c44      	adds	r4, r0, #1
 80069a2:	4561      	cmp	r1, ip
 80069a4:	d30a      	bcc.n	80069bc <__exponent+0x66>
 80069a6:	f10d 0209 	add.w	r2, sp, #9
 80069aa:	eba2 020e 	sub.w	r2, r2, lr
 80069ae:	4565      	cmp	r5, ip
 80069b0:	bf88      	it	hi
 80069b2:	2200      	movhi	r2, #0
 80069b4:	4413      	add	r3, r2
 80069b6:	1a18      	subs	r0, r3, r0
 80069b8:	b003      	add	sp, #12
 80069ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069c0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80069c4:	e7ed      	b.n	80069a2 <__exponent+0x4c>
 80069c6:	2330      	movs	r3, #48	; 0x30
 80069c8:	3130      	adds	r1, #48	; 0x30
 80069ca:	7083      	strb	r3, [r0, #2]
 80069cc:	70c1      	strb	r1, [r0, #3]
 80069ce:	1d03      	adds	r3, r0, #4
 80069d0:	e7f1      	b.n	80069b6 <__exponent+0x60>
	...

080069d4 <_printf_float>:
 80069d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d8:	b091      	sub	sp, #68	; 0x44
 80069da:	460c      	mov	r4, r1
 80069dc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80069e0:	4616      	mov	r6, r2
 80069e2:	461f      	mov	r7, r3
 80069e4:	4605      	mov	r5, r0
 80069e6:	f001 fa51 	bl	8007e8c <_localeconv_r>
 80069ea:	6803      	ldr	r3, [r0, #0]
 80069ec:	4618      	mov	r0, r3
 80069ee:	9309      	str	r3, [sp, #36]	; 0x24
 80069f0:	f7f9 fbae 	bl	8000150 <strlen>
 80069f4:	2300      	movs	r3, #0
 80069f6:	930e      	str	r3, [sp, #56]	; 0x38
 80069f8:	f8d8 3000 	ldr.w	r3, [r8]
 80069fc:	900a      	str	r0, [sp, #40]	; 0x28
 80069fe:	3307      	adds	r3, #7
 8006a00:	f023 0307 	bic.w	r3, r3, #7
 8006a04:	f103 0208 	add.w	r2, r3, #8
 8006a08:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006a0c:	f8d4 b000 	ldr.w	fp, [r4]
 8006a10:	f8c8 2000 	str.w	r2, [r8]
 8006a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a18:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006a1c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006a20:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006a24:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a26:	f04f 32ff 	mov.w	r2, #4294967295
 8006a2a:	4640      	mov	r0, r8
 8006a2c:	4b9c      	ldr	r3, [pc, #624]	; (8006ca0 <_printf_float+0x2cc>)
 8006a2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a30:	f7f9 ffec 	bl	8000a0c <__aeabi_dcmpun>
 8006a34:	bb70      	cbnz	r0, 8006a94 <_printf_float+0xc0>
 8006a36:	f04f 32ff 	mov.w	r2, #4294967295
 8006a3a:	4640      	mov	r0, r8
 8006a3c:	4b98      	ldr	r3, [pc, #608]	; (8006ca0 <_printf_float+0x2cc>)
 8006a3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a40:	f7f9 ffc6 	bl	80009d0 <__aeabi_dcmple>
 8006a44:	bb30      	cbnz	r0, 8006a94 <_printf_float+0xc0>
 8006a46:	2200      	movs	r2, #0
 8006a48:	2300      	movs	r3, #0
 8006a4a:	4640      	mov	r0, r8
 8006a4c:	4651      	mov	r1, sl
 8006a4e:	f7f9 ffb5 	bl	80009bc <__aeabi_dcmplt>
 8006a52:	b110      	cbz	r0, 8006a5a <_printf_float+0x86>
 8006a54:	232d      	movs	r3, #45	; 0x2d
 8006a56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a5a:	4b92      	ldr	r3, [pc, #584]	; (8006ca4 <_printf_float+0x2d0>)
 8006a5c:	4892      	ldr	r0, [pc, #584]	; (8006ca8 <_printf_float+0x2d4>)
 8006a5e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006a62:	bf94      	ite	ls
 8006a64:	4698      	movls	r8, r3
 8006a66:	4680      	movhi	r8, r0
 8006a68:	2303      	movs	r3, #3
 8006a6a:	f04f 0a00 	mov.w	sl, #0
 8006a6e:	6123      	str	r3, [r4, #16]
 8006a70:	f02b 0304 	bic.w	r3, fp, #4
 8006a74:	6023      	str	r3, [r4, #0]
 8006a76:	4633      	mov	r3, r6
 8006a78:	4621      	mov	r1, r4
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	9700      	str	r7, [sp, #0]
 8006a7e:	aa0f      	add	r2, sp, #60	; 0x3c
 8006a80:	f000 f9d4 	bl	8006e2c <_printf_common>
 8006a84:	3001      	adds	r0, #1
 8006a86:	f040 8090 	bne.w	8006baa <_printf_float+0x1d6>
 8006a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a8e:	b011      	add	sp, #68	; 0x44
 8006a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a94:	4642      	mov	r2, r8
 8006a96:	4653      	mov	r3, sl
 8006a98:	4640      	mov	r0, r8
 8006a9a:	4651      	mov	r1, sl
 8006a9c:	f7f9 ffb6 	bl	8000a0c <__aeabi_dcmpun>
 8006aa0:	b148      	cbz	r0, 8006ab6 <_printf_float+0xe2>
 8006aa2:	f1ba 0f00 	cmp.w	sl, #0
 8006aa6:	bfb8      	it	lt
 8006aa8:	232d      	movlt	r3, #45	; 0x2d
 8006aaa:	4880      	ldr	r0, [pc, #512]	; (8006cac <_printf_float+0x2d8>)
 8006aac:	bfb8      	it	lt
 8006aae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006ab2:	4b7f      	ldr	r3, [pc, #508]	; (8006cb0 <_printf_float+0x2dc>)
 8006ab4:	e7d3      	b.n	8006a5e <_printf_float+0x8a>
 8006ab6:	6863      	ldr	r3, [r4, #4]
 8006ab8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006abc:	1c5a      	adds	r2, r3, #1
 8006abe:	d142      	bne.n	8006b46 <_printf_float+0x172>
 8006ac0:	2306      	movs	r3, #6
 8006ac2:	6063      	str	r3, [r4, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	9206      	str	r2, [sp, #24]
 8006ac8:	aa0e      	add	r2, sp, #56	; 0x38
 8006aca:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006ace:	aa0d      	add	r2, sp, #52	; 0x34
 8006ad0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006ad4:	9203      	str	r2, [sp, #12]
 8006ad6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006ada:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006ade:	6023      	str	r3, [r4, #0]
 8006ae0:	6863      	ldr	r3, [r4, #4]
 8006ae2:	4642      	mov	r2, r8
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	4653      	mov	r3, sl
 8006aea:	910b      	str	r1, [sp, #44]	; 0x2c
 8006aec:	f7ff fed4 	bl	8006898 <__cvt>
 8006af0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006af2:	4680      	mov	r8, r0
 8006af4:	2947      	cmp	r1, #71	; 0x47
 8006af6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006af8:	d108      	bne.n	8006b0c <_printf_float+0x138>
 8006afa:	1cc8      	adds	r0, r1, #3
 8006afc:	db02      	blt.n	8006b04 <_printf_float+0x130>
 8006afe:	6863      	ldr	r3, [r4, #4]
 8006b00:	4299      	cmp	r1, r3
 8006b02:	dd40      	ble.n	8006b86 <_printf_float+0x1b2>
 8006b04:	f1a9 0902 	sub.w	r9, r9, #2
 8006b08:	fa5f f989 	uxtb.w	r9, r9
 8006b0c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006b10:	d81f      	bhi.n	8006b52 <_printf_float+0x17e>
 8006b12:	464a      	mov	r2, r9
 8006b14:	3901      	subs	r1, #1
 8006b16:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006b1a:	910d      	str	r1, [sp, #52]	; 0x34
 8006b1c:	f7ff ff1b 	bl	8006956 <__exponent>
 8006b20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b22:	4682      	mov	sl, r0
 8006b24:	1813      	adds	r3, r2, r0
 8006b26:	2a01      	cmp	r2, #1
 8006b28:	6123      	str	r3, [r4, #16]
 8006b2a:	dc02      	bgt.n	8006b32 <_printf_float+0x15e>
 8006b2c:	6822      	ldr	r2, [r4, #0]
 8006b2e:	07d2      	lsls	r2, r2, #31
 8006b30:	d501      	bpl.n	8006b36 <_printf_float+0x162>
 8006b32:	3301      	adds	r3, #1
 8006b34:	6123      	str	r3, [r4, #16]
 8006b36:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d09b      	beq.n	8006a76 <_printf_float+0xa2>
 8006b3e:	232d      	movs	r3, #45	; 0x2d
 8006b40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b44:	e797      	b.n	8006a76 <_printf_float+0xa2>
 8006b46:	2947      	cmp	r1, #71	; 0x47
 8006b48:	d1bc      	bne.n	8006ac4 <_printf_float+0xf0>
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1ba      	bne.n	8006ac4 <_printf_float+0xf0>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e7b7      	b.n	8006ac2 <_printf_float+0xee>
 8006b52:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006b56:	d118      	bne.n	8006b8a <_printf_float+0x1b6>
 8006b58:	2900      	cmp	r1, #0
 8006b5a:	6863      	ldr	r3, [r4, #4]
 8006b5c:	dd0b      	ble.n	8006b76 <_printf_float+0x1a2>
 8006b5e:	6121      	str	r1, [r4, #16]
 8006b60:	b913      	cbnz	r3, 8006b68 <_printf_float+0x194>
 8006b62:	6822      	ldr	r2, [r4, #0]
 8006b64:	07d0      	lsls	r0, r2, #31
 8006b66:	d502      	bpl.n	8006b6e <_printf_float+0x19a>
 8006b68:	3301      	adds	r3, #1
 8006b6a:	440b      	add	r3, r1
 8006b6c:	6123      	str	r3, [r4, #16]
 8006b6e:	f04f 0a00 	mov.w	sl, #0
 8006b72:	65a1      	str	r1, [r4, #88]	; 0x58
 8006b74:	e7df      	b.n	8006b36 <_printf_float+0x162>
 8006b76:	b913      	cbnz	r3, 8006b7e <_printf_float+0x1aa>
 8006b78:	6822      	ldr	r2, [r4, #0]
 8006b7a:	07d2      	lsls	r2, r2, #31
 8006b7c:	d501      	bpl.n	8006b82 <_printf_float+0x1ae>
 8006b7e:	3302      	adds	r3, #2
 8006b80:	e7f4      	b.n	8006b6c <_printf_float+0x198>
 8006b82:	2301      	movs	r3, #1
 8006b84:	e7f2      	b.n	8006b6c <_printf_float+0x198>
 8006b86:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006b8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b8c:	4299      	cmp	r1, r3
 8006b8e:	db05      	blt.n	8006b9c <_printf_float+0x1c8>
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	6121      	str	r1, [r4, #16]
 8006b94:	07d8      	lsls	r0, r3, #31
 8006b96:	d5ea      	bpl.n	8006b6e <_printf_float+0x19a>
 8006b98:	1c4b      	adds	r3, r1, #1
 8006b9a:	e7e7      	b.n	8006b6c <_printf_float+0x198>
 8006b9c:	2900      	cmp	r1, #0
 8006b9e:	bfcc      	ite	gt
 8006ba0:	2201      	movgt	r2, #1
 8006ba2:	f1c1 0202 	rsble	r2, r1, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	e7e0      	b.n	8006b6c <_printf_float+0x198>
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	055a      	lsls	r2, r3, #21
 8006bae:	d407      	bmi.n	8006bc0 <_printf_float+0x1ec>
 8006bb0:	6923      	ldr	r3, [r4, #16]
 8006bb2:	4642      	mov	r2, r8
 8006bb4:	4631      	mov	r1, r6
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	47b8      	blx	r7
 8006bba:	3001      	adds	r0, #1
 8006bbc:	d12b      	bne.n	8006c16 <_printf_float+0x242>
 8006bbe:	e764      	b.n	8006a8a <_printf_float+0xb6>
 8006bc0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006bc4:	f240 80dd 	bls.w	8006d82 <_printf_float+0x3ae>
 8006bc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006bcc:	2200      	movs	r2, #0
 8006bce:	2300      	movs	r3, #0
 8006bd0:	f7f9 feea 	bl	80009a8 <__aeabi_dcmpeq>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	d033      	beq.n	8006c40 <_printf_float+0x26c>
 8006bd8:	2301      	movs	r3, #1
 8006bda:	4631      	mov	r1, r6
 8006bdc:	4628      	mov	r0, r5
 8006bde:	4a35      	ldr	r2, [pc, #212]	; (8006cb4 <_printf_float+0x2e0>)
 8006be0:	47b8      	blx	r7
 8006be2:	3001      	adds	r0, #1
 8006be4:	f43f af51 	beq.w	8006a8a <_printf_float+0xb6>
 8006be8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006bec:	429a      	cmp	r2, r3
 8006bee:	db02      	blt.n	8006bf6 <_printf_float+0x222>
 8006bf0:	6823      	ldr	r3, [r4, #0]
 8006bf2:	07d8      	lsls	r0, r3, #31
 8006bf4:	d50f      	bpl.n	8006c16 <_printf_float+0x242>
 8006bf6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bfa:	4631      	mov	r1, r6
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	47b8      	blx	r7
 8006c00:	3001      	adds	r0, #1
 8006c02:	f43f af42 	beq.w	8006a8a <_printf_float+0xb6>
 8006c06:	f04f 0800 	mov.w	r8, #0
 8006c0a:	f104 091a 	add.w	r9, r4, #26
 8006c0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c10:	3b01      	subs	r3, #1
 8006c12:	4543      	cmp	r3, r8
 8006c14:	dc09      	bgt.n	8006c2a <_printf_float+0x256>
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	079b      	lsls	r3, r3, #30
 8006c1a:	f100 8102 	bmi.w	8006e22 <_printf_float+0x44e>
 8006c1e:	68e0      	ldr	r0, [r4, #12]
 8006c20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c22:	4298      	cmp	r0, r3
 8006c24:	bfb8      	it	lt
 8006c26:	4618      	movlt	r0, r3
 8006c28:	e731      	b.n	8006a8e <_printf_float+0xba>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	464a      	mov	r2, r9
 8006c2e:	4631      	mov	r1, r6
 8006c30:	4628      	mov	r0, r5
 8006c32:	47b8      	blx	r7
 8006c34:	3001      	adds	r0, #1
 8006c36:	f43f af28 	beq.w	8006a8a <_printf_float+0xb6>
 8006c3a:	f108 0801 	add.w	r8, r8, #1
 8006c3e:	e7e6      	b.n	8006c0e <_printf_float+0x23a>
 8006c40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	dc38      	bgt.n	8006cb8 <_printf_float+0x2e4>
 8006c46:	2301      	movs	r3, #1
 8006c48:	4631      	mov	r1, r6
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	4a19      	ldr	r2, [pc, #100]	; (8006cb4 <_printf_float+0x2e0>)
 8006c4e:	47b8      	blx	r7
 8006c50:	3001      	adds	r0, #1
 8006c52:	f43f af1a 	beq.w	8006a8a <_printf_float+0xb6>
 8006c56:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	d102      	bne.n	8006c64 <_printf_float+0x290>
 8006c5e:	6823      	ldr	r3, [r4, #0]
 8006c60:	07d9      	lsls	r1, r3, #31
 8006c62:	d5d8      	bpl.n	8006c16 <_printf_float+0x242>
 8006c64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c68:	4631      	mov	r1, r6
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	47b8      	blx	r7
 8006c6e:	3001      	adds	r0, #1
 8006c70:	f43f af0b 	beq.w	8006a8a <_printf_float+0xb6>
 8006c74:	f04f 0900 	mov.w	r9, #0
 8006c78:	f104 0a1a 	add.w	sl, r4, #26
 8006c7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c7e:	425b      	negs	r3, r3
 8006c80:	454b      	cmp	r3, r9
 8006c82:	dc01      	bgt.n	8006c88 <_printf_float+0x2b4>
 8006c84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c86:	e794      	b.n	8006bb2 <_printf_float+0x1de>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	4652      	mov	r2, sl
 8006c8c:	4631      	mov	r1, r6
 8006c8e:	4628      	mov	r0, r5
 8006c90:	47b8      	blx	r7
 8006c92:	3001      	adds	r0, #1
 8006c94:	f43f aef9 	beq.w	8006a8a <_printf_float+0xb6>
 8006c98:	f109 0901 	add.w	r9, r9, #1
 8006c9c:	e7ee      	b.n	8006c7c <_printf_float+0x2a8>
 8006c9e:	bf00      	nop
 8006ca0:	7fefffff 	.word	0x7fefffff
 8006ca4:	0800a7fc 	.word	0x0800a7fc
 8006ca8:	0800a800 	.word	0x0800a800
 8006cac:	0800a808 	.word	0x0800a808
 8006cb0:	0800a804 	.word	0x0800a804
 8006cb4:	0800a80c 	.word	0x0800a80c
 8006cb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	bfa8      	it	ge
 8006cc0:	461a      	movge	r2, r3
 8006cc2:	2a00      	cmp	r2, #0
 8006cc4:	4691      	mov	r9, r2
 8006cc6:	dc37      	bgt.n	8006d38 <_printf_float+0x364>
 8006cc8:	f04f 0b00 	mov.w	fp, #0
 8006ccc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cd0:	f104 021a 	add.w	r2, r4, #26
 8006cd4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006cd8:	ebaa 0309 	sub.w	r3, sl, r9
 8006cdc:	455b      	cmp	r3, fp
 8006cde:	dc33      	bgt.n	8006d48 <_printf_float+0x374>
 8006ce0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	db3b      	blt.n	8006d60 <_printf_float+0x38c>
 8006ce8:	6823      	ldr	r3, [r4, #0]
 8006cea:	07da      	lsls	r2, r3, #31
 8006cec:	d438      	bmi.n	8006d60 <_printf_float+0x38c>
 8006cee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cf0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006cf2:	eba3 020a 	sub.w	r2, r3, sl
 8006cf6:	eba3 0901 	sub.w	r9, r3, r1
 8006cfa:	4591      	cmp	r9, r2
 8006cfc:	bfa8      	it	ge
 8006cfe:	4691      	movge	r9, r2
 8006d00:	f1b9 0f00 	cmp.w	r9, #0
 8006d04:	dc34      	bgt.n	8006d70 <_printf_float+0x39c>
 8006d06:	f04f 0800 	mov.w	r8, #0
 8006d0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d0e:	f104 0a1a 	add.w	sl, r4, #26
 8006d12:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006d16:	1a9b      	subs	r3, r3, r2
 8006d18:	eba3 0309 	sub.w	r3, r3, r9
 8006d1c:	4543      	cmp	r3, r8
 8006d1e:	f77f af7a 	ble.w	8006c16 <_printf_float+0x242>
 8006d22:	2301      	movs	r3, #1
 8006d24:	4652      	mov	r2, sl
 8006d26:	4631      	mov	r1, r6
 8006d28:	4628      	mov	r0, r5
 8006d2a:	47b8      	blx	r7
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	f43f aeac 	beq.w	8006a8a <_printf_float+0xb6>
 8006d32:	f108 0801 	add.w	r8, r8, #1
 8006d36:	e7ec      	b.n	8006d12 <_printf_float+0x33e>
 8006d38:	4613      	mov	r3, r2
 8006d3a:	4631      	mov	r1, r6
 8006d3c:	4642      	mov	r2, r8
 8006d3e:	4628      	mov	r0, r5
 8006d40:	47b8      	blx	r7
 8006d42:	3001      	adds	r0, #1
 8006d44:	d1c0      	bne.n	8006cc8 <_printf_float+0x2f4>
 8006d46:	e6a0      	b.n	8006a8a <_printf_float+0xb6>
 8006d48:	2301      	movs	r3, #1
 8006d4a:	4631      	mov	r1, r6
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006d50:	47b8      	blx	r7
 8006d52:	3001      	adds	r0, #1
 8006d54:	f43f ae99 	beq.w	8006a8a <_printf_float+0xb6>
 8006d58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d5a:	f10b 0b01 	add.w	fp, fp, #1
 8006d5e:	e7b9      	b.n	8006cd4 <_printf_float+0x300>
 8006d60:	4631      	mov	r1, r6
 8006d62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d66:	4628      	mov	r0, r5
 8006d68:	47b8      	blx	r7
 8006d6a:	3001      	adds	r0, #1
 8006d6c:	d1bf      	bne.n	8006cee <_printf_float+0x31a>
 8006d6e:	e68c      	b.n	8006a8a <_printf_float+0xb6>
 8006d70:	464b      	mov	r3, r9
 8006d72:	4631      	mov	r1, r6
 8006d74:	4628      	mov	r0, r5
 8006d76:	eb08 020a 	add.w	r2, r8, sl
 8006d7a:	47b8      	blx	r7
 8006d7c:	3001      	adds	r0, #1
 8006d7e:	d1c2      	bne.n	8006d06 <_printf_float+0x332>
 8006d80:	e683      	b.n	8006a8a <_printf_float+0xb6>
 8006d82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d84:	2a01      	cmp	r2, #1
 8006d86:	dc01      	bgt.n	8006d8c <_printf_float+0x3b8>
 8006d88:	07db      	lsls	r3, r3, #31
 8006d8a:	d537      	bpl.n	8006dfc <_printf_float+0x428>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	4642      	mov	r2, r8
 8006d90:	4631      	mov	r1, r6
 8006d92:	4628      	mov	r0, r5
 8006d94:	47b8      	blx	r7
 8006d96:	3001      	adds	r0, #1
 8006d98:	f43f ae77 	beq.w	8006a8a <_printf_float+0xb6>
 8006d9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006da0:	4631      	mov	r1, r6
 8006da2:	4628      	mov	r0, r5
 8006da4:	47b8      	blx	r7
 8006da6:	3001      	adds	r0, #1
 8006da8:	f43f ae6f 	beq.w	8006a8a <_printf_float+0xb6>
 8006dac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006db0:	2200      	movs	r2, #0
 8006db2:	2300      	movs	r3, #0
 8006db4:	f7f9 fdf8 	bl	80009a8 <__aeabi_dcmpeq>
 8006db8:	b9d8      	cbnz	r0, 8006df2 <_printf_float+0x41e>
 8006dba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dbc:	f108 0201 	add.w	r2, r8, #1
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	4631      	mov	r1, r6
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	47b8      	blx	r7
 8006dc8:	3001      	adds	r0, #1
 8006dca:	d10e      	bne.n	8006dea <_printf_float+0x416>
 8006dcc:	e65d      	b.n	8006a8a <_printf_float+0xb6>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	464a      	mov	r2, r9
 8006dd2:	4631      	mov	r1, r6
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	47b8      	blx	r7
 8006dd8:	3001      	adds	r0, #1
 8006dda:	f43f ae56 	beq.w	8006a8a <_printf_float+0xb6>
 8006dde:	f108 0801 	add.w	r8, r8, #1
 8006de2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006de4:	3b01      	subs	r3, #1
 8006de6:	4543      	cmp	r3, r8
 8006de8:	dcf1      	bgt.n	8006dce <_printf_float+0x3fa>
 8006dea:	4653      	mov	r3, sl
 8006dec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006df0:	e6e0      	b.n	8006bb4 <_printf_float+0x1e0>
 8006df2:	f04f 0800 	mov.w	r8, #0
 8006df6:	f104 091a 	add.w	r9, r4, #26
 8006dfa:	e7f2      	b.n	8006de2 <_printf_float+0x40e>
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	4642      	mov	r2, r8
 8006e00:	e7df      	b.n	8006dc2 <_printf_float+0x3ee>
 8006e02:	2301      	movs	r3, #1
 8006e04:	464a      	mov	r2, r9
 8006e06:	4631      	mov	r1, r6
 8006e08:	4628      	mov	r0, r5
 8006e0a:	47b8      	blx	r7
 8006e0c:	3001      	adds	r0, #1
 8006e0e:	f43f ae3c 	beq.w	8006a8a <_printf_float+0xb6>
 8006e12:	f108 0801 	add.w	r8, r8, #1
 8006e16:	68e3      	ldr	r3, [r4, #12]
 8006e18:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006e1a:	1a5b      	subs	r3, r3, r1
 8006e1c:	4543      	cmp	r3, r8
 8006e1e:	dcf0      	bgt.n	8006e02 <_printf_float+0x42e>
 8006e20:	e6fd      	b.n	8006c1e <_printf_float+0x24a>
 8006e22:	f04f 0800 	mov.w	r8, #0
 8006e26:	f104 0919 	add.w	r9, r4, #25
 8006e2a:	e7f4      	b.n	8006e16 <_printf_float+0x442>

08006e2c <_printf_common>:
 8006e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e30:	4616      	mov	r6, r2
 8006e32:	4699      	mov	r9, r3
 8006e34:	688a      	ldr	r2, [r1, #8]
 8006e36:	690b      	ldr	r3, [r1, #16]
 8006e38:	4607      	mov	r7, r0
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	bfb8      	it	lt
 8006e3e:	4613      	movlt	r3, r2
 8006e40:	6033      	str	r3, [r6, #0]
 8006e42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e46:	460c      	mov	r4, r1
 8006e48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e4c:	b10a      	cbz	r2, 8006e52 <_printf_common+0x26>
 8006e4e:	3301      	adds	r3, #1
 8006e50:	6033      	str	r3, [r6, #0]
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	0699      	lsls	r1, r3, #26
 8006e56:	bf42      	ittt	mi
 8006e58:	6833      	ldrmi	r3, [r6, #0]
 8006e5a:	3302      	addmi	r3, #2
 8006e5c:	6033      	strmi	r3, [r6, #0]
 8006e5e:	6825      	ldr	r5, [r4, #0]
 8006e60:	f015 0506 	ands.w	r5, r5, #6
 8006e64:	d106      	bne.n	8006e74 <_printf_common+0x48>
 8006e66:	f104 0a19 	add.w	sl, r4, #25
 8006e6a:	68e3      	ldr	r3, [r4, #12]
 8006e6c:	6832      	ldr	r2, [r6, #0]
 8006e6e:	1a9b      	subs	r3, r3, r2
 8006e70:	42ab      	cmp	r3, r5
 8006e72:	dc28      	bgt.n	8006ec6 <_printf_common+0x9a>
 8006e74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e78:	1e13      	subs	r3, r2, #0
 8006e7a:	6822      	ldr	r2, [r4, #0]
 8006e7c:	bf18      	it	ne
 8006e7e:	2301      	movne	r3, #1
 8006e80:	0692      	lsls	r2, r2, #26
 8006e82:	d42d      	bmi.n	8006ee0 <_printf_common+0xb4>
 8006e84:	4649      	mov	r1, r9
 8006e86:	4638      	mov	r0, r7
 8006e88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e8c:	47c0      	blx	r8
 8006e8e:	3001      	adds	r0, #1
 8006e90:	d020      	beq.n	8006ed4 <_printf_common+0xa8>
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	68e5      	ldr	r5, [r4, #12]
 8006e96:	f003 0306 	and.w	r3, r3, #6
 8006e9a:	2b04      	cmp	r3, #4
 8006e9c:	bf18      	it	ne
 8006e9e:	2500      	movne	r5, #0
 8006ea0:	6832      	ldr	r2, [r6, #0]
 8006ea2:	f04f 0600 	mov.w	r6, #0
 8006ea6:	68a3      	ldr	r3, [r4, #8]
 8006ea8:	bf08      	it	eq
 8006eaa:	1aad      	subeq	r5, r5, r2
 8006eac:	6922      	ldr	r2, [r4, #16]
 8006eae:	bf08      	it	eq
 8006eb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	bfc4      	itt	gt
 8006eb8:	1a9b      	subgt	r3, r3, r2
 8006eba:	18ed      	addgt	r5, r5, r3
 8006ebc:	341a      	adds	r4, #26
 8006ebe:	42b5      	cmp	r5, r6
 8006ec0:	d11a      	bne.n	8006ef8 <_printf_common+0xcc>
 8006ec2:	2000      	movs	r0, #0
 8006ec4:	e008      	b.n	8006ed8 <_printf_common+0xac>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	4652      	mov	r2, sl
 8006eca:	4649      	mov	r1, r9
 8006ecc:	4638      	mov	r0, r7
 8006ece:	47c0      	blx	r8
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	d103      	bne.n	8006edc <_printf_common+0xb0>
 8006ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006edc:	3501      	adds	r5, #1
 8006ede:	e7c4      	b.n	8006e6a <_printf_common+0x3e>
 8006ee0:	2030      	movs	r0, #48	; 0x30
 8006ee2:	18e1      	adds	r1, r4, r3
 8006ee4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ee8:	1c5a      	adds	r2, r3, #1
 8006eea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006eee:	4422      	add	r2, r4
 8006ef0:	3302      	adds	r3, #2
 8006ef2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ef6:	e7c5      	b.n	8006e84 <_printf_common+0x58>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	4622      	mov	r2, r4
 8006efc:	4649      	mov	r1, r9
 8006efe:	4638      	mov	r0, r7
 8006f00:	47c0      	blx	r8
 8006f02:	3001      	adds	r0, #1
 8006f04:	d0e6      	beq.n	8006ed4 <_printf_common+0xa8>
 8006f06:	3601      	adds	r6, #1
 8006f08:	e7d9      	b.n	8006ebe <_printf_common+0x92>
	...

08006f0c <_printf_i>:
 8006f0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f10:	7e0f      	ldrb	r7, [r1, #24]
 8006f12:	4691      	mov	r9, r2
 8006f14:	2f78      	cmp	r7, #120	; 0x78
 8006f16:	4680      	mov	r8, r0
 8006f18:	460c      	mov	r4, r1
 8006f1a:	469a      	mov	sl, r3
 8006f1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f22:	d807      	bhi.n	8006f34 <_printf_i+0x28>
 8006f24:	2f62      	cmp	r7, #98	; 0x62
 8006f26:	d80a      	bhi.n	8006f3e <_printf_i+0x32>
 8006f28:	2f00      	cmp	r7, #0
 8006f2a:	f000 80d9 	beq.w	80070e0 <_printf_i+0x1d4>
 8006f2e:	2f58      	cmp	r7, #88	; 0x58
 8006f30:	f000 80a4 	beq.w	800707c <_printf_i+0x170>
 8006f34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f3c:	e03a      	b.n	8006fb4 <_printf_i+0xa8>
 8006f3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f42:	2b15      	cmp	r3, #21
 8006f44:	d8f6      	bhi.n	8006f34 <_printf_i+0x28>
 8006f46:	a101      	add	r1, pc, #4	; (adr r1, 8006f4c <_printf_i+0x40>)
 8006f48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f4c:	08006fa5 	.word	0x08006fa5
 8006f50:	08006fb9 	.word	0x08006fb9
 8006f54:	08006f35 	.word	0x08006f35
 8006f58:	08006f35 	.word	0x08006f35
 8006f5c:	08006f35 	.word	0x08006f35
 8006f60:	08006f35 	.word	0x08006f35
 8006f64:	08006fb9 	.word	0x08006fb9
 8006f68:	08006f35 	.word	0x08006f35
 8006f6c:	08006f35 	.word	0x08006f35
 8006f70:	08006f35 	.word	0x08006f35
 8006f74:	08006f35 	.word	0x08006f35
 8006f78:	080070c7 	.word	0x080070c7
 8006f7c:	08006fe9 	.word	0x08006fe9
 8006f80:	080070a9 	.word	0x080070a9
 8006f84:	08006f35 	.word	0x08006f35
 8006f88:	08006f35 	.word	0x08006f35
 8006f8c:	080070e9 	.word	0x080070e9
 8006f90:	08006f35 	.word	0x08006f35
 8006f94:	08006fe9 	.word	0x08006fe9
 8006f98:	08006f35 	.word	0x08006f35
 8006f9c:	08006f35 	.word	0x08006f35
 8006fa0:	080070b1 	.word	0x080070b1
 8006fa4:	682b      	ldr	r3, [r5, #0]
 8006fa6:	1d1a      	adds	r2, r3, #4
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	602a      	str	r2, [r5, #0]
 8006fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e0a4      	b.n	8007102 <_printf_i+0x1f6>
 8006fb8:	6820      	ldr	r0, [r4, #0]
 8006fba:	6829      	ldr	r1, [r5, #0]
 8006fbc:	0606      	lsls	r6, r0, #24
 8006fbe:	f101 0304 	add.w	r3, r1, #4
 8006fc2:	d50a      	bpl.n	8006fda <_printf_i+0xce>
 8006fc4:	680e      	ldr	r6, [r1, #0]
 8006fc6:	602b      	str	r3, [r5, #0]
 8006fc8:	2e00      	cmp	r6, #0
 8006fca:	da03      	bge.n	8006fd4 <_printf_i+0xc8>
 8006fcc:	232d      	movs	r3, #45	; 0x2d
 8006fce:	4276      	negs	r6, r6
 8006fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fd4:	230a      	movs	r3, #10
 8006fd6:	485e      	ldr	r0, [pc, #376]	; (8007150 <_printf_i+0x244>)
 8006fd8:	e019      	b.n	800700e <_printf_i+0x102>
 8006fda:	680e      	ldr	r6, [r1, #0]
 8006fdc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006fe0:	602b      	str	r3, [r5, #0]
 8006fe2:	bf18      	it	ne
 8006fe4:	b236      	sxthne	r6, r6
 8006fe6:	e7ef      	b.n	8006fc8 <_printf_i+0xbc>
 8006fe8:	682b      	ldr	r3, [r5, #0]
 8006fea:	6820      	ldr	r0, [r4, #0]
 8006fec:	1d19      	adds	r1, r3, #4
 8006fee:	6029      	str	r1, [r5, #0]
 8006ff0:	0601      	lsls	r1, r0, #24
 8006ff2:	d501      	bpl.n	8006ff8 <_printf_i+0xec>
 8006ff4:	681e      	ldr	r6, [r3, #0]
 8006ff6:	e002      	b.n	8006ffe <_printf_i+0xf2>
 8006ff8:	0646      	lsls	r6, r0, #25
 8006ffa:	d5fb      	bpl.n	8006ff4 <_printf_i+0xe8>
 8006ffc:	881e      	ldrh	r6, [r3, #0]
 8006ffe:	2f6f      	cmp	r7, #111	; 0x6f
 8007000:	bf0c      	ite	eq
 8007002:	2308      	moveq	r3, #8
 8007004:	230a      	movne	r3, #10
 8007006:	4852      	ldr	r0, [pc, #328]	; (8007150 <_printf_i+0x244>)
 8007008:	2100      	movs	r1, #0
 800700a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800700e:	6865      	ldr	r5, [r4, #4]
 8007010:	2d00      	cmp	r5, #0
 8007012:	bfa8      	it	ge
 8007014:	6821      	ldrge	r1, [r4, #0]
 8007016:	60a5      	str	r5, [r4, #8]
 8007018:	bfa4      	itt	ge
 800701a:	f021 0104 	bicge.w	r1, r1, #4
 800701e:	6021      	strge	r1, [r4, #0]
 8007020:	b90e      	cbnz	r6, 8007026 <_printf_i+0x11a>
 8007022:	2d00      	cmp	r5, #0
 8007024:	d04d      	beq.n	80070c2 <_printf_i+0x1b6>
 8007026:	4615      	mov	r5, r2
 8007028:	fbb6 f1f3 	udiv	r1, r6, r3
 800702c:	fb03 6711 	mls	r7, r3, r1, r6
 8007030:	5dc7      	ldrb	r7, [r0, r7]
 8007032:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007036:	4637      	mov	r7, r6
 8007038:	42bb      	cmp	r3, r7
 800703a:	460e      	mov	r6, r1
 800703c:	d9f4      	bls.n	8007028 <_printf_i+0x11c>
 800703e:	2b08      	cmp	r3, #8
 8007040:	d10b      	bne.n	800705a <_printf_i+0x14e>
 8007042:	6823      	ldr	r3, [r4, #0]
 8007044:	07de      	lsls	r6, r3, #31
 8007046:	d508      	bpl.n	800705a <_printf_i+0x14e>
 8007048:	6923      	ldr	r3, [r4, #16]
 800704a:	6861      	ldr	r1, [r4, #4]
 800704c:	4299      	cmp	r1, r3
 800704e:	bfde      	ittt	le
 8007050:	2330      	movle	r3, #48	; 0x30
 8007052:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007056:	f105 35ff 	addle.w	r5, r5, #4294967295
 800705a:	1b52      	subs	r2, r2, r5
 800705c:	6122      	str	r2, [r4, #16]
 800705e:	464b      	mov	r3, r9
 8007060:	4621      	mov	r1, r4
 8007062:	4640      	mov	r0, r8
 8007064:	f8cd a000 	str.w	sl, [sp]
 8007068:	aa03      	add	r2, sp, #12
 800706a:	f7ff fedf 	bl	8006e2c <_printf_common>
 800706e:	3001      	adds	r0, #1
 8007070:	d14c      	bne.n	800710c <_printf_i+0x200>
 8007072:	f04f 30ff 	mov.w	r0, #4294967295
 8007076:	b004      	add	sp, #16
 8007078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800707c:	4834      	ldr	r0, [pc, #208]	; (8007150 <_printf_i+0x244>)
 800707e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007082:	6829      	ldr	r1, [r5, #0]
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	f851 6b04 	ldr.w	r6, [r1], #4
 800708a:	6029      	str	r1, [r5, #0]
 800708c:	061d      	lsls	r5, r3, #24
 800708e:	d514      	bpl.n	80070ba <_printf_i+0x1ae>
 8007090:	07df      	lsls	r7, r3, #31
 8007092:	bf44      	itt	mi
 8007094:	f043 0320 	orrmi.w	r3, r3, #32
 8007098:	6023      	strmi	r3, [r4, #0]
 800709a:	b91e      	cbnz	r6, 80070a4 <_printf_i+0x198>
 800709c:	6823      	ldr	r3, [r4, #0]
 800709e:	f023 0320 	bic.w	r3, r3, #32
 80070a2:	6023      	str	r3, [r4, #0]
 80070a4:	2310      	movs	r3, #16
 80070a6:	e7af      	b.n	8007008 <_printf_i+0xfc>
 80070a8:	6823      	ldr	r3, [r4, #0]
 80070aa:	f043 0320 	orr.w	r3, r3, #32
 80070ae:	6023      	str	r3, [r4, #0]
 80070b0:	2378      	movs	r3, #120	; 0x78
 80070b2:	4828      	ldr	r0, [pc, #160]	; (8007154 <_printf_i+0x248>)
 80070b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070b8:	e7e3      	b.n	8007082 <_printf_i+0x176>
 80070ba:	0659      	lsls	r1, r3, #25
 80070bc:	bf48      	it	mi
 80070be:	b2b6      	uxthmi	r6, r6
 80070c0:	e7e6      	b.n	8007090 <_printf_i+0x184>
 80070c2:	4615      	mov	r5, r2
 80070c4:	e7bb      	b.n	800703e <_printf_i+0x132>
 80070c6:	682b      	ldr	r3, [r5, #0]
 80070c8:	6826      	ldr	r6, [r4, #0]
 80070ca:	1d18      	adds	r0, r3, #4
 80070cc:	6961      	ldr	r1, [r4, #20]
 80070ce:	6028      	str	r0, [r5, #0]
 80070d0:	0635      	lsls	r5, r6, #24
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	d501      	bpl.n	80070da <_printf_i+0x1ce>
 80070d6:	6019      	str	r1, [r3, #0]
 80070d8:	e002      	b.n	80070e0 <_printf_i+0x1d4>
 80070da:	0670      	lsls	r0, r6, #25
 80070dc:	d5fb      	bpl.n	80070d6 <_printf_i+0x1ca>
 80070de:	8019      	strh	r1, [r3, #0]
 80070e0:	2300      	movs	r3, #0
 80070e2:	4615      	mov	r5, r2
 80070e4:	6123      	str	r3, [r4, #16]
 80070e6:	e7ba      	b.n	800705e <_printf_i+0x152>
 80070e8:	682b      	ldr	r3, [r5, #0]
 80070ea:	2100      	movs	r1, #0
 80070ec:	1d1a      	adds	r2, r3, #4
 80070ee:	602a      	str	r2, [r5, #0]
 80070f0:	681d      	ldr	r5, [r3, #0]
 80070f2:	6862      	ldr	r2, [r4, #4]
 80070f4:	4628      	mov	r0, r5
 80070f6:	f000 fed5 	bl	8007ea4 <memchr>
 80070fa:	b108      	cbz	r0, 8007100 <_printf_i+0x1f4>
 80070fc:	1b40      	subs	r0, r0, r5
 80070fe:	6060      	str	r0, [r4, #4]
 8007100:	6863      	ldr	r3, [r4, #4]
 8007102:	6123      	str	r3, [r4, #16]
 8007104:	2300      	movs	r3, #0
 8007106:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800710a:	e7a8      	b.n	800705e <_printf_i+0x152>
 800710c:	462a      	mov	r2, r5
 800710e:	4649      	mov	r1, r9
 8007110:	4640      	mov	r0, r8
 8007112:	6923      	ldr	r3, [r4, #16]
 8007114:	47d0      	blx	sl
 8007116:	3001      	adds	r0, #1
 8007118:	d0ab      	beq.n	8007072 <_printf_i+0x166>
 800711a:	6823      	ldr	r3, [r4, #0]
 800711c:	079b      	lsls	r3, r3, #30
 800711e:	d413      	bmi.n	8007148 <_printf_i+0x23c>
 8007120:	68e0      	ldr	r0, [r4, #12]
 8007122:	9b03      	ldr	r3, [sp, #12]
 8007124:	4298      	cmp	r0, r3
 8007126:	bfb8      	it	lt
 8007128:	4618      	movlt	r0, r3
 800712a:	e7a4      	b.n	8007076 <_printf_i+0x16a>
 800712c:	2301      	movs	r3, #1
 800712e:	4632      	mov	r2, r6
 8007130:	4649      	mov	r1, r9
 8007132:	4640      	mov	r0, r8
 8007134:	47d0      	blx	sl
 8007136:	3001      	adds	r0, #1
 8007138:	d09b      	beq.n	8007072 <_printf_i+0x166>
 800713a:	3501      	adds	r5, #1
 800713c:	68e3      	ldr	r3, [r4, #12]
 800713e:	9903      	ldr	r1, [sp, #12]
 8007140:	1a5b      	subs	r3, r3, r1
 8007142:	42ab      	cmp	r3, r5
 8007144:	dcf2      	bgt.n	800712c <_printf_i+0x220>
 8007146:	e7eb      	b.n	8007120 <_printf_i+0x214>
 8007148:	2500      	movs	r5, #0
 800714a:	f104 0619 	add.w	r6, r4, #25
 800714e:	e7f5      	b.n	800713c <_printf_i+0x230>
 8007150:	0800a80e 	.word	0x0800a80e
 8007154:	0800a81f 	.word	0x0800a81f

08007158 <siprintf>:
 8007158:	b40e      	push	{r1, r2, r3}
 800715a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800715e:	b500      	push	{lr}
 8007160:	b09c      	sub	sp, #112	; 0x70
 8007162:	ab1d      	add	r3, sp, #116	; 0x74
 8007164:	9002      	str	r0, [sp, #8]
 8007166:	9006      	str	r0, [sp, #24]
 8007168:	9107      	str	r1, [sp, #28]
 800716a:	9104      	str	r1, [sp, #16]
 800716c:	4808      	ldr	r0, [pc, #32]	; (8007190 <siprintf+0x38>)
 800716e:	4909      	ldr	r1, [pc, #36]	; (8007194 <siprintf+0x3c>)
 8007170:	f853 2b04 	ldr.w	r2, [r3], #4
 8007174:	9105      	str	r1, [sp, #20]
 8007176:	6800      	ldr	r0, [r0, #0]
 8007178:	a902      	add	r1, sp, #8
 800717a:	9301      	str	r3, [sp, #4]
 800717c:	f001 fb7c 	bl	8008878 <_svfiprintf_r>
 8007180:	2200      	movs	r2, #0
 8007182:	9b02      	ldr	r3, [sp, #8]
 8007184:	701a      	strb	r2, [r3, #0]
 8007186:	b01c      	add	sp, #112	; 0x70
 8007188:	f85d eb04 	ldr.w	lr, [sp], #4
 800718c:	b003      	add	sp, #12
 800718e:	4770      	bx	lr
 8007190:	20000010 	.word	0x20000010
 8007194:	ffff0208 	.word	0xffff0208

08007198 <quorem>:
 8007198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719c:	6903      	ldr	r3, [r0, #16]
 800719e:	690c      	ldr	r4, [r1, #16]
 80071a0:	4607      	mov	r7, r0
 80071a2:	42a3      	cmp	r3, r4
 80071a4:	f2c0 8082 	blt.w	80072ac <quorem+0x114>
 80071a8:	3c01      	subs	r4, #1
 80071aa:	f100 0514 	add.w	r5, r0, #20
 80071ae:	f101 0814 	add.w	r8, r1, #20
 80071b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071b6:	9301      	str	r3, [sp, #4]
 80071b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071c0:	3301      	adds	r3, #1
 80071c2:	429a      	cmp	r2, r3
 80071c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80071c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80071cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071d0:	d331      	bcc.n	8007236 <quorem+0x9e>
 80071d2:	f04f 0e00 	mov.w	lr, #0
 80071d6:	4640      	mov	r0, r8
 80071d8:	46ac      	mov	ip, r5
 80071da:	46f2      	mov	sl, lr
 80071dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80071e0:	b293      	uxth	r3, r2
 80071e2:	fb06 e303 	mla	r3, r6, r3, lr
 80071e6:	0c12      	lsrs	r2, r2, #16
 80071e8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	fb06 e202 	mla	r2, r6, r2, lr
 80071f2:	ebaa 0303 	sub.w	r3, sl, r3
 80071f6:	f8dc a000 	ldr.w	sl, [ip]
 80071fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80071fe:	fa1f fa8a 	uxth.w	sl, sl
 8007202:	4453      	add	r3, sl
 8007204:	f8dc a000 	ldr.w	sl, [ip]
 8007208:	b292      	uxth	r2, r2
 800720a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800720e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007212:	b29b      	uxth	r3, r3
 8007214:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007218:	4581      	cmp	r9, r0
 800721a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800721e:	f84c 3b04 	str.w	r3, [ip], #4
 8007222:	d2db      	bcs.n	80071dc <quorem+0x44>
 8007224:	f855 300b 	ldr.w	r3, [r5, fp]
 8007228:	b92b      	cbnz	r3, 8007236 <quorem+0x9e>
 800722a:	9b01      	ldr	r3, [sp, #4]
 800722c:	3b04      	subs	r3, #4
 800722e:	429d      	cmp	r5, r3
 8007230:	461a      	mov	r2, r3
 8007232:	d32f      	bcc.n	8007294 <quorem+0xfc>
 8007234:	613c      	str	r4, [r7, #16]
 8007236:	4638      	mov	r0, r7
 8007238:	f001 f8ce 	bl	80083d8 <__mcmp>
 800723c:	2800      	cmp	r0, #0
 800723e:	db25      	blt.n	800728c <quorem+0xf4>
 8007240:	4628      	mov	r0, r5
 8007242:	f04f 0c00 	mov.w	ip, #0
 8007246:	3601      	adds	r6, #1
 8007248:	f858 1b04 	ldr.w	r1, [r8], #4
 800724c:	f8d0 e000 	ldr.w	lr, [r0]
 8007250:	b28b      	uxth	r3, r1
 8007252:	ebac 0303 	sub.w	r3, ip, r3
 8007256:	fa1f f28e 	uxth.w	r2, lr
 800725a:	4413      	add	r3, r2
 800725c:	0c0a      	lsrs	r2, r1, #16
 800725e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007262:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007266:	b29b      	uxth	r3, r3
 8007268:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800726c:	45c1      	cmp	r9, r8
 800726e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007272:	f840 3b04 	str.w	r3, [r0], #4
 8007276:	d2e7      	bcs.n	8007248 <quorem+0xb0>
 8007278:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800727c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007280:	b922      	cbnz	r2, 800728c <quorem+0xf4>
 8007282:	3b04      	subs	r3, #4
 8007284:	429d      	cmp	r5, r3
 8007286:	461a      	mov	r2, r3
 8007288:	d30a      	bcc.n	80072a0 <quorem+0x108>
 800728a:	613c      	str	r4, [r7, #16]
 800728c:	4630      	mov	r0, r6
 800728e:	b003      	add	sp, #12
 8007290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007294:	6812      	ldr	r2, [r2, #0]
 8007296:	3b04      	subs	r3, #4
 8007298:	2a00      	cmp	r2, #0
 800729a:	d1cb      	bne.n	8007234 <quorem+0x9c>
 800729c:	3c01      	subs	r4, #1
 800729e:	e7c6      	b.n	800722e <quorem+0x96>
 80072a0:	6812      	ldr	r2, [r2, #0]
 80072a2:	3b04      	subs	r3, #4
 80072a4:	2a00      	cmp	r2, #0
 80072a6:	d1f0      	bne.n	800728a <quorem+0xf2>
 80072a8:	3c01      	subs	r4, #1
 80072aa:	e7eb      	b.n	8007284 <quorem+0xec>
 80072ac:	2000      	movs	r0, #0
 80072ae:	e7ee      	b.n	800728e <quorem+0xf6>

080072b0 <_dtoa_r>:
 80072b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b4:	4616      	mov	r6, r2
 80072b6:	461f      	mov	r7, r3
 80072b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80072ba:	b099      	sub	sp, #100	; 0x64
 80072bc:	4605      	mov	r5, r0
 80072be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80072c2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80072c6:	b974      	cbnz	r4, 80072e6 <_dtoa_r+0x36>
 80072c8:	2010      	movs	r0, #16
 80072ca:	f000 fde3 	bl	8007e94 <malloc>
 80072ce:	4602      	mov	r2, r0
 80072d0:	6268      	str	r0, [r5, #36]	; 0x24
 80072d2:	b920      	cbnz	r0, 80072de <_dtoa_r+0x2e>
 80072d4:	21ea      	movs	r1, #234	; 0xea
 80072d6:	4ba8      	ldr	r3, [pc, #672]	; (8007578 <_dtoa_r+0x2c8>)
 80072d8:	48a8      	ldr	r0, [pc, #672]	; (800757c <_dtoa_r+0x2cc>)
 80072da:	f001 fbdd 	bl	8008a98 <__assert_func>
 80072de:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072e2:	6004      	str	r4, [r0, #0]
 80072e4:	60c4      	str	r4, [r0, #12]
 80072e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80072e8:	6819      	ldr	r1, [r3, #0]
 80072ea:	b151      	cbz	r1, 8007302 <_dtoa_r+0x52>
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	2301      	movs	r3, #1
 80072f0:	4093      	lsls	r3, r2
 80072f2:	604a      	str	r2, [r1, #4]
 80072f4:	608b      	str	r3, [r1, #8]
 80072f6:	4628      	mov	r0, r5
 80072f8:	f000 fe30 	bl	8007f5c <_Bfree>
 80072fc:	2200      	movs	r2, #0
 80072fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007300:	601a      	str	r2, [r3, #0]
 8007302:	1e3b      	subs	r3, r7, #0
 8007304:	bfaf      	iteee	ge
 8007306:	2300      	movge	r3, #0
 8007308:	2201      	movlt	r2, #1
 800730a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800730e:	9305      	strlt	r3, [sp, #20]
 8007310:	bfa8      	it	ge
 8007312:	f8c8 3000 	strge.w	r3, [r8]
 8007316:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800731a:	4b99      	ldr	r3, [pc, #612]	; (8007580 <_dtoa_r+0x2d0>)
 800731c:	bfb8      	it	lt
 800731e:	f8c8 2000 	strlt.w	r2, [r8]
 8007322:	ea33 0309 	bics.w	r3, r3, r9
 8007326:	d119      	bne.n	800735c <_dtoa_r+0xac>
 8007328:	f242 730f 	movw	r3, #9999	; 0x270f
 800732c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800732e:	6013      	str	r3, [r2, #0]
 8007330:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007334:	4333      	orrs	r3, r6
 8007336:	f000 857f 	beq.w	8007e38 <_dtoa_r+0xb88>
 800733a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800733c:	b953      	cbnz	r3, 8007354 <_dtoa_r+0xa4>
 800733e:	4b91      	ldr	r3, [pc, #580]	; (8007584 <_dtoa_r+0x2d4>)
 8007340:	e022      	b.n	8007388 <_dtoa_r+0xd8>
 8007342:	4b91      	ldr	r3, [pc, #580]	; (8007588 <_dtoa_r+0x2d8>)
 8007344:	9303      	str	r3, [sp, #12]
 8007346:	3308      	adds	r3, #8
 8007348:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800734a:	6013      	str	r3, [r2, #0]
 800734c:	9803      	ldr	r0, [sp, #12]
 800734e:	b019      	add	sp, #100	; 0x64
 8007350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007354:	4b8b      	ldr	r3, [pc, #556]	; (8007584 <_dtoa_r+0x2d4>)
 8007356:	9303      	str	r3, [sp, #12]
 8007358:	3303      	adds	r3, #3
 800735a:	e7f5      	b.n	8007348 <_dtoa_r+0x98>
 800735c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007360:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007364:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007368:	2200      	movs	r2, #0
 800736a:	2300      	movs	r3, #0
 800736c:	f7f9 fb1c 	bl	80009a8 <__aeabi_dcmpeq>
 8007370:	4680      	mov	r8, r0
 8007372:	b158      	cbz	r0, 800738c <_dtoa_r+0xdc>
 8007374:	2301      	movs	r3, #1
 8007376:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007378:	6013      	str	r3, [r2, #0]
 800737a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 8558 	beq.w	8007e32 <_dtoa_r+0xb82>
 8007382:	4882      	ldr	r0, [pc, #520]	; (800758c <_dtoa_r+0x2dc>)
 8007384:	6018      	str	r0, [r3, #0]
 8007386:	1e43      	subs	r3, r0, #1
 8007388:	9303      	str	r3, [sp, #12]
 800738a:	e7df      	b.n	800734c <_dtoa_r+0x9c>
 800738c:	ab16      	add	r3, sp, #88	; 0x58
 800738e:	9301      	str	r3, [sp, #4]
 8007390:	ab17      	add	r3, sp, #92	; 0x5c
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	4628      	mov	r0, r5
 8007396:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800739a:	f001 f8c5 	bl	8008528 <__d2b>
 800739e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80073a2:	4683      	mov	fp, r0
 80073a4:	2c00      	cmp	r4, #0
 80073a6:	d07f      	beq.n	80074a8 <_dtoa_r+0x1f8>
 80073a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073ae:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80073b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073b6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80073ba:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80073be:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80073c2:	2200      	movs	r2, #0
 80073c4:	4b72      	ldr	r3, [pc, #456]	; (8007590 <_dtoa_r+0x2e0>)
 80073c6:	f7f8 fecf 	bl	8000168 <__aeabi_dsub>
 80073ca:	a365      	add	r3, pc, #404	; (adr r3, 8007560 <_dtoa_r+0x2b0>)
 80073cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d0:	f7f9 f882 	bl	80004d8 <__aeabi_dmul>
 80073d4:	a364      	add	r3, pc, #400	; (adr r3, 8007568 <_dtoa_r+0x2b8>)
 80073d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073da:	f7f8 fec7 	bl	800016c <__adddf3>
 80073de:	4606      	mov	r6, r0
 80073e0:	4620      	mov	r0, r4
 80073e2:	460f      	mov	r7, r1
 80073e4:	f7f9 f80e 	bl	8000404 <__aeabi_i2d>
 80073e8:	a361      	add	r3, pc, #388	; (adr r3, 8007570 <_dtoa_r+0x2c0>)
 80073ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ee:	f7f9 f873 	bl	80004d8 <__aeabi_dmul>
 80073f2:	4602      	mov	r2, r0
 80073f4:	460b      	mov	r3, r1
 80073f6:	4630      	mov	r0, r6
 80073f8:	4639      	mov	r1, r7
 80073fa:	f7f8 feb7 	bl	800016c <__adddf3>
 80073fe:	4606      	mov	r6, r0
 8007400:	460f      	mov	r7, r1
 8007402:	f7f9 fb19 	bl	8000a38 <__aeabi_d2iz>
 8007406:	2200      	movs	r2, #0
 8007408:	4682      	mov	sl, r0
 800740a:	2300      	movs	r3, #0
 800740c:	4630      	mov	r0, r6
 800740e:	4639      	mov	r1, r7
 8007410:	f7f9 fad4 	bl	80009bc <__aeabi_dcmplt>
 8007414:	b148      	cbz	r0, 800742a <_dtoa_r+0x17a>
 8007416:	4650      	mov	r0, sl
 8007418:	f7f8 fff4 	bl	8000404 <__aeabi_i2d>
 800741c:	4632      	mov	r2, r6
 800741e:	463b      	mov	r3, r7
 8007420:	f7f9 fac2 	bl	80009a8 <__aeabi_dcmpeq>
 8007424:	b908      	cbnz	r0, 800742a <_dtoa_r+0x17a>
 8007426:	f10a 3aff 	add.w	sl, sl, #4294967295
 800742a:	f1ba 0f16 	cmp.w	sl, #22
 800742e:	d858      	bhi.n	80074e2 <_dtoa_r+0x232>
 8007430:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007434:	4b57      	ldr	r3, [pc, #348]	; (8007594 <_dtoa_r+0x2e4>)
 8007436:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800743a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743e:	f7f9 fabd 	bl	80009bc <__aeabi_dcmplt>
 8007442:	2800      	cmp	r0, #0
 8007444:	d04f      	beq.n	80074e6 <_dtoa_r+0x236>
 8007446:	2300      	movs	r3, #0
 8007448:	f10a 3aff 	add.w	sl, sl, #4294967295
 800744c:	930f      	str	r3, [sp, #60]	; 0x3c
 800744e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007450:	1b1c      	subs	r4, r3, r4
 8007452:	1e63      	subs	r3, r4, #1
 8007454:	9309      	str	r3, [sp, #36]	; 0x24
 8007456:	bf49      	itett	mi
 8007458:	f1c4 0301 	rsbmi	r3, r4, #1
 800745c:	2300      	movpl	r3, #0
 800745e:	9306      	strmi	r3, [sp, #24]
 8007460:	2300      	movmi	r3, #0
 8007462:	bf54      	ite	pl
 8007464:	9306      	strpl	r3, [sp, #24]
 8007466:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007468:	f1ba 0f00 	cmp.w	sl, #0
 800746c:	db3d      	blt.n	80074ea <_dtoa_r+0x23a>
 800746e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007470:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007474:	4453      	add	r3, sl
 8007476:	9309      	str	r3, [sp, #36]	; 0x24
 8007478:	2300      	movs	r3, #0
 800747a:	930a      	str	r3, [sp, #40]	; 0x28
 800747c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800747e:	2b09      	cmp	r3, #9
 8007480:	f200 808c 	bhi.w	800759c <_dtoa_r+0x2ec>
 8007484:	2b05      	cmp	r3, #5
 8007486:	bfc4      	itt	gt
 8007488:	3b04      	subgt	r3, #4
 800748a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800748c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800748e:	bfc8      	it	gt
 8007490:	2400      	movgt	r4, #0
 8007492:	f1a3 0302 	sub.w	r3, r3, #2
 8007496:	bfd8      	it	le
 8007498:	2401      	movle	r4, #1
 800749a:	2b03      	cmp	r3, #3
 800749c:	f200 808a 	bhi.w	80075b4 <_dtoa_r+0x304>
 80074a0:	e8df f003 	tbb	[pc, r3]
 80074a4:	5b4d4f2d 	.word	0x5b4d4f2d
 80074a8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80074ac:	441c      	add	r4, r3
 80074ae:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80074b2:	2b20      	cmp	r3, #32
 80074b4:	bfc3      	ittte	gt
 80074b6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80074ba:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80074be:	fa09 f303 	lslgt.w	r3, r9, r3
 80074c2:	f1c3 0320 	rsble	r3, r3, #32
 80074c6:	bfc6      	itte	gt
 80074c8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80074cc:	4318      	orrgt	r0, r3
 80074ce:	fa06 f003 	lslle.w	r0, r6, r3
 80074d2:	f7f8 ff87 	bl	80003e4 <__aeabi_ui2d>
 80074d6:	2301      	movs	r3, #1
 80074d8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80074dc:	3c01      	subs	r4, #1
 80074de:	9313      	str	r3, [sp, #76]	; 0x4c
 80074e0:	e76f      	b.n	80073c2 <_dtoa_r+0x112>
 80074e2:	2301      	movs	r3, #1
 80074e4:	e7b2      	b.n	800744c <_dtoa_r+0x19c>
 80074e6:	900f      	str	r0, [sp, #60]	; 0x3c
 80074e8:	e7b1      	b.n	800744e <_dtoa_r+0x19e>
 80074ea:	9b06      	ldr	r3, [sp, #24]
 80074ec:	eba3 030a 	sub.w	r3, r3, sl
 80074f0:	9306      	str	r3, [sp, #24]
 80074f2:	f1ca 0300 	rsb	r3, sl, #0
 80074f6:	930a      	str	r3, [sp, #40]	; 0x28
 80074f8:	2300      	movs	r3, #0
 80074fa:	930e      	str	r3, [sp, #56]	; 0x38
 80074fc:	e7be      	b.n	800747c <_dtoa_r+0x1cc>
 80074fe:	2300      	movs	r3, #0
 8007500:	930b      	str	r3, [sp, #44]	; 0x2c
 8007502:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007504:	2b00      	cmp	r3, #0
 8007506:	dc58      	bgt.n	80075ba <_dtoa_r+0x30a>
 8007508:	f04f 0901 	mov.w	r9, #1
 800750c:	464b      	mov	r3, r9
 800750e:	f8cd 9020 	str.w	r9, [sp, #32]
 8007512:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007516:	2200      	movs	r2, #0
 8007518:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800751a:	6042      	str	r2, [r0, #4]
 800751c:	2204      	movs	r2, #4
 800751e:	f102 0614 	add.w	r6, r2, #20
 8007522:	429e      	cmp	r6, r3
 8007524:	6841      	ldr	r1, [r0, #4]
 8007526:	d94e      	bls.n	80075c6 <_dtoa_r+0x316>
 8007528:	4628      	mov	r0, r5
 800752a:	f000 fcd7 	bl	8007edc <_Balloc>
 800752e:	9003      	str	r0, [sp, #12]
 8007530:	2800      	cmp	r0, #0
 8007532:	d14c      	bne.n	80075ce <_dtoa_r+0x31e>
 8007534:	4602      	mov	r2, r0
 8007536:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800753a:	4b17      	ldr	r3, [pc, #92]	; (8007598 <_dtoa_r+0x2e8>)
 800753c:	e6cc      	b.n	80072d8 <_dtoa_r+0x28>
 800753e:	2301      	movs	r3, #1
 8007540:	e7de      	b.n	8007500 <_dtoa_r+0x250>
 8007542:	2300      	movs	r3, #0
 8007544:	930b      	str	r3, [sp, #44]	; 0x2c
 8007546:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007548:	eb0a 0903 	add.w	r9, sl, r3
 800754c:	f109 0301 	add.w	r3, r9, #1
 8007550:	2b01      	cmp	r3, #1
 8007552:	9308      	str	r3, [sp, #32]
 8007554:	bfb8      	it	lt
 8007556:	2301      	movlt	r3, #1
 8007558:	e7dd      	b.n	8007516 <_dtoa_r+0x266>
 800755a:	2301      	movs	r3, #1
 800755c:	e7f2      	b.n	8007544 <_dtoa_r+0x294>
 800755e:	bf00      	nop
 8007560:	636f4361 	.word	0x636f4361
 8007564:	3fd287a7 	.word	0x3fd287a7
 8007568:	8b60c8b3 	.word	0x8b60c8b3
 800756c:	3fc68a28 	.word	0x3fc68a28
 8007570:	509f79fb 	.word	0x509f79fb
 8007574:	3fd34413 	.word	0x3fd34413
 8007578:	0800a83d 	.word	0x0800a83d
 800757c:	0800a854 	.word	0x0800a854
 8007580:	7ff00000 	.word	0x7ff00000
 8007584:	0800a839 	.word	0x0800a839
 8007588:	0800a830 	.word	0x0800a830
 800758c:	0800a80d 	.word	0x0800a80d
 8007590:	3ff80000 	.word	0x3ff80000
 8007594:	0800a948 	.word	0x0800a948
 8007598:	0800a8af 	.word	0x0800a8af
 800759c:	2401      	movs	r4, #1
 800759e:	2300      	movs	r3, #0
 80075a0:	940b      	str	r4, [sp, #44]	; 0x2c
 80075a2:	9322      	str	r3, [sp, #136]	; 0x88
 80075a4:	f04f 39ff 	mov.w	r9, #4294967295
 80075a8:	2200      	movs	r2, #0
 80075aa:	2312      	movs	r3, #18
 80075ac:	f8cd 9020 	str.w	r9, [sp, #32]
 80075b0:	9223      	str	r2, [sp, #140]	; 0x8c
 80075b2:	e7b0      	b.n	8007516 <_dtoa_r+0x266>
 80075b4:	2301      	movs	r3, #1
 80075b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80075b8:	e7f4      	b.n	80075a4 <_dtoa_r+0x2f4>
 80075ba:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80075be:	464b      	mov	r3, r9
 80075c0:	f8cd 9020 	str.w	r9, [sp, #32]
 80075c4:	e7a7      	b.n	8007516 <_dtoa_r+0x266>
 80075c6:	3101      	adds	r1, #1
 80075c8:	6041      	str	r1, [r0, #4]
 80075ca:	0052      	lsls	r2, r2, #1
 80075cc:	e7a7      	b.n	800751e <_dtoa_r+0x26e>
 80075ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80075d0:	9a03      	ldr	r2, [sp, #12]
 80075d2:	601a      	str	r2, [r3, #0]
 80075d4:	9b08      	ldr	r3, [sp, #32]
 80075d6:	2b0e      	cmp	r3, #14
 80075d8:	f200 80a8 	bhi.w	800772c <_dtoa_r+0x47c>
 80075dc:	2c00      	cmp	r4, #0
 80075de:	f000 80a5 	beq.w	800772c <_dtoa_r+0x47c>
 80075e2:	f1ba 0f00 	cmp.w	sl, #0
 80075e6:	dd34      	ble.n	8007652 <_dtoa_r+0x3a2>
 80075e8:	4a9a      	ldr	r2, [pc, #616]	; (8007854 <_dtoa_r+0x5a4>)
 80075ea:	f00a 030f 	and.w	r3, sl, #15
 80075ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80075f2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80075f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80075fe:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007602:	d016      	beq.n	8007632 <_dtoa_r+0x382>
 8007604:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007608:	4b93      	ldr	r3, [pc, #588]	; (8007858 <_dtoa_r+0x5a8>)
 800760a:	2703      	movs	r7, #3
 800760c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007610:	f7f9 f88c 	bl	800072c <__aeabi_ddiv>
 8007614:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007618:	f004 040f 	and.w	r4, r4, #15
 800761c:	4e8e      	ldr	r6, [pc, #568]	; (8007858 <_dtoa_r+0x5a8>)
 800761e:	b954      	cbnz	r4, 8007636 <_dtoa_r+0x386>
 8007620:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007624:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007628:	f7f9 f880 	bl	800072c <__aeabi_ddiv>
 800762c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007630:	e029      	b.n	8007686 <_dtoa_r+0x3d6>
 8007632:	2702      	movs	r7, #2
 8007634:	e7f2      	b.n	800761c <_dtoa_r+0x36c>
 8007636:	07e1      	lsls	r1, r4, #31
 8007638:	d508      	bpl.n	800764c <_dtoa_r+0x39c>
 800763a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800763e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007642:	f7f8 ff49 	bl	80004d8 <__aeabi_dmul>
 8007646:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800764a:	3701      	adds	r7, #1
 800764c:	1064      	asrs	r4, r4, #1
 800764e:	3608      	adds	r6, #8
 8007650:	e7e5      	b.n	800761e <_dtoa_r+0x36e>
 8007652:	f000 80a5 	beq.w	80077a0 <_dtoa_r+0x4f0>
 8007656:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800765a:	f1ca 0400 	rsb	r4, sl, #0
 800765e:	4b7d      	ldr	r3, [pc, #500]	; (8007854 <_dtoa_r+0x5a4>)
 8007660:	f004 020f 	and.w	r2, r4, #15
 8007664:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766c:	f7f8 ff34 	bl	80004d8 <__aeabi_dmul>
 8007670:	2702      	movs	r7, #2
 8007672:	2300      	movs	r3, #0
 8007674:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007678:	4e77      	ldr	r6, [pc, #476]	; (8007858 <_dtoa_r+0x5a8>)
 800767a:	1124      	asrs	r4, r4, #4
 800767c:	2c00      	cmp	r4, #0
 800767e:	f040 8084 	bne.w	800778a <_dtoa_r+0x4da>
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1d2      	bne.n	800762c <_dtoa_r+0x37c>
 8007686:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 808b 	beq.w	80077a4 <_dtoa_r+0x4f4>
 800768e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007692:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007696:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800769a:	2200      	movs	r2, #0
 800769c:	4b6f      	ldr	r3, [pc, #444]	; (800785c <_dtoa_r+0x5ac>)
 800769e:	f7f9 f98d 	bl	80009bc <__aeabi_dcmplt>
 80076a2:	2800      	cmp	r0, #0
 80076a4:	d07e      	beq.n	80077a4 <_dtoa_r+0x4f4>
 80076a6:	9b08      	ldr	r3, [sp, #32]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d07b      	beq.n	80077a4 <_dtoa_r+0x4f4>
 80076ac:	f1b9 0f00 	cmp.w	r9, #0
 80076b0:	dd38      	ble.n	8007724 <_dtoa_r+0x474>
 80076b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80076b6:	2200      	movs	r2, #0
 80076b8:	4b69      	ldr	r3, [pc, #420]	; (8007860 <_dtoa_r+0x5b0>)
 80076ba:	f7f8 ff0d 	bl	80004d8 <__aeabi_dmul>
 80076be:	464c      	mov	r4, r9
 80076c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076c4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80076c8:	3701      	adds	r7, #1
 80076ca:	4638      	mov	r0, r7
 80076cc:	f7f8 fe9a 	bl	8000404 <__aeabi_i2d>
 80076d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076d4:	f7f8 ff00 	bl	80004d8 <__aeabi_dmul>
 80076d8:	2200      	movs	r2, #0
 80076da:	4b62      	ldr	r3, [pc, #392]	; (8007864 <_dtoa_r+0x5b4>)
 80076dc:	f7f8 fd46 	bl	800016c <__adddf3>
 80076e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80076e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80076e8:	9611      	str	r6, [sp, #68]	; 0x44
 80076ea:	2c00      	cmp	r4, #0
 80076ec:	d15d      	bne.n	80077aa <_dtoa_r+0x4fa>
 80076ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076f2:	2200      	movs	r2, #0
 80076f4:	4b5c      	ldr	r3, [pc, #368]	; (8007868 <_dtoa_r+0x5b8>)
 80076f6:	f7f8 fd37 	bl	8000168 <__aeabi_dsub>
 80076fa:	4602      	mov	r2, r0
 80076fc:	460b      	mov	r3, r1
 80076fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007702:	4633      	mov	r3, r6
 8007704:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007706:	f7f9 f977 	bl	80009f8 <__aeabi_dcmpgt>
 800770a:	2800      	cmp	r0, #0
 800770c:	f040 829c 	bne.w	8007c48 <_dtoa_r+0x998>
 8007710:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007714:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007716:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800771a:	f7f9 f94f 	bl	80009bc <__aeabi_dcmplt>
 800771e:	2800      	cmp	r0, #0
 8007720:	f040 8290 	bne.w	8007c44 <_dtoa_r+0x994>
 8007724:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007728:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800772c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800772e:	2b00      	cmp	r3, #0
 8007730:	f2c0 8152 	blt.w	80079d8 <_dtoa_r+0x728>
 8007734:	f1ba 0f0e 	cmp.w	sl, #14
 8007738:	f300 814e 	bgt.w	80079d8 <_dtoa_r+0x728>
 800773c:	4b45      	ldr	r3, [pc, #276]	; (8007854 <_dtoa_r+0x5a4>)
 800773e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007742:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007746:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800774a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800774c:	2b00      	cmp	r3, #0
 800774e:	f280 80db 	bge.w	8007908 <_dtoa_r+0x658>
 8007752:	9b08      	ldr	r3, [sp, #32]
 8007754:	2b00      	cmp	r3, #0
 8007756:	f300 80d7 	bgt.w	8007908 <_dtoa_r+0x658>
 800775a:	f040 8272 	bne.w	8007c42 <_dtoa_r+0x992>
 800775e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007762:	2200      	movs	r2, #0
 8007764:	4b40      	ldr	r3, [pc, #256]	; (8007868 <_dtoa_r+0x5b8>)
 8007766:	f7f8 feb7 	bl	80004d8 <__aeabi_dmul>
 800776a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800776e:	f7f9 f939 	bl	80009e4 <__aeabi_dcmpge>
 8007772:	9c08      	ldr	r4, [sp, #32]
 8007774:	4626      	mov	r6, r4
 8007776:	2800      	cmp	r0, #0
 8007778:	f040 8248 	bne.w	8007c0c <_dtoa_r+0x95c>
 800777c:	2331      	movs	r3, #49	; 0x31
 800777e:	9f03      	ldr	r7, [sp, #12]
 8007780:	f10a 0a01 	add.w	sl, sl, #1
 8007784:	f807 3b01 	strb.w	r3, [r7], #1
 8007788:	e244      	b.n	8007c14 <_dtoa_r+0x964>
 800778a:	07e2      	lsls	r2, r4, #31
 800778c:	d505      	bpl.n	800779a <_dtoa_r+0x4ea>
 800778e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007792:	f7f8 fea1 	bl	80004d8 <__aeabi_dmul>
 8007796:	2301      	movs	r3, #1
 8007798:	3701      	adds	r7, #1
 800779a:	1064      	asrs	r4, r4, #1
 800779c:	3608      	adds	r6, #8
 800779e:	e76d      	b.n	800767c <_dtoa_r+0x3cc>
 80077a0:	2702      	movs	r7, #2
 80077a2:	e770      	b.n	8007686 <_dtoa_r+0x3d6>
 80077a4:	46d0      	mov	r8, sl
 80077a6:	9c08      	ldr	r4, [sp, #32]
 80077a8:	e78f      	b.n	80076ca <_dtoa_r+0x41a>
 80077aa:	9903      	ldr	r1, [sp, #12]
 80077ac:	4b29      	ldr	r3, [pc, #164]	; (8007854 <_dtoa_r+0x5a4>)
 80077ae:	4421      	add	r1, r4
 80077b0:	9112      	str	r1, [sp, #72]	; 0x48
 80077b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077b8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80077bc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077c0:	2900      	cmp	r1, #0
 80077c2:	d055      	beq.n	8007870 <_dtoa_r+0x5c0>
 80077c4:	2000      	movs	r0, #0
 80077c6:	4929      	ldr	r1, [pc, #164]	; (800786c <_dtoa_r+0x5bc>)
 80077c8:	f7f8 ffb0 	bl	800072c <__aeabi_ddiv>
 80077cc:	463b      	mov	r3, r7
 80077ce:	4632      	mov	r2, r6
 80077d0:	f7f8 fcca 	bl	8000168 <__aeabi_dsub>
 80077d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80077d8:	9f03      	ldr	r7, [sp, #12]
 80077da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077de:	f7f9 f92b 	bl	8000a38 <__aeabi_d2iz>
 80077e2:	4604      	mov	r4, r0
 80077e4:	f7f8 fe0e 	bl	8000404 <__aeabi_i2d>
 80077e8:	4602      	mov	r2, r0
 80077ea:	460b      	mov	r3, r1
 80077ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077f0:	f7f8 fcba 	bl	8000168 <__aeabi_dsub>
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	3430      	adds	r4, #48	; 0x30
 80077fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007802:	f807 4b01 	strb.w	r4, [r7], #1
 8007806:	f7f9 f8d9 	bl	80009bc <__aeabi_dcmplt>
 800780a:	2800      	cmp	r0, #0
 800780c:	d174      	bne.n	80078f8 <_dtoa_r+0x648>
 800780e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007812:	2000      	movs	r0, #0
 8007814:	4911      	ldr	r1, [pc, #68]	; (800785c <_dtoa_r+0x5ac>)
 8007816:	f7f8 fca7 	bl	8000168 <__aeabi_dsub>
 800781a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800781e:	f7f9 f8cd 	bl	80009bc <__aeabi_dcmplt>
 8007822:	2800      	cmp	r0, #0
 8007824:	f040 80b7 	bne.w	8007996 <_dtoa_r+0x6e6>
 8007828:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800782a:	429f      	cmp	r7, r3
 800782c:	f43f af7a 	beq.w	8007724 <_dtoa_r+0x474>
 8007830:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007834:	2200      	movs	r2, #0
 8007836:	4b0a      	ldr	r3, [pc, #40]	; (8007860 <_dtoa_r+0x5b0>)
 8007838:	f7f8 fe4e 	bl	80004d8 <__aeabi_dmul>
 800783c:	2200      	movs	r2, #0
 800783e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007842:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007846:	4b06      	ldr	r3, [pc, #24]	; (8007860 <_dtoa_r+0x5b0>)
 8007848:	f7f8 fe46 	bl	80004d8 <__aeabi_dmul>
 800784c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007850:	e7c3      	b.n	80077da <_dtoa_r+0x52a>
 8007852:	bf00      	nop
 8007854:	0800a948 	.word	0x0800a948
 8007858:	0800a920 	.word	0x0800a920
 800785c:	3ff00000 	.word	0x3ff00000
 8007860:	40240000 	.word	0x40240000
 8007864:	401c0000 	.word	0x401c0000
 8007868:	40140000 	.word	0x40140000
 800786c:	3fe00000 	.word	0x3fe00000
 8007870:	4630      	mov	r0, r6
 8007872:	4639      	mov	r1, r7
 8007874:	f7f8 fe30 	bl	80004d8 <__aeabi_dmul>
 8007878:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800787a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800787e:	9c03      	ldr	r4, [sp, #12]
 8007880:	9314      	str	r3, [sp, #80]	; 0x50
 8007882:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007886:	f7f9 f8d7 	bl	8000a38 <__aeabi_d2iz>
 800788a:	9015      	str	r0, [sp, #84]	; 0x54
 800788c:	f7f8 fdba 	bl	8000404 <__aeabi_i2d>
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007898:	f7f8 fc66 	bl	8000168 <__aeabi_dsub>
 800789c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800789e:	4606      	mov	r6, r0
 80078a0:	3330      	adds	r3, #48	; 0x30
 80078a2:	f804 3b01 	strb.w	r3, [r4], #1
 80078a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078a8:	460f      	mov	r7, r1
 80078aa:	429c      	cmp	r4, r3
 80078ac:	f04f 0200 	mov.w	r2, #0
 80078b0:	d124      	bne.n	80078fc <_dtoa_r+0x64c>
 80078b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078b6:	4bb0      	ldr	r3, [pc, #704]	; (8007b78 <_dtoa_r+0x8c8>)
 80078b8:	f7f8 fc58 	bl	800016c <__adddf3>
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	4630      	mov	r0, r6
 80078c2:	4639      	mov	r1, r7
 80078c4:	f7f9 f898 	bl	80009f8 <__aeabi_dcmpgt>
 80078c8:	2800      	cmp	r0, #0
 80078ca:	d163      	bne.n	8007994 <_dtoa_r+0x6e4>
 80078cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80078d0:	2000      	movs	r0, #0
 80078d2:	49a9      	ldr	r1, [pc, #676]	; (8007b78 <_dtoa_r+0x8c8>)
 80078d4:	f7f8 fc48 	bl	8000168 <__aeabi_dsub>
 80078d8:	4602      	mov	r2, r0
 80078da:	460b      	mov	r3, r1
 80078dc:	4630      	mov	r0, r6
 80078de:	4639      	mov	r1, r7
 80078e0:	f7f9 f86c 	bl	80009bc <__aeabi_dcmplt>
 80078e4:	2800      	cmp	r0, #0
 80078e6:	f43f af1d 	beq.w	8007724 <_dtoa_r+0x474>
 80078ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80078ec:	1e7b      	subs	r3, r7, #1
 80078ee:	9314      	str	r3, [sp, #80]	; 0x50
 80078f0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80078f4:	2b30      	cmp	r3, #48	; 0x30
 80078f6:	d0f8      	beq.n	80078ea <_dtoa_r+0x63a>
 80078f8:	46c2      	mov	sl, r8
 80078fa:	e03b      	b.n	8007974 <_dtoa_r+0x6c4>
 80078fc:	4b9f      	ldr	r3, [pc, #636]	; (8007b7c <_dtoa_r+0x8cc>)
 80078fe:	f7f8 fdeb 	bl	80004d8 <__aeabi_dmul>
 8007902:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007906:	e7bc      	b.n	8007882 <_dtoa_r+0x5d2>
 8007908:	9f03      	ldr	r7, [sp, #12]
 800790a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800790e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007912:	4640      	mov	r0, r8
 8007914:	4649      	mov	r1, r9
 8007916:	f7f8 ff09 	bl	800072c <__aeabi_ddiv>
 800791a:	f7f9 f88d 	bl	8000a38 <__aeabi_d2iz>
 800791e:	4604      	mov	r4, r0
 8007920:	f7f8 fd70 	bl	8000404 <__aeabi_i2d>
 8007924:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007928:	f7f8 fdd6 	bl	80004d8 <__aeabi_dmul>
 800792c:	4602      	mov	r2, r0
 800792e:	460b      	mov	r3, r1
 8007930:	4640      	mov	r0, r8
 8007932:	4649      	mov	r1, r9
 8007934:	f7f8 fc18 	bl	8000168 <__aeabi_dsub>
 8007938:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800793c:	f807 6b01 	strb.w	r6, [r7], #1
 8007940:	9e03      	ldr	r6, [sp, #12]
 8007942:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007946:	1bbe      	subs	r6, r7, r6
 8007948:	45b4      	cmp	ip, r6
 800794a:	4602      	mov	r2, r0
 800794c:	460b      	mov	r3, r1
 800794e:	d136      	bne.n	80079be <_dtoa_r+0x70e>
 8007950:	f7f8 fc0c 	bl	800016c <__adddf3>
 8007954:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007958:	4680      	mov	r8, r0
 800795a:	4689      	mov	r9, r1
 800795c:	f7f9 f84c 	bl	80009f8 <__aeabi_dcmpgt>
 8007960:	bb58      	cbnz	r0, 80079ba <_dtoa_r+0x70a>
 8007962:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007966:	4640      	mov	r0, r8
 8007968:	4649      	mov	r1, r9
 800796a:	f7f9 f81d 	bl	80009a8 <__aeabi_dcmpeq>
 800796e:	b108      	cbz	r0, 8007974 <_dtoa_r+0x6c4>
 8007970:	07e1      	lsls	r1, r4, #31
 8007972:	d422      	bmi.n	80079ba <_dtoa_r+0x70a>
 8007974:	4628      	mov	r0, r5
 8007976:	4659      	mov	r1, fp
 8007978:	f000 faf0 	bl	8007f5c <_Bfree>
 800797c:	2300      	movs	r3, #0
 800797e:	703b      	strb	r3, [r7, #0]
 8007980:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007982:	f10a 0001 	add.w	r0, sl, #1
 8007986:	6018      	str	r0, [r3, #0]
 8007988:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800798a:	2b00      	cmp	r3, #0
 800798c:	f43f acde 	beq.w	800734c <_dtoa_r+0x9c>
 8007990:	601f      	str	r7, [r3, #0]
 8007992:	e4db      	b.n	800734c <_dtoa_r+0x9c>
 8007994:	4627      	mov	r7, r4
 8007996:	463b      	mov	r3, r7
 8007998:	461f      	mov	r7, r3
 800799a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800799e:	2a39      	cmp	r2, #57	; 0x39
 80079a0:	d107      	bne.n	80079b2 <_dtoa_r+0x702>
 80079a2:	9a03      	ldr	r2, [sp, #12]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d1f7      	bne.n	8007998 <_dtoa_r+0x6e8>
 80079a8:	2230      	movs	r2, #48	; 0x30
 80079aa:	9903      	ldr	r1, [sp, #12]
 80079ac:	f108 0801 	add.w	r8, r8, #1
 80079b0:	700a      	strb	r2, [r1, #0]
 80079b2:	781a      	ldrb	r2, [r3, #0]
 80079b4:	3201      	adds	r2, #1
 80079b6:	701a      	strb	r2, [r3, #0]
 80079b8:	e79e      	b.n	80078f8 <_dtoa_r+0x648>
 80079ba:	46d0      	mov	r8, sl
 80079bc:	e7eb      	b.n	8007996 <_dtoa_r+0x6e6>
 80079be:	2200      	movs	r2, #0
 80079c0:	4b6e      	ldr	r3, [pc, #440]	; (8007b7c <_dtoa_r+0x8cc>)
 80079c2:	f7f8 fd89 	bl	80004d8 <__aeabi_dmul>
 80079c6:	2200      	movs	r2, #0
 80079c8:	2300      	movs	r3, #0
 80079ca:	4680      	mov	r8, r0
 80079cc:	4689      	mov	r9, r1
 80079ce:	f7f8 ffeb 	bl	80009a8 <__aeabi_dcmpeq>
 80079d2:	2800      	cmp	r0, #0
 80079d4:	d09b      	beq.n	800790e <_dtoa_r+0x65e>
 80079d6:	e7cd      	b.n	8007974 <_dtoa_r+0x6c4>
 80079d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80079da:	2a00      	cmp	r2, #0
 80079dc:	f000 80d0 	beq.w	8007b80 <_dtoa_r+0x8d0>
 80079e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80079e2:	2a01      	cmp	r2, #1
 80079e4:	f300 80ae 	bgt.w	8007b44 <_dtoa_r+0x894>
 80079e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80079ea:	2a00      	cmp	r2, #0
 80079ec:	f000 80a6 	beq.w	8007b3c <_dtoa_r+0x88c>
 80079f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80079f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80079f6:	9f06      	ldr	r7, [sp, #24]
 80079f8:	9a06      	ldr	r2, [sp, #24]
 80079fa:	2101      	movs	r1, #1
 80079fc:	441a      	add	r2, r3
 80079fe:	9206      	str	r2, [sp, #24]
 8007a00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a02:	4628      	mov	r0, r5
 8007a04:	441a      	add	r2, r3
 8007a06:	9209      	str	r2, [sp, #36]	; 0x24
 8007a08:	f000 fb5e 	bl	80080c8 <__i2b>
 8007a0c:	4606      	mov	r6, r0
 8007a0e:	2f00      	cmp	r7, #0
 8007a10:	dd0c      	ble.n	8007a2c <_dtoa_r+0x77c>
 8007a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	dd09      	ble.n	8007a2c <_dtoa_r+0x77c>
 8007a18:	42bb      	cmp	r3, r7
 8007a1a:	bfa8      	it	ge
 8007a1c:	463b      	movge	r3, r7
 8007a1e:	9a06      	ldr	r2, [sp, #24]
 8007a20:	1aff      	subs	r7, r7, r3
 8007a22:	1ad2      	subs	r2, r2, r3
 8007a24:	9206      	str	r2, [sp, #24]
 8007a26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a2e:	b1f3      	cbz	r3, 8007a6e <_dtoa_r+0x7be>
 8007a30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f000 80a8 	beq.w	8007b88 <_dtoa_r+0x8d8>
 8007a38:	2c00      	cmp	r4, #0
 8007a3a:	dd10      	ble.n	8007a5e <_dtoa_r+0x7ae>
 8007a3c:	4631      	mov	r1, r6
 8007a3e:	4622      	mov	r2, r4
 8007a40:	4628      	mov	r0, r5
 8007a42:	f000 fbff 	bl	8008244 <__pow5mult>
 8007a46:	465a      	mov	r2, fp
 8007a48:	4601      	mov	r1, r0
 8007a4a:	4606      	mov	r6, r0
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	f000 fb51 	bl	80080f4 <__multiply>
 8007a52:	4680      	mov	r8, r0
 8007a54:	4659      	mov	r1, fp
 8007a56:	4628      	mov	r0, r5
 8007a58:	f000 fa80 	bl	8007f5c <_Bfree>
 8007a5c:	46c3      	mov	fp, r8
 8007a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a60:	1b1a      	subs	r2, r3, r4
 8007a62:	d004      	beq.n	8007a6e <_dtoa_r+0x7be>
 8007a64:	4659      	mov	r1, fp
 8007a66:	4628      	mov	r0, r5
 8007a68:	f000 fbec 	bl	8008244 <__pow5mult>
 8007a6c:	4683      	mov	fp, r0
 8007a6e:	2101      	movs	r1, #1
 8007a70:	4628      	mov	r0, r5
 8007a72:	f000 fb29 	bl	80080c8 <__i2b>
 8007a76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a78:	4604      	mov	r4, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f340 8086 	ble.w	8007b8c <_dtoa_r+0x8dc>
 8007a80:	461a      	mov	r2, r3
 8007a82:	4601      	mov	r1, r0
 8007a84:	4628      	mov	r0, r5
 8007a86:	f000 fbdd 	bl	8008244 <__pow5mult>
 8007a8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a8c:	4604      	mov	r4, r0
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	dd7f      	ble.n	8007b92 <_dtoa_r+0x8e2>
 8007a92:	f04f 0800 	mov.w	r8, #0
 8007a96:	6923      	ldr	r3, [r4, #16]
 8007a98:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a9c:	6918      	ldr	r0, [r3, #16]
 8007a9e:	f000 fac5 	bl	800802c <__hi0bits>
 8007aa2:	f1c0 0020 	rsb	r0, r0, #32
 8007aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa8:	4418      	add	r0, r3
 8007aaa:	f010 001f 	ands.w	r0, r0, #31
 8007aae:	f000 8092 	beq.w	8007bd6 <_dtoa_r+0x926>
 8007ab2:	f1c0 0320 	rsb	r3, r0, #32
 8007ab6:	2b04      	cmp	r3, #4
 8007ab8:	f340 808a 	ble.w	8007bd0 <_dtoa_r+0x920>
 8007abc:	f1c0 001c 	rsb	r0, r0, #28
 8007ac0:	9b06      	ldr	r3, [sp, #24]
 8007ac2:	4407      	add	r7, r0
 8007ac4:	4403      	add	r3, r0
 8007ac6:	9306      	str	r3, [sp, #24]
 8007ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aca:	4403      	add	r3, r0
 8007acc:	9309      	str	r3, [sp, #36]	; 0x24
 8007ace:	9b06      	ldr	r3, [sp, #24]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	dd05      	ble.n	8007ae0 <_dtoa_r+0x830>
 8007ad4:	4659      	mov	r1, fp
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	4628      	mov	r0, r5
 8007ada:	f000 fc0d 	bl	80082f8 <__lshift>
 8007ade:	4683      	mov	fp, r0
 8007ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	dd05      	ble.n	8007af2 <_dtoa_r+0x842>
 8007ae6:	4621      	mov	r1, r4
 8007ae8:	461a      	mov	r2, r3
 8007aea:	4628      	mov	r0, r5
 8007aec:	f000 fc04 	bl	80082f8 <__lshift>
 8007af0:	4604      	mov	r4, r0
 8007af2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d070      	beq.n	8007bda <_dtoa_r+0x92a>
 8007af8:	4621      	mov	r1, r4
 8007afa:	4658      	mov	r0, fp
 8007afc:	f000 fc6c 	bl	80083d8 <__mcmp>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	da6a      	bge.n	8007bda <_dtoa_r+0x92a>
 8007b04:	2300      	movs	r3, #0
 8007b06:	4659      	mov	r1, fp
 8007b08:	220a      	movs	r2, #10
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	f000 fa48 	bl	8007fa0 <__multadd>
 8007b10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b12:	4683      	mov	fp, r0
 8007b14:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f000 8194 	beq.w	8007e46 <_dtoa_r+0xb96>
 8007b1e:	4631      	mov	r1, r6
 8007b20:	2300      	movs	r3, #0
 8007b22:	220a      	movs	r2, #10
 8007b24:	4628      	mov	r0, r5
 8007b26:	f000 fa3b 	bl	8007fa0 <__multadd>
 8007b2a:	f1b9 0f00 	cmp.w	r9, #0
 8007b2e:	4606      	mov	r6, r0
 8007b30:	f300 8093 	bgt.w	8007c5a <_dtoa_r+0x9aa>
 8007b34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	dc57      	bgt.n	8007bea <_dtoa_r+0x93a>
 8007b3a:	e08e      	b.n	8007c5a <_dtoa_r+0x9aa>
 8007b3c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007b3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007b42:	e757      	b.n	80079f4 <_dtoa_r+0x744>
 8007b44:	9b08      	ldr	r3, [sp, #32]
 8007b46:	1e5c      	subs	r4, r3, #1
 8007b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b4a:	42a3      	cmp	r3, r4
 8007b4c:	bfb7      	itett	lt
 8007b4e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007b50:	1b1c      	subge	r4, r3, r4
 8007b52:	1ae2      	sublt	r2, r4, r3
 8007b54:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007b56:	bfbe      	ittt	lt
 8007b58:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007b5a:	189b      	addlt	r3, r3, r2
 8007b5c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007b5e:	9b08      	ldr	r3, [sp, #32]
 8007b60:	bfb8      	it	lt
 8007b62:	2400      	movlt	r4, #0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	bfbb      	ittet	lt
 8007b68:	9b06      	ldrlt	r3, [sp, #24]
 8007b6a:	9a08      	ldrlt	r2, [sp, #32]
 8007b6c:	9f06      	ldrge	r7, [sp, #24]
 8007b6e:	1a9f      	sublt	r7, r3, r2
 8007b70:	bfac      	ite	ge
 8007b72:	9b08      	ldrge	r3, [sp, #32]
 8007b74:	2300      	movlt	r3, #0
 8007b76:	e73f      	b.n	80079f8 <_dtoa_r+0x748>
 8007b78:	3fe00000 	.word	0x3fe00000
 8007b7c:	40240000 	.word	0x40240000
 8007b80:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007b82:	9f06      	ldr	r7, [sp, #24]
 8007b84:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007b86:	e742      	b.n	8007a0e <_dtoa_r+0x75e>
 8007b88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b8a:	e76b      	b.n	8007a64 <_dtoa_r+0x7b4>
 8007b8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	dc19      	bgt.n	8007bc6 <_dtoa_r+0x916>
 8007b92:	9b04      	ldr	r3, [sp, #16]
 8007b94:	b9bb      	cbnz	r3, 8007bc6 <_dtoa_r+0x916>
 8007b96:	9b05      	ldr	r3, [sp, #20]
 8007b98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b9c:	b99b      	cbnz	r3, 8007bc6 <_dtoa_r+0x916>
 8007b9e:	9b05      	ldr	r3, [sp, #20]
 8007ba0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ba4:	0d1b      	lsrs	r3, r3, #20
 8007ba6:	051b      	lsls	r3, r3, #20
 8007ba8:	b183      	cbz	r3, 8007bcc <_dtoa_r+0x91c>
 8007baa:	f04f 0801 	mov.w	r8, #1
 8007bae:	9b06      	ldr	r3, [sp, #24]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	9306      	str	r3, [sp, #24]
 8007bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8007bba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f47f af6a 	bne.w	8007a96 <_dtoa_r+0x7e6>
 8007bc2:	2001      	movs	r0, #1
 8007bc4:	e76f      	b.n	8007aa6 <_dtoa_r+0x7f6>
 8007bc6:	f04f 0800 	mov.w	r8, #0
 8007bca:	e7f6      	b.n	8007bba <_dtoa_r+0x90a>
 8007bcc:	4698      	mov	r8, r3
 8007bce:	e7f4      	b.n	8007bba <_dtoa_r+0x90a>
 8007bd0:	f43f af7d 	beq.w	8007ace <_dtoa_r+0x81e>
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	301c      	adds	r0, #28
 8007bd8:	e772      	b.n	8007ac0 <_dtoa_r+0x810>
 8007bda:	9b08      	ldr	r3, [sp, #32]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	dc36      	bgt.n	8007c4e <_dtoa_r+0x99e>
 8007be0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	dd33      	ble.n	8007c4e <_dtoa_r+0x99e>
 8007be6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007bea:	f1b9 0f00 	cmp.w	r9, #0
 8007bee:	d10d      	bne.n	8007c0c <_dtoa_r+0x95c>
 8007bf0:	4621      	mov	r1, r4
 8007bf2:	464b      	mov	r3, r9
 8007bf4:	2205      	movs	r2, #5
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	f000 f9d2 	bl	8007fa0 <__multadd>
 8007bfc:	4601      	mov	r1, r0
 8007bfe:	4604      	mov	r4, r0
 8007c00:	4658      	mov	r0, fp
 8007c02:	f000 fbe9 	bl	80083d8 <__mcmp>
 8007c06:	2800      	cmp	r0, #0
 8007c08:	f73f adb8 	bgt.w	800777c <_dtoa_r+0x4cc>
 8007c0c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c0e:	9f03      	ldr	r7, [sp, #12]
 8007c10:	ea6f 0a03 	mvn.w	sl, r3
 8007c14:	f04f 0800 	mov.w	r8, #0
 8007c18:	4621      	mov	r1, r4
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	f000 f99e 	bl	8007f5c <_Bfree>
 8007c20:	2e00      	cmp	r6, #0
 8007c22:	f43f aea7 	beq.w	8007974 <_dtoa_r+0x6c4>
 8007c26:	f1b8 0f00 	cmp.w	r8, #0
 8007c2a:	d005      	beq.n	8007c38 <_dtoa_r+0x988>
 8007c2c:	45b0      	cmp	r8, r6
 8007c2e:	d003      	beq.n	8007c38 <_dtoa_r+0x988>
 8007c30:	4641      	mov	r1, r8
 8007c32:	4628      	mov	r0, r5
 8007c34:	f000 f992 	bl	8007f5c <_Bfree>
 8007c38:	4631      	mov	r1, r6
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	f000 f98e 	bl	8007f5c <_Bfree>
 8007c40:	e698      	b.n	8007974 <_dtoa_r+0x6c4>
 8007c42:	2400      	movs	r4, #0
 8007c44:	4626      	mov	r6, r4
 8007c46:	e7e1      	b.n	8007c0c <_dtoa_r+0x95c>
 8007c48:	46c2      	mov	sl, r8
 8007c4a:	4626      	mov	r6, r4
 8007c4c:	e596      	b.n	800777c <_dtoa_r+0x4cc>
 8007c4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f000 80fd 	beq.w	8007e54 <_dtoa_r+0xba4>
 8007c5a:	2f00      	cmp	r7, #0
 8007c5c:	dd05      	ble.n	8007c6a <_dtoa_r+0x9ba>
 8007c5e:	4631      	mov	r1, r6
 8007c60:	463a      	mov	r2, r7
 8007c62:	4628      	mov	r0, r5
 8007c64:	f000 fb48 	bl	80082f8 <__lshift>
 8007c68:	4606      	mov	r6, r0
 8007c6a:	f1b8 0f00 	cmp.w	r8, #0
 8007c6e:	d05c      	beq.n	8007d2a <_dtoa_r+0xa7a>
 8007c70:	4628      	mov	r0, r5
 8007c72:	6871      	ldr	r1, [r6, #4]
 8007c74:	f000 f932 	bl	8007edc <_Balloc>
 8007c78:	4607      	mov	r7, r0
 8007c7a:	b928      	cbnz	r0, 8007c88 <_dtoa_r+0x9d8>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007c82:	4b7f      	ldr	r3, [pc, #508]	; (8007e80 <_dtoa_r+0xbd0>)
 8007c84:	f7ff bb28 	b.w	80072d8 <_dtoa_r+0x28>
 8007c88:	6932      	ldr	r2, [r6, #16]
 8007c8a:	f106 010c 	add.w	r1, r6, #12
 8007c8e:	3202      	adds	r2, #2
 8007c90:	0092      	lsls	r2, r2, #2
 8007c92:	300c      	adds	r0, #12
 8007c94:	f000 f914 	bl	8007ec0 <memcpy>
 8007c98:	2201      	movs	r2, #1
 8007c9a:	4639      	mov	r1, r7
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	f000 fb2b 	bl	80082f8 <__lshift>
 8007ca2:	46b0      	mov	r8, r6
 8007ca4:	4606      	mov	r6, r0
 8007ca6:	9b03      	ldr	r3, [sp, #12]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	9308      	str	r3, [sp, #32]
 8007cac:	9b03      	ldr	r3, [sp, #12]
 8007cae:	444b      	add	r3, r9
 8007cb0:	930a      	str	r3, [sp, #40]	; 0x28
 8007cb2:	9b04      	ldr	r3, [sp, #16]
 8007cb4:	f003 0301 	and.w	r3, r3, #1
 8007cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8007cba:	9b08      	ldr	r3, [sp, #32]
 8007cbc:	4621      	mov	r1, r4
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	4658      	mov	r0, fp
 8007cc2:	9304      	str	r3, [sp, #16]
 8007cc4:	f7ff fa68 	bl	8007198 <quorem>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	4641      	mov	r1, r8
 8007ccc:	3330      	adds	r3, #48	; 0x30
 8007cce:	9006      	str	r0, [sp, #24]
 8007cd0:	4658      	mov	r0, fp
 8007cd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cd4:	f000 fb80 	bl	80083d8 <__mcmp>
 8007cd8:	4632      	mov	r2, r6
 8007cda:	4681      	mov	r9, r0
 8007cdc:	4621      	mov	r1, r4
 8007cde:	4628      	mov	r0, r5
 8007ce0:	f000 fb96 	bl	8008410 <__mdiff>
 8007ce4:	68c2      	ldr	r2, [r0, #12]
 8007ce6:	4607      	mov	r7, r0
 8007ce8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cea:	bb02      	cbnz	r2, 8007d2e <_dtoa_r+0xa7e>
 8007cec:	4601      	mov	r1, r0
 8007cee:	4658      	mov	r0, fp
 8007cf0:	f000 fb72 	bl	80083d8 <__mcmp>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cf8:	4639      	mov	r1, r7
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007d00:	f000 f92c 	bl	8007f5c <_Bfree>
 8007d04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d08:	9f08      	ldr	r7, [sp, #32]
 8007d0a:	ea43 0102 	orr.w	r1, r3, r2
 8007d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d10:	430b      	orrs	r3, r1
 8007d12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d14:	d10d      	bne.n	8007d32 <_dtoa_r+0xa82>
 8007d16:	2b39      	cmp	r3, #57	; 0x39
 8007d18:	d029      	beq.n	8007d6e <_dtoa_r+0xabe>
 8007d1a:	f1b9 0f00 	cmp.w	r9, #0
 8007d1e:	dd01      	ble.n	8007d24 <_dtoa_r+0xa74>
 8007d20:	9b06      	ldr	r3, [sp, #24]
 8007d22:	3331      	adds	r3, #49	; 0x31
 8007d24:	9a04      	ldr	r2, [sp, #16]
 8007d26:	7013      	strb	r3, [r2, #0]
 8007d28:	e776      	b.n	8007c18 <_dtoa_r+0x968>
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	e7b9      	b.n	8007ca2 <_dtoa_r+0x9f2>
 8007d2e:	2201      	movs	r2, #1
 8007d30:	e7e2      	b.n	8007cf8 <_dtoa_r+0xa48>
 8007d32:	f1b9 0f00 	cmp.w	r9, #0
 8007d36:	db06      	blt.n	8007d46 <_dtoa_r+0xa96>
 8007d38:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007d3a:	ea41 0909 	orr.w	r9, r1, r9
 8007d3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d40:	ea59 0101 	orrs.w	r1, r9, r1
 8007d44:	d120      	bne.n	8007d88 <_dtoa_r+0xad8>
 8007d46:	2a00      	cmp	r2, #0
 8007d48:	ddec      	ble.n	8007d24 <_dtoa_r+0xa74>
 8007d4a:	4659      	mov	r1, fp
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	4628      	mov	r0, r5
 8007d50:	9308      	str	r3, [sp, #32]
 8007d52:	f000 fad1 	bl	80082f8 <__lshift>
 8007d56:	4621      	mov	r1, r4
 8007d58:	4683      	mov	fp, r0
 8007d5a:	f000 fb3d 	bl	80083d8 <__mcmp>
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	9b08      	ldr	r3, [sp, #32]
 8007d62:	dc02      	bgt.n	8007d6a <_dtoa_r+0xaba>
 8007d64:	d1de      	bne.n	8007d24 <_dtoa_r+0xa74>
 8007d66:	07da      	lsls	r2, r3, #31
 8007d68:	d5dc      	bpl.n	8007d24 <_dtoa_r+0xa74>
 8007d6a:	2b39      	cmp	r3, #57	; 0x39
 8007d6c:	d1d8      	bne.n	8007d20 <_dtoa_r+0xa70>
 8007d6e:	2339      	movs	r3, #57	; 0x39
 8007d70:	9a04      	ldr	r2, [sp, #16]
 8007d72:	7013      	strb	r3, [r2, #0]
 8007d74:	463b      	mov	r3, r7
 8007d76:	461f      	mov	r7, r3
 8007d78:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	2a39      	cmp	r2, #57	; 0x39
 8007d80:	d050      	beq.n	8007e24 <_dtoa_r+0xb74>
 8007d82:	3201      	adds	r2, #1
 8007d84:	701a      	strb	r2, [r3, #0]
 8007d86:	e747      	b.n	8007c18 <_dtoa_r+0x968>
 8007d88:	2a00      	cmp	r2, #0
 8007d8a:	dd03      	ble.n	8007d94 <_dtoa_r+0xae4>
 8007d8c:	2b39      	cmp	r3, #57	; 0x39
 8007d8e:	d0ee      	beq.n	8007d6e <_dtoa_r+0xabe>
 8007d90:	3301      	adds	r3, #1
 8007d92:	e7c7      	b.n	8007d24 <_dtoa_r+0xa74>
 8007d94:	9a08      	ldr	r2, [sp, #32]
 8007d96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007d98:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007d9c:	428a      	cmp	r2, r1
 8007d9e:	d02a      	beq.n	8007df6 <_dtoa_r+0xb46>
 8007da0:	4659      	mov	r1, fp
 8007da2:	2300      	movs	r3, #0
 8007da4:	220a      	movs	r2, #10
 8007da6:	4628      	mov	r0, r5
 8007da8:	f000 f8fa 	bl	8007fa0 <__multadd>
 8007dac:	45b0      	cmp	r8, r6
 8007dae:	4683      	mov	fp, r0
 8007db0:	f04f 0300 	mov.w	r3, #0
 8007db4:	f04f 020a 	mov.w	r2, #10
 8007db8:	4641      	mov	r1, r8
 8007dba:	4628      	mov	r0, r5
 8007dbc:	d107      	bne.n	8007dce <_dtoa_r+0xb1e>
 8007dbe:	f000 f8ef 	bl	8007fa0 <__multadd>
 8007dc2:	4680      	mov	r8, r0
 8007dc4:	4606      	mov	r6, r0
 8007dc6:	9b08      	ldr	r3, [sp, #32]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	9308      	str	r3, [sp, #32]
 8007dcc:	e775      	b.n	8007cba <_dtoa_r+0xa0a>
 8007dce:	f000 f8e7 	bl	8007fa0 <__multadd>
 8007dd2:	4631      	mov	r1, r6
 8007dd4:	4680      	mov	r8, r0
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	220a      	movs	r2, #10
 8007dda:	4628      	mov	r0, r5
 8007ddc:	f000 f8e0 	bl	8007fa0 <__multadd>
 8007de0:	4606      	mov	r6, r0
 8007de2:	e7f0      	b.n	8007dc6 <_dtoa_r+0xb16>
 8007de4:	f1b9 0f00 	cmp.w	r9, #0
 8007de8:	bfcc      	ite	gt
 8007dea:	464f      	movgt	r7, r9
 8007dec:	2701      	movle	r7, #1
 8007dee:	f04f 0800 	mov.w	r8, #0
 8007df2:	9a03      	ldr	r2, [sp, #12]
 8007df4:	4417      	add	r7, r2
 8007df6:	4659      	mov	r1, fp
 8007df8:	2201      	movs	r2, #1
 8007dfa:	4628      	mov	r0, r5
 8007dfc:	9308      	str	r3, [sp, #32]
 8007dfe:	f000 fa7b 	bl	80082f8 <__lshift>
 8007e02:	4621      	mov	r1, r4
 8007e04:	4683      	mov	fp, r0
 8007e06:	f000 fae7 	bl	80083d8 <__mcmp>
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	dcb2      	bgt.n	8007d74 <_dtoa_r+0xac4>
 8007e0e:	d102      	bne.n	8007e16 <_dtoa_r+0xb66>
 8007e10:	9b08      	ldr	r3, [sp, #32]
 8007e12:	07db      	lsls	r3, r3, #31
 8007e14:	d4ae      	bmi.n	8007d74 <_dtoa_r+0xac4>
 8007e16:	463b      	mov	r3, r7
 8007e18:	461f      	mov	r7, r3
 8007e1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e1e:	2a30      	cmp	r2, #48	; 0x30
 8007e20:	d0fa      	beq.n	8007e18 <_dtoa_r+0xb68>
 8007e22:	e6f9      	b.n	8007c18 <_dtoa_r+0x968>
 8007e24:	9a03      	ldr	r2, [sp, #12]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d1a5      	bne.n	8007d76 <_dtoa_r+0xac6>
 8007e2a:	2331      	movs	r3, #49	; 0x31
 8007e2c:	f10a 0a01 	add.w	sl, sl, #1
 8007e30:	e779      	b.n	8007d26 <_dtoa_r+0xa76>
 8007e32:	4b14      	ldr	r3, [pc, #80]	; (8007e84 <_dtoa_r+0xbd4>)
 8007e34:	f7ff baa8 	b.w	8007388 <_dtoa_r+0xd8>
 8007e38:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f47f aa81 	bne.w	8007342 <_dtoa_r+0x92>
 8007e40:	4b11      	ldr	r3, [pc, #68]	; (8007e88 <_dtoa_r+0xbd8>)
 8007e42:	f7ff baa1 	b.w	8007388 <_dtoa_r+0xd8>
 8007e46:	f1b9 0f00 	cmp.w	r9, #0
 8007e4a:	dc03      	bgt.n	8007e54 <_dtoa_r+0xba4>
 8007e4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	f73f aecb 	bgt.w	8007bea <_dtoa_r+0x93a>
 8007e54:	9f03      	ldr	r7, [sp, #12]
 8007e56:	4621      	mov	r1, r4
 8007e58:	4658      	mov	r0, fp
 8007e5a:	f7ff f99d 	bl	8007198 <quorem>
 8007e5e:	9a03      	ldr	r2, [sp, #12]
 8007e60:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007e64:	f807 3b01 	strb.w	r3, [r7], #1
 8007e68:	1aba      	subs	r2, r7, r2
 8007e6a:	4591      	cmp	r9, r2
 8007e6c:	ddba      	ble.n	8007de4 <_dtoa_r+0xb34>
 8007e6e:	4659      	mov	r1, fp
 8007e70:	2300      	movs	r3, #0
 8007e72:	220a      	movs	r2, #10
 8007e74:	4628      	mov	r0, r5
 8007e76:	f000 f893 	bl	8007fa0 <__multadd>
 8007e7a:	4683      	mov	fp, r0
 8007e7c:	e7eb      	b.n	8007e56 <_dtoa_r+0xba6>
 8007e7e:	bf00      	nop
 8007e80:	0800a8af 	.word	0x0800a8af
 8007e84:	0800a80c 	.word	0x0800a80c
 8007e88:	0800a830 	.word	0x0800a830

08007e8c <_localeconv_r>:
 8007e8c:	4800      	ldr	r0, [pc, #0]	; (8007e90 <_localeconv_r+0x4>)
 8007e8e:	4770      	bx	lr
 8007e90:	20000164 	.word	0x20000164

08007e94 <malloc>:
 8007e94:	4b02      	ldr	r3, [pc, #8]	; (8007ea0 <malloc+0xc>)
 8007e96:	4601      	mov	r1, r0
 8007e98:	6818      	ldr	r0, [r3, #0]
 8007e9a:	f000 bc1d 	b.w	80086d8 <_malloc_r>
 8007e9e:	bf00      	nop
 8007ea0:	20000010 	.word	0x20000010

08007ea4 <memchr>:
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	b510      	push	{r4, lr}
 8007ea8:	b2c9      	uxtb	r1, r1
 8007eaa:	4402      	add	r2, r0
 8007eac:	4293      	cmp	r3, r2
 8007eae:	4618      	mov	r0, r3
 8007eb0:	d101      	bne.n	8007eb6 <memchr+0x12>
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	e003      	b.n	8007ebe <memchr+0x1a>
 8007eb6:	7804      	ldrb	r4, [r0, #0]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	428c      	cmp	r4, r1
 8007ebc:	d1f6      	bne.n	8007eac <memchr+0x8>
 8007ebe:	bd10      	pop	{r4, pc}

08007ec0 <memcpy>:
 8007ec0:	440a      	add	r2, r1
 8007ec2:	4291      	cmp	r1, r2
 8007ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ec8:	d100      	bne.n	8007ecc <memcpy+0xc>
 8007eca:	4770      	bx	lr
 8007ecc:	b510      	push	{r4, lr}
 8007ece:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ed2:	4291      	cmp	r1, r2
 8007ed4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ed8:	d1f9      	bne.n	8007ece <memcpy+0xe>
 8007eda:	bd10      	pop	{r4, pc}

08007edc <_Balloc>:
 8007edc:	b570      	push	{r4, r5, r6, lr}
 8007ede:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ee0:	4604      	mov	r4, r0
 8007ee2:	460d      	mov	r5, r1
 8007ee4:	b976      	cbnz	r6, 8007f04 <_Balloc+0x28>
 8007ee6:	2010      	movs	r0, #16
 8007ee8:	f7ff ffd4 	bl	8007e94 <malloc>
 8007eec:	4602      	mov	r2, r0
 8007eee:	6260      	str	r0, [r4, #36]	; 0x24
 8007ef0:	b920      	cbnz	r0, 8007efc <_Balloc+0x20>
 8007ef2:	2166      	movs	r1, #102	; 0x66
 8007ef4:	4b17      	ldr	r3, [pc, #92]	; (8007f54 <_Balloc+0x78>)
 8007ef6:	4818      	ldr	r0, [pc, #96]	; (8007f58 <_Balloc+0x7c>)
 8007ef8:	f000 fdce 	bl	8008a98 <__assert_func>
 8007efc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f00:	6006      	str	r6, [r0, #0]
 8007f02:	60c6      	str	r6, [r0, #12]
 8007f04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007f06:	68f3      	ldr	r3, [r6, #12]
 8007f08:	b183      	cbz	r3, 8007f2c <_Balloc+0x50>
 8007f0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f12:	b9b8      	cbnz	r0, 8007f44 <_Balloc+0x68>
 8007f14:	2101      	movs	r1, #1
 8007f16:	fa01 f605 	lsl.w	r6, r1, r5
 8007f1a:	1d72      	adds	r2, r6, #5
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	0092      	lsls	r2, r2, #2
 8007f20:	f000 fb5e 	bl	80085e0 <_calloc_r>
 8007f24:	b160      	cbz	r0, 8007f40 <_Balloc+0x64>
 8007f26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f2a:	e00e      	b.n	8007f4a <_Balloc+0x6e>
 8007f2c:	2221      	movs	r2, #33	; 0x21
 8007f2e:	2104      	movs	r1, #4
 8007f30:	4620      	mov	r0, r4
 8007f32:	f000 fb55 	bl	80085e0 <_calloc_r>
 8007f36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f38:	60f0      	str	r0, [r6, #12]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d1e4      	bne.n	8007f0a <_Balloc+0x2e>
 8007f40:	2000      	movs	r0, #0
 8007f42:	bd70      	pop	{r4, r5, r6, pc}
 8007f44:	6802      	ldr	r2, [r0, #0]
 8007f46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f50:	e7f7      	b.n	8007f42 <_Balloc+0x66>
 8007f52:	bf00      	nop
 8007f54:	0800a83d 	.word	0x0800a83d
 8007f58:	0800a8c0 	.word	0x0800a8c0

08007f5c <_Bfree>:
 8007f5c:	b570      	push	{r4, r5, r6, lr}
 8007f5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f60:	4605      	mov	r5, r0
 8007f62:	460c      	mov	r4, r1
 8007f64:	b976      	cbnz	r6, 8007f84 <_Bfree+0x28>
 8007f66:	2010      	movs	r0, #16
 8007f68:	f7ff ff94 	bl	8007e94 <malloc>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	6268      	str	r0, [r5, #36]	; 0x24
 8007f70:	b920      	cbnz	r0, 8007f7c <_Bfree+0x20>
 8007f72:	218a      	movs	r1, #138	; 0x8a
 8007f74:	4b08      	ldr	r3, [pc, #32]	; (8007f98 <_Bfree+0x3c>)
 8007f76:	4809      	ldr	r0, [pc, #36]	; (8007f9c <_Bfree+0x40>)
 8007f78:	f000 fd8e 	bl	8008a98 <__assert_func>
 8007f7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f80:	6006      	str	r6, [r0, #0]
 8007f82:	60c6      	str	r6, [r0, #12]
 8007f84:	b13c      	cbz	r4, 8007f96 <_Bfree+0x3a>
 8007f86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f88:	6862      	ldr	r2, [r4, #4]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f90:	6021      	str	r1, [r4, #0]
 8007f92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f96:	bd70      	pop	{r4, r5, r6, pc}
 8007f98:	0800a83d 	.word	0x0800a83d
 8007f9c:	0800a8c0 	.word	0x0800a8c0

08007fa0 <__multadd>:
 8007fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa4:	4607      	mov	r7, r0
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	461e      	mov	r6, r3
 8007faa:	2000      	movs	r0, #0
 8007fac:	690d      	ldr	r5, [r1, #16]
 8007fae:	f101 0c14 	add.w	ip, r1, #20
 8007fb2:	f8dc 3000 	ldr.w	r3, [ip]
 8007fb6:	3001      	adds	r0, #1
 8007fb8:	b299      	uxth	r1, r3
 8007fba:	fb02 6101 	mla	r1, r2, r1, r6
 8007fbe:	0c1e      	lsrs	r6, r3, #16
 8007fc0:	0c0b      	lsrs	r3, r1, #16
 8007fc2:	fb02 3306 	mla	r3, r2, r6, r3
 8007fc6:	b289      	uxth	r1, r1
 8007fc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007fcc:	4285      	cmp	r5, r0
 8007fce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007fd2:	f84c 1b04 	str.w	r1, [ip], #4
 8007fd6:	dcec      	bgt.n	8007fb2 <__multadd+0x12>
 8007fd8:	b30e      	cbz	r6, 800801e <__multadd+0x7e>
 8007fda:	68a3      	ldr	r3, [r4, #8]
 8007fdc:	42ab      	cmp	r3, r5
 8007fde:	dc19      	bgt.n	8008014 <__multadd+0x74>
 8007fe0:	6861      	ldr	r1, [r4, #4]
 8007fe2:	4638      	mov	r0, r7
 8007fe4:	3101      	adds	r1, #1
 8007fe6:	f7ff ff79 	bl	8007edc <_Balloc>
 8007fea:	4680      	mov	r8, r0
 8007fec:	b928      	cbnz	r0, 8007ffa <__multadd+0x5a>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	21b5      	movs	r1, #181	; 0xb5
 8007ff2:	4b0c      	ldr	r3, [pc, #48]	; (8008024 <__multadd+0x84>)
 8007ff4:	480c      	ldr	r0, [pc, #48]	; (8008028 <__multadd+0x88>)
 8007ff6:	f000 fd4f 	bl	8008a98 <__assert_func>
 8007ffa:	6922      	ldr	r2, [r4, #16]
 8007ffc:	f104 010c 	add.w	r1, r4, #12
 8008000:	3202      	adds	r2, #2
 8008002:	0092      	lsls	r2, r2, #2
 8008004:	300c      	adds	r0, #12
 8008006:	f7ff ff5b 	bl	8007ec0 <memcpy>
 800800a:	4621      	mov	r1, r4
 800800c:	4638      	mov	r0, r7
 800800e:	f7ff ffa5 	bl	8007f5c <_Bfree>
 8008012:	4644      	mov	r4, r8
 8008014:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008018:	3501      	adds	r5, #1
 800801a:	615e      	str	r6, [r3, #20]
 800801c:	6125      	str	r5, [r4, #16]
 800801e:	4620      	mov	r0, r4
 8008020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008024:	0800a8af 	.word	0x0800a8af
 8008028:	0800a8c0 	.word	0x0800a8c0

0800802c <__hi0bits>:
 800802c:	0c02      	lsrs	r2, r0, #16
 800802e:	0412      	lsls	r2, r2, #16
 8008030:	4603      	mov	r3, r0
 8008032:	b9ca      	cbnz	r2, 8008068 <__hi0bits+0x3c>
 8008034:	0403      	lsls	r3, r0, #16
 8008036:	2010      	movs	r0, #16
 8008038:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800803c:	bf04      	itt	eq
 800803e:	021b      	lsleq	r3, r3, #8
 8008040:	3008      	addeq	r0, #8
 8008042:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008046:	bf04      	itt	eq
 8008048:	011b      	lsleq	r3, r3, #4
 800804a:	3004      	addeq	r0, #4
 800804c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008050:	bf04      	itt	eq
 8008052:	009b      	lsleq	r3, r3, #2
 8008054:	3002      	addeq	r0, #2
 8008056:	2b00      	cmp	r3, #0
 8008058:	db05      	blt.n	8008066 <__hi0bits+0x3a>
 800805a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800805e:	f100 0001 	add.w	r0, r0, #1
 8008062:	bf08      	it	eq
 8008064:	2020      	moveq	r0, #32
 8008066:	4770      	bx	lr
 8008068:	2000      	movs	r0, #0
 800806a:	e7e5      	b.n	8008038 <__hi0bits+0xc>

0800806c <__lo0bits>:
 800806c:	6803      	ldr	r3, [r0, #0]
 800806e:	4602      	mov	r2, r0
 8008070:	f013 0007 	ands.w	r0, r3, #7
 8008074:	d00b      	beq.n	800808e <__lo0bits+0x22>
 8008076:	07d9      	lsls	r1, r3, #31
 8008078:	d421      	bmi.n	80080be <__lo0bits+0x52>
 800807a:	0798      	lsls	r0, r3, #30
 800807c:	bf49      	itett	mi
 800807e:	085b      	lsrmi	r3, r3, #1
 8008080:	089b      	lsrpl	r3, r3, #2
 8008082:	2001      	movmi	r0, #1
 8008084:	6013      	strmi	r3, [r2, #0]
 8008086:	bf5c      	itt	pl
 8008088:	2002      	movpl	r0, #2
 800808a:	6013      	strpl	r3, [r2, #0]
 800808c:	4770      	bx	lr
 800808e:	b299      	uxth	r1, r3
 8008090:	b909      	cbnz	r1, 8008096 <__lo0bits+0x2a>
 8008092:	2010      	movs	r0, #16
 8008094:	0c1b      	lsrs	r3, r3, #16
 8008096:	b2d9      	uxtb	r1, r3
 8008098:	b909      	cbnz	r1, 800809e <__lo0bits+0x32>
 800809a:	3008      	adds	r0, #8
 800809c:	0a1b      	lsrs	r3, r3, #8
 800809e:	0719      	lsls	r1, r3, #28
 80080a0:	bf04      	itt	eq
 80080a2:	091b      	lsreq	r3, r3, #4
 80080a4:	3004      	addeq	r0, #4
 80080a6:	0799      	lsls	r1, r3, #30
 80080a8:	bf04      	itt	eq
 80080aa:	089b      	lsreq	r3, r3, #2
 80080ac:	3002      	addeq	r0, #2
 80080ae:	07d9      	lsls	r1, r3, #31
 80080b0:	d403      	bmi.n	80080ba <__lo0bits+0x4e>
 80080b2:	085b      	lsrs	r3, r3, #1
 80080b4:	f100 0001 	add.w	r0, r0, #1
 80080b8:	d003      	beq.n	80080c2 <__lo0bits+0x56>
 80080ba:	6013      	str	r3, [r2, #0]
 80080bc:	4770      	bx	lr
 80080be:	2000      	movs	r0, #0
 80080c0:	4770      	bx	lr
 80080c2:	2020      	movs	r0, #32
 80080c4:	4770      	bx	lr
	...

080080c8 <__i2b>:
 80080c8:	b510      	push	{r4, lr}
 80080ca:	460c      	mov	r4, r1
 80080cc:	2101      	movs	r1, #1
 80080ce:	f7ff ff05 	bl	8007edc <_Balloc>
 80080d2:	4602      	mov	r2, r0
 80080d4:	b928      	cbnz	r0, 80080e2 <__i2b+0x1a>
 80080d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80080da:	4b04      	ldr	r3, [pc, #16]	; (80080ec <__i2b+0x24>)
 80080dc:	4804      	ldr	r0, [pc, #16]	; (80080f0 <__i2b+0x28>)
 80080de:	f000 fcdb 	bl	8008a98 <__assert_func>
 80080e2:	2301      	movs	r3, #1
 80080e4:	6144      	str	r4, [r0, #20]
 80080e6:	6103      	str	r3, [r0, #16]
 80080e8:	bd10      	pop	{r4, pc}
 80080ea:	bf00      	nop
 80080ec:	0800a8af 	.word	0x0800a8af
 80080f0:	0800a8c0 	.word	0x0800a8c0

080080f4 <__multiply>:
 80080f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f8:	4691      	mov	r9, r2
 80080fa:	690a      	ldr	r2, [r1, #16]
 80080fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008100:	460c      	mov	r4, r1
 8008102:	429a      	cmp	r2, r3
 8008104:	bfbe      	ittt	lt
 8008106:	460b      	movlt	r3, r1
 8008108:	464c      	movlt	r4, r9
 800810a:	4699      	movlt	r9, r3
 800810c:	6927      	ldr	r7, [r4, #16]
 800810e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008112:	68a3      	ldr	r3, [r4, #8]
 8008114:	6861      	ldr	r1, [r4, #4]
 8008116:	eb07 060a 	add.w	r6, r7, sl
 800811a:	42b3      	cmp	r3, r6
 800811c:	b085      	sub	sp, #20
 800811e:	bfb8      	it	lt
 8008120:	3101      	addlt	r1, #1
 8008122:	f7ff fedb 	bl	8007edc <_Balloc>
 8008126:	b930      	cbnz	r0, 8008136 <__multiply+0x42>
 8008128:	4602      	mov	r2, r0
 800812a:	f240 115d 	movw	r1, #349	; 0x15d
 800812e:	4b43      	ldr	r3, [pc, #268]	; (800823c <__multiply+0x148>)
 8008130:	4843      	ldr	r0, [pc, #268]	; (8008240 <__multiply+0x14c>)
 8008132:	f000 fcb1 	bl	8008a98 <__assert_func>
 8008136:	f100 0514 	add.w	r5, r0, #20
 800813a:	462b      	mov	r3, r5
 800813c:	2200      	movs	r2, #0
 800813e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008142:	4543      	cmp	r3, r8
 8008144:	d321      	bcc.n	800818a <__multiply+0x96>
 8008146:	f104 0314 	add.w	r3, r4, #20
 800814a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800814e:	f109 0314 	add.w	r3, r9, #20
 8008152:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008156:	9202      	str	r2, [sp, #8]
 8008158:	1b3a      	subs	r2, r7, r4
 800815a:	3a15      	subs	r2, #21
 800815c:	f022 0203 	bic.w	r2, r2, #3
 8008160:	3204      	adds	r2, #4
 8008162:	f104 0115 	add.w	r1, r4, #21
 8008166:	428f      	cmp	r7, r1
 8008168:	bf38      	it	cc
 800816a:	2204      	movcc	r2, #4
 800816c:	9201      	str	r2, [sp, #4]
 800816e:	9a02      	ldr	r2, [sp, #8]
 8008170:	9303      	str	r3, [sp, #12]
 8008172:	429a      	cmp	r2, r3
 8008174:	d80c      	bhi.n	8008190 <__multiply+0x9c>
 8008176:	2e00      	cmp	r6, #0
 8008178:	dd03      	ble.n	8008182 <__multiply+0x8e>
 800817a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800817e:	2b00      	cmp	r3, #0
 8008180:	d059      	beq.n	8008236 <__multiply+0x142>
 8008182:	6106      	str	r6, [r0, #16]
 8008184:	b005      	add	sp, #20
 8008186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800818a:	f843 2b04 	str.w	r2, [r3], #4
 800818e:	e7d8      	b.n	8008142 <__multiply+0x4e>
 8008190:	f8b3 a000 	ldrh.w	sl, [r3]
 8008194:	f1ba 0f00 	cmp.w	sl, #0
 8008198:	d023      	beq.n	80081e2 <__multiply+0xee>
 800819a:	46a9      	mov	r9, r5
 800819c:	f04f 0c00 	mov.w	ip, #0
 80081a0:	f104 0e14 	add.w	lr, r4, #20
 80081a4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80081a8:	f8d9 1000 	ldr.w	r1, [r9]
 80081ac:	fa1f fb82 	uxth.w	fp, r2
 80081b0:	b289      	uxth	r1, r1
 80081b2:	fb0a 110b 	mla	r1, sl, fp, r1
 80081b6:	4461      	add	r1, ip
 80081b8:	f8d9 c000 	ldr.w	ip, [r9]
 80081bc:	0c12      	lsrs	r2, r2, #16
 80081be:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80081c2:	fb0a c202 	mla	r2, sl, r2, ip
 80081c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80081ca:	b289      	uxth	r1, r1
 80081cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80081d0:	4577      	cmp	r7, lr
 80081d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80081d6:	f849 1b04 	str.w	r1, [r9], #4
 80081da:	d8e3      	bhi.n	80081a4 <__multiply+0xb0>
 80081dc:	9a01      	ldr	r2, [sp, #4]
 80081de:	f845 c002 	str.w	ip, [r5, r2]
 80081e2:	9a03      	ldr	r2, [sp, #12]
 80081e4:	3304      	adds	r3, #4
 80081e6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80081ea:	f1b9 0f00 	cmp.w	r9, #0
 80081ee:	d020      	beq.n	8008232 <__multiply+0x13e>
 80081f0:	46ae      	mov	lr, r5
 80081f2:	f04f 0a00 	mov.w	sl, #0
 80081f6:	6829      	ldr	r1, [r5, #0]
 80081f8:	f104 0c14 	add.w	ip, r4, #20
 80081fc:	f8bc b000 	ldrh.w	fp, [ip]
 8008200:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008204:	b289      	uxth	r1, r1
 8008206:	fb09 220b 	mla	r2, r9, fp, r2
 800820a:	4492      	add	sl, r2
 800820c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008210:	f84e 1b04 	str.w	r1, [lr], #4
 8008214:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008218:	f8be 1000 	ldrh.w	r1, [lr]
 800821c:	0c12      	lsrs	r2, r2, #16
 800821e:	fb09 1102 	mla	r1, r9, r2, r1
 8008222:	4567      	cmp	r7, ip
 8008224:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008228:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800822c:	d8e6      	bhi.n	80081fc <__multiply+0x108>
 800822e:	9a01      	ldr	r2, [sp, #4]
 8008230:	50a9      	str	r1, [r5, r2]
 8008232:	3504      	adds	r5, #4
 8008234:	e79b      	b.n	800816e <__multiply+0x7a>
 8008236:	3e01      	subs	r6, #1
 8008238:	e79d      	b.n	8008176 <__multiply+0x82>
 800823a:	bf00      	nop
 800823c:	0800a8af 	.word	0x0800a8af
 8008240:	0800a8c0 	.word	0x0800a8c0

08008244 <__pow5mult>:
 8008244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008248:	4615      	mov	r5, r2
 800824a:	f012 0203 	ands.w	r2, r2, #3
 800824e:	4606      	mov	r6, r0
 8008250:	460f      	mov	r7, r1
 8008252:	d007      	beq.n	8008264 <__pow5mult+0x20>
 8008254:	4c25      	ldr	r4, [pc, #148]	; (80082ec <__pow5mult+0xa8>)
 8008256:	3a01      	subs	r2, #1
 8008258:	2300      	movs	r3, #0
 800825a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800825e:	f7ff fe9f 	bl	8007fa0 <__multadd>
 8008262:	4607      	mov	r7, r0
 8008264:	10ad      	asrs	r5, r5, #2
 8008266:	d03d      	beq.n	80082e4 <__pow5mult+0xa0>
 8008268:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800826a:	b97c      	cbnz	r4, 800828c <__pow5mult+0x48>
 800826c:	2010      	movs	r0, #16
 800826e:	f7ff fe11 	bl	8007e94 <malloc>
 8008272:	4602      	mov	r2, r0
 8008274:	6270      	str	r0, [r6, #36]	; 0x24
 8008276:	b928      	cbnz	r0, 8008284 <__pow5mult+0x40>
 8008278:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800827c:	4b1c      	ldr	r3, [pc, #112]	; (80082f0 <__pow5mult+0xac>)
 800827e:	481d      	ldr	r0, [pc, #116]	; (80082f4 <__pow5mult+0xb0>)
 8008280:	f000 fc0a 	bl	8008a98 <__assert_func>
 8008284:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008288:	6004      	str	r4, [r0, #0]
 800828a:	60c4      	str	r4, [r0, #12]
 800828c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008290:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008294:	b94c      	cbnz	r4, 80082aa <__pow5mult+0x66>
 8008296:	f240 2171 	movw	r1, #625	; 0x271
 800829a:	4630      	mov	r0, r6
 800829c:	f7ff ff14 	bl	80080c8 <__i2b>
 80082a0:	2300      	movs	r3, #0
 80082a2:	4604      	mov	r4, r0
 80082a4:	f8c8 0008 	str.w	r0, [r8, #8]
 80082a8:	6003      	str	r3, [r0, #0]
 80082aa:	f04f 0900 	mov.w	r9, #0
 80082ae:	07eb      	lsls	r3, r5, #31
 80082b0:	d50a      	bpl.n	80082c8 <__pow5mult+0x84>
 80082b2:	4639      	mov	r1, r7
 80082b4:	4622      	mov	r2, r4
 80082b6:	4630      	mov	r0, r6
 80082b8:	f7ff ff1c 	bl	80080f4 <__multiply>
 80082bc:	4680      	mov	r8, r0
 80082be:	4639      	mov	r1, r7
 80082c0:	4630      	mov	r0, r6
 80082c2:	f7ff fe4b 	bl	8007f5c <_Bfree>
 80082c6:	4647      	mov	r7, r8
 80082c8:	106d      	asrs	r5, r5, #1
 80082ca:	d00b      	beq.n	80082e4 <__pow5mult+0xa0>
 80082cc:	6820      	ldr	r0, [r4, #0]
 80082ce:	b938      	cbnz	r0, 80082e0 <__pow5mult+0x9c>
 80082d0:	4622      	mov	r2, r4
 80082d2:	4621      	mov	r1, r4
 80082d4:	4630      	mov	r0, r6
 80082d6:	f7ff ff0d 	bl	80080f4 <__multiply>
 80082da:	6020      	str	r0, [r4, #0]
 80082dc:	f8c0 9000 	str.w	r9, [r0]
 80082e0:	4604      	mov	r4, r0
 80082e2:	e7e4      	b.n	80082ae <__pow5mult+0x6a>
 80082e4:	4638      	mov	r0, r7
 80082e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082ea:	bf00      	nop
 80082ec:	0800aa10 	.word	0x0800aa10
 80082f0:	0800a83d 	.word	0x0800a83d
 80082f4:	0800a8c0 	.word	0x0800a8c0

080082f8 <__lshift>:
 80082f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082fc:	460c      	mov	r4, r1
 80082fe:	4607      	mov	r7, r0
 8008300:	4691      	mov	r9, r2
 8008302:	6923      	ldr	r3, [r4, #16]
 8008304:	6849      	ldr	r1, [r1, #4]
 8008306:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800830a:	68a3      	ldr	r3, [r4, #8]
 800830c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008310:	f108 0601 	add.w	r6, r8, #1
 8008314:	42b3      	cmp	r3, r6
 8008316:	db0b      	blt.n	8008330 <__lshift+0x38>
 8008318:	4638      	mov	r0, r7
 800831a:	f7ff fddf 	bl	8007edc <_Balloc>
 800831e:	4605      	mov	r5, r0
 8008320:	b948      	cbnz	r0, 8008336 <__lshift+0x3e>
 8008322:	4602      	mov	r2, r0
 8008324:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008328:	4b29      	ldr	r3, [pc, #164]	; (80083d0 <__lshift+0xd8>)
 800832a:	482a      	ldr	r0, [pc, #168]	; (80083d4 <__lshift+0xdc>)
 800832c:	f000 fbb4 	bl	8008a98 <__assert_func>
 8008330:	3101      	adds	r1, #1
 8008332:	005b      	lsls	r3, r3, #1
 8008334:	e7ee      	b.n	8008314 <__lshift+0x1c>
 8008336:	2300      	movs	r3, #0
 8008338:	f100 0114 	add.w	r1, r0, #20
 800833c:	f100 0210 	add.w	r2, r0, #16
 8008340:	4618      	mov	r0, r3
 8008342:	4553      	cmp	r3, sl
 8008344:	db37      	blt.n	80083b6 <__lshift+0xbe>
 8008346:	6920      	ldr	r0, [r4, #16]
 8008348:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800834c:	f104 0314 	add.w	r3, r4, #20
 8008350:	f019 091f 	ands.w	r9, r9, #31
 8008354:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008358:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800835c:	d02f      	beq.n	80083be <__lshift+0xc6>
 800835e:	468a      	mov	sl, r1
 8008360:	f04f 0c00 	mov.w	ip, #0
 8008364:	f1c9 0e20 	rsb	lr, r9, #32
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	fa02 f209 	lsl.w	r2, r2, r9
 800836e:	ea42 020c 	orr.w	r2, r2, ip
 8008372:	f84a 2b04 	str.w	r2, [sl], #4
 8008376:	f853 2b04 	ldr.w	r2, [r3], #4
 800837a:	4298      	cmp	r0, r3
 800837c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008380:	d8f2      	bhi.n	8008368 <__lshift+0x70>
 8008382:	1b03      	subs	r3, r0, r4
 8008384:	3b15      	subs	r3, #21
 8008386:	f023 0303 	bic.w	r3, r3, #3
 800838a:	3304      	adds	r3, #4
 800838c:	f104 0215 	add.w	r2, r4, #21
 8008390:	4290      	cmp	r0, r2
 8008392:	bf38      	it	cc
 8008394:	2304      	movcc	r3, #4
 8008396:	f841 c003 	str.w	ip, [r1, r3]
 800839a:	f1bc 0f00 	cmp.w	ip, #0
 800839e:	d001      	beq.n	80083a4 <__lshift+0xac>
 80083a0:	f108 0602 	add.w	r6, r8, #2
 80083a4:	3e01      	subs	r6, #1
 80083a6:	4638      	mov	r0, r7
 80083a8:	4621      	mov	r1, r4
 80083aa:	612e      	str	r6, [r5, #16]
 80083ac:	f7ff fdd6 	bl	8007f5c <_Bfree>
 80083b0:	4628      	mov	r0, r5
 80083b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80083ba:	3301      	adds	r3, #1
 80083bc:	e7c1      	b.n	8008342 <__lshift+0x4a>
 80083be:	3904      	subs	r1, #4
 80083c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80083c4:	4298      	cmp	r0, r3
 80083c6:	f841 2f04 	str.w	r2, [r1, #4]!
 80083ca:	d8f9      	bhi.n	80083c0 <__lshift+0xc8>
 80083cc:	e7ea      	b.n	80083a4 <__lshift+0xac>
 80083ce:	bf00      	nop
 80083d0:	0800a8af 	.word	0x0800a8af
 80083d4:	0800a8c0 	.word	0x0800a8c0

080083d8 <__mcmp>:
 80083d8:	4603      	mov	r3, r0
 80083da:	690a      	ldr	r2, [r1, #16]
 80083dc:	6900      	ldr	r0, [r0, #16]
 80083de:	b530      	push	{r4, r5, lr}
 80083e0:	1a80      	subs	r0, r0, r2
 80083e2:	d10d      	bne.n	8008400 <__mcmp+0x28>
 80083e4:	3314      	adds	r3, #20
 80083e6:	3114      	adds	r1, #20
 80083e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80083ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80083f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80083f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80083f8:	4295      	cmp	r5, r2
 80083fa:	d002      	beq.n	8008402 <__mcmp+0x2a>
 80083fc:	d304      	bcc.n	8008408 <__mcmp+0x30>
 80083fe:	2001      	movs	r0, #1
 8008400:	bd30      	pop	{r4, r5, pc}
 8008402:	42a3      	cmp	r3, r4
 8008404:	d3f4      	bcc.n	80083f0 <__mcmp+0x18>
 8008406:	e7fb      	b.n	8008400 <__mcmp+0x28>
 8008408:	f04f 30ff 	mov.w	r0, #4294967295
 800840c:	e7f8      	b.n	8008400 <__mcmp+0x28>
	...

08008410 <__mdiff>:
 8008410:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008414:	460d      	mov	r5, r1
 8008416:	4607      	mov	r7, r0
 8008418:	4611      	mov	r1, r2
 800841a:	4628      	mov	r0, r5
 800841c:	4614      	mov	r4, r2
 800841e:	f7ff ffdb 	bl	80083d8 <__mcmp>
 8008422:	1e06      	subs	r6, r0, #0
 8008424:	d111      	bne.n	800844a <__mdiff+0x3a>
 8008426:	4631      	mov	r1, r6
 8008428:	4638      	mov	r0, r7
 800842a:	f7ff fd57 	bl	8007edc <_Balloc>
 800842e:	4602      	mov	r2, r0
 8008430:	b928      	cbnz	r0, 800843e <__mdiff+0x2e>
 8008432:	f240 2132 	movw	r1, #562	; 0x232
 8008436:	4b3a      	ldr	r3, [pc, #232]	; (8008520 <__mdiff+0x110>)
 8008438:	483a      	ldr	r0, [pc, #232]	; (8008524 <__mdiff+0x114>)
 800843a:	f000 fb2d 	bl	8008a98 <__assert_func>
 800843e:	2301      	movs	r3, #1
 8008440:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008444:	4610      	mov	r0, r2
 8008446:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800844a:	bfa4      	itt	ge
 800844c:	4623      	movge	r3, r4
 800844e:	462c      	movge	r4, r5
 8008450:	4638      	mov	r0, r7
 8008452:	6861      	ldr	r1, [r4, #4]
 8008454:	bfa6      	itte	ge
 8008456:	461d      	movge	r5, r3
 8008458:	2600      	movge	r6, #0
 800845a:	2601      	movlt	r6, #1
 800845c:	f7ff fd3e 	bl	8007edc <_Balloc>
 8008460:	4602      	mov	r2, r0
 8008462:	b918      	cbnz	r0, 800846c <__mdiff+0x5c>
 8008464:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008468:	4b2d      	ldr	r3, [pc, #180]	; (8008520 <__mdiff+0x110>)
 800846a:	e7e5      	b.n	8008438 <__mdiff+0x28>
 800846c:	f102 0814 	add.w	r8, r2, #20
 8008470:	46c2      	mov	sl, r8
 8008472:	f04f 0c00 	mov.w	ip, #0
 8008476:	6927      	ldr	r7, [r4, #16]
 8008478:	60c6      	str	r6, [r0, #12]
 800847a:	692e      	ldr	r6, [r5, #16]
 800847c:	f104 0014 	add.w	r0, r4, #20
 8008480:	f105 0914 	add.w	r9, r5, #20
 8008484:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008488:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800848c:	3410      	adds	r4, #16
 800848e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008492:	f859 3b04 	ldr.w	r3, [r9], #4
 8008496:	fa1f f18b 	uxth.w	r1, fp
 800849a:	448c      	add	ip, r1
 800849c:	b299      	uxth	r1, r3
 800849e:	0c1b      	lsrs	r3, r3, #16
 80084a0:	ebac 0101 	sub.w	r1, ip, r1
 80084a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80084a8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80084ac:	b289      	uxth	r1, r1
 80084ae:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80084b2:	454e      	cmp	r6, r9
 80084b4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80084b8:	f84a 3b04 	str.w	r3, [sl], #4
 80084bc:	d8e7      	bhi.n	800848e <__mdiff+0x7e>
 80084be:	1b73      	subs	r3, r6, r5
 80084c0:	3b15      	subs	r3, #21
 80084c2:	f023 0303 	bic.w	r3, r3, #3
 80084c6:	3515      	adds	r5, #21
 80084c8:	3304      	adds	r3, #4
 80084ca:	42ae      	cmp	r6, r5
 80084cc:	bf38      	it	cc
 80084ce:	2304      	movcc	r3, #4
 80084d0:	4418      	add	r0, r3
 80084d2:	4443      	add	r3, r8
 80084d4:	461e      	mov	r6, r3
 80084d6:	4605      	mov	r5, r0
 80084d8:	4575      	cmp	r5, lr
 80084da:	d30e      	bcc.n	80084fa <__mdiff+0xea>
 80084dc:	f10e 0103 	add.w	r1, lr, #3
 80084e0:	1a09      	subs	r1, r1, r0
 80084e2:	f021 0103 	bic.w	r1, r1, #3
 80084e6:	3803      	subs	r0, #3
 80084e8:	4586      	cmp	lr, r0
 80084ea:	bf38      	it	cc
 80084ec:	2100      	movcc	r1, #0
 80084ee:	4419      	add	r1, r3
 80084f0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80084f4:	b18b      	cbz	r3, 800851a <__mdiff+0x10a>
 80084f6:	6117      	str	r7, [r2, #16]
 80084f8:	e7a4      	b.n	8008444 <__mdiff+0x34>
 80084fa:	f855 8b04 	ldr.w	r8, [r5], #4
 80084fe:	fa1f f188 	uxth.w	r1, r8
 8008502:	4461      	add	r1, ip
 8008504:	140c      	asrs	r4, r1, #16
 8008506:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800850a:	b289      	uxth	r1, r1
 800850c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008510:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008514:	f846 1b04 	str.w	r1, [r6], #4
 8008518:	e7de      	b.n	80084d8 <__mdiff+0xc8>
 800851a:	3f01      	subs	r7, #1
 800851c:	e7e8      	b.n	80084f0 <__mdiff+0xe0>
 800851e:	bf00      	nop
 8008520:	0800a8af 	.word	0x0800a8af
 8008524:	0800a8c0 	.word	0x0800a8c0

08008528 <__d2b>:
 8008528:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800852c:	2101      	movs	r1, #1
 800852e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008532:	4690      	mov	r8, r2
 8008534:	461d      	mov	r5, r3
 8008536:	f7ff fcd1 	bl	8007edc <_Balloc>
 800853a:	4604      	mov	r4, r0
 800853c:	b930      	cbnz	r0, 800854c <__d2b+0x24>
 800853e:	4602      	mov	r2, r0
 8008540:	f240 310a 	movw	r1, #778	; 0x30a
 8008544:	4b24      	ldr	r3, [pc, #144]	; (80085d8 <__d2b+0xb0>)
 8008546:	4825      	ldr	r0, [pc, #148]	; (80085dc <__d2b+0xb4>)
 8008548:	f000 faa6 	bl	8008a98 <__assert_func>
 800854c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008550:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008554:	bb2d      	cbnz	r5, 80085a2 <__d2b+0x7a>
 8008556:	9301      	str	r3, [sp, #4]
 8008558:	f1b8 0300 	subs.w	r3, r8, #0
 800855c:	d026      	beq.n	80085ac <__d2b+0x84>
 800855e:	4668      	mov	r0, sp
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	f7ff fd83 	bl	800806c <__lo0bits>
 8008566:	9900      	ldr	r1, [sp, #0]
 8008568:	b1f0      	cbz	r0, 80085a8 <__d2b+0x80>
 800856a:	9a01      	ldr	r2, [sp, #4]
 800856c:	f1c0 0320 	rsb	r3, r0, #32
 8008570:	fa02 f303 	lsl.w	r3, r2, r3
 8008574:	430b      	orrs	r3, r1
 8008576:	40c2      	lsrs	r2, r0
 8008578:	6163      	str	r3, [r4, #20]
 800857a:	9201      	str	r2, [sp, #4]
 800857c:	9b01      	ldr	r3, [sp, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	bf14      	ite	ne
 8008582:	2102      	movne	r1, #2
 8008584:	2101      	moveq	r1, #1
 8008586:	61a3      	str	r3, [r4, #24]
 8008588:	6121      	str	r1, [r4, #16]
 800858a:	b1c5      	cbz	r5, 80085be <__d2b+0x96>
 800858c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008590:	4405      	add	r5, r0
 8008592:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008596:	603d      	str	r5, [r7, #0]
 8008598:	6030      	str	r0, [r6, #0]
 800859a:	4620      	mov	r0, r4
 800859c:	b002      	add	sp, #8
 800859e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085a6:	e7d6      	b.n	8008556 <__d2b+0x2e>
 80085a8:	6161      	str	r1, [r4, #20]
 80085aa:	e7e7      	b.n	800857c <__d2b+0x54>
 80085ac:	a801      	add	r0, sp, #4
 80085ae:	f7ff fd5d 	bl	800806c <__lo0bits>
 80085b2:	2101      	movs	r1, #1
 80085b4:	9b01      	ldr	r3, [sp, #4]
 80085b6:	6121      	str	r1, [r4, #16]
 80085b8:	6163      	str	r3, [r4, #20]
 80085ba:	3020      	adds	r0, #32
 80085bc:	e7e5      	b.n	800858a <__d2b+0x62>
 80085be:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80085c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80085c6:	6038      	str	r0, [r7, #0]
 80085c8:	6918      	ldr	r0, [r3, #16]
 80085ca:	f7ff fd2f 	bl	800802c <__hi0bits>
 80085ce:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80085d2:	6031      	str	r1, [r6, #0]
 80085d4:	e7e1      	b.n	800859a <__d2b+0x72>
 80085d6:	bf00      	nop
 80085d8:	0800a8af 	.word	0x0800a8af
 80085dc:	0800a8c0 	.word	0x0800a8c0

080085e0 <_calloc_r>:
 80085e0:	b570      	push	{r4, r5, r6, lr}
 80085e2:	fba1 5402 	umull	r5, r4, r1, r2
 80085e6:	b934      	cbnz	r4, 80085f6 <_calloc_r+0x16>
 80085e8:	4629      	mov	r1, r5
 80085ea:	f000 f875 	bl	80086d8 <_malloc_r>
 80085ee:	4606      	mov	r6, r0
 80085f0:	b928      	cbnz	r0, 80085fe <_calloc_r+0x1e>
 80085f2:	4630      	mov	r0, r6
 80085f4:	bd70      	pop	{r4, r5, r6, pc}
 80085f6:	220c      	movs	r2, #12
 80085f8:	2600      	movs	r6, #0
 80085fa:	6002      	str	r2, [r0, #0]
 80085fc:	e7f9      	b.n	80085f2 <_calloc_r+0x12>
 80085fe:	462a      	mov	r2, r5
 8008600:	4621      	mov	r1, r4
 8008602:	f7fe f941 	bl	8006888 <memset>
 8008606:	e7f4      	b.n	80085f2 <_calloc_r+0x12>

08008608 <_free_r>:
 8008608:	b538      	push	{r3, r4, r5, lr}
 800860a:	4605      	mov	r5, r0
 800860c:	2900      	cmp	r1, #0
 800860e:	d040      	beq.n	8008692 <_free_r+0x8a>
 8008610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008614:	1f0c      	subs	r4, r1, #4
 8008616:	2b00      	cmp	r3, #0
 8008618:	bfb8      	it	lt
 800861a:	18e4      	addlt	r4, r4, r3
 800861c:	f000 fa98 	bl	8008b50 <__malloc_lock>
 8008620:	4a1c      	ldr	r2, [pc, #112]	; (8008694 <_free_r+0x8c>)
 8008622:	6813      	ldr	r3, [r2, #0]
 8008624:	b933      	cbnz	r3, 8008634 <_free_r+0x2c>
 8008626:	6063      	str	r3, [r4, #4]
 8008628:	6014      	str	r4, [r2, #0]
 800862a:	4628      	mov	r0, r5
 800862c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008630:	f000 ba94 	b.w	8008b5c <__malloc_unlock>
 8008634:	42a3      	cmp	r3, r4
 8008636:	d908      	bls.n	800864a <_free_r+0x42>
 8008638:	6820      	ldr	r0, [r4, #0]
 800863a:	1821      	adds	r1, r4, r0
 800863c:	428b      	cmp	r3, r1
 800863e:	bf01      	itttt	eq
 8008640:	6819      	ldreq	r1, [r3, #0]
 8008642:	685b      	ldreq	r3, [r3, #4]
 8008644:	1809      	addeq	r1, r1, r0
 8008646:	6021      	streq	r1, [r4, #0]
 8008648:	e7ed      	b.n	8008626 <_free_r+0x1e>
 800864a:	461a      	mov	r2, r3
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	b10b      	cbz	r3, 8008654 <_free_r+0x4c>
 8008650:	42a3      	cmp	r3, r4
 8008652:	d9fa      	bls.n	800864a <_free_r+0x42>
 8008654:	6811      	ldr	r1, [r2, #0]
 8008656:	1850      	adds	r0, r2, r1
 8008658:	42a0      	cmp	r0, r4
 800865a:	d10b      	bne.n	8008674 <_free_r+0x6c>
 800865c:	6820      	ldr	r0, [r4, #0]
 800865e:	4401      	add	r1, r0
 8008660:	1850      	adds	r0, r2, r1
 8008662:	4283      	cmp	r3, r0
 8008664:	6011      	str	r1, [r2, #0]
 8008666:	d1e0      	bne.n	800862a <_free_r+0x22>
 8008668:	6818      	ldr	r0, [r3, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	4401      	add	r1, r0
 800866e:	6011      	str	r1, [r2, #0]
 8008670:	6053      	str	r3, [r2, #4]
 8008672:	e7da      	b.n	800862a <_free_r+0x22>
 8008674:	d902      	bls.n	800867c <_free_r+0x74>
 8008676:	230c      	movs	r3, #12
 8008678:	602b      	str	r3, [r5, #0]
 800867a:	e7d6      	b.n	800862a <_free_r+0x22>
 800867c:	6820      	ldr	r0, [r4, #0]
 800867e:	1821      	adds	r1, r4, r0
 8008680:	428b      	cmp	r3, r1
 8008682:	bf01      	itttt	eq
 8008684:	6819      	ldreq	r1, [r3, #0]
 8008686:	685b      	ldreq	r3, [r3, #4]
 8008688:	1809      	addeq	r1, r1, r0
 800868a:	6021      	streq	r1, [r4, #0]
 800868c:	6063      	str	r3, [r4, #4]
 800868e:	6054      	str	r4, [r2, #4]
 8008690:	e7cb      	b.n	800862a <_free_r+0x22>
 8008692:	bd38      	pop	{r3, r4, r5, pc}
 8008694:	20000548 	.word	0x20000548

08008698 <sbrk_aligned>:
 8008698:	b570      	push	{r4, r5, r6, lr}
 800869a:	4e0e      	ldr	r6, [pc, #56]	; (80086d4 <sbrk_aligned+0x3c>)
 800869c:	460c      	mov	r4, r1
 800869e:	6831      	ldr	r1, [r6, #0]
 80086a0:	4605      	mov	r5, r0
 80086a2:	b911      	cbnz	r1, 80086aa <sbrk_aligned+0x12>
 80086a4:	f000 f9e8 	bl	8008a78 <_sbrk_r>
 80086a8:	6030      	str	r0, [r6, #0]
 80086aa:	4621      	mov	r1, r4
 80086ac:	4628      	mov	r0, r5
 80086ae:	f000 f9e3 	bl	8008a78 <_sbrk_r>
 80086b2:	1c43      	adds	r3, r0, #1
 80086b4:	d00a      	beq.n	80086cc <sbrk_aligned+0x34>
 80086b6:	1cc4      	adds	r4, r0, #3
 80086b8:	f024 0403 	bic.w	r4, r4, #3
 80086bc:	42a0      	cmp	r0, r4
 80086be:	d007      	beq.n	80086d0 <sbrk_aligned+0x38>
 80086c0:	1a21      	subs	r1, r4, r0
 80086c2:	4628      	mov	r0, r5
 80086c4:	f000 f9d8 	bl	8008a78 <_sbrk_r>
 80086c8:	3001      	adds	r0, #1
 80086ca:	d101      	bne.n	80086d0 <sbrk_aligned+0x38>
 80086cc:	f04f 34ff 	mov.w	r4, #4294967295
 80086d0:	4620      	mov	r0, r4
 80086d2:	bd70      	pop	{r4, r5, r6, pc}
 80086d4:	2000054c 	.word	0x2000054c

080086d8 <_malloc_r>:
 80086d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086dc:	1ccd      	adds	r5, r1, #3
 80086de:	f025 0503 	bic.w	r5, r5, #3
 80086e2:	3508      	adds	r5, #8
 80086e4:	2d0c      	cmp	r5, #12
 80086e6:	bf38      	it	cc
 80086e8:	250c      	movcc	r5, #12
 80086ea:	2d00      	cmp	r5, #0
 80086ec:	4607      	mov	r7, r0
 80086ee:	db01      	blt.n	80086f4 <_malloc_r+0x1c>
 80086f0:	42a9      	cmp	r1, r5
 80086f2:	d905      	bls.n	8008700 <_malloc_r+0x28>
 80086f4:	230c      	movs	r3, #12
 80086f6:	2600      	movs	r6, #0
 80086f8:	603b      	str	r3, [r7, #0]
 80086fa:	4630      	mov	r0, r6
 80086fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008700:	4e2e      	ldr	r6, [pc, #184]	; (80087bc <_malloc_r+0xe4>)
 8008702:	f000 fa25 	bl	8008b50 <__malloc_lock>
 8008706:	6833      	ldr	r3, [r6, #0]
 8008708:	461c      	mov	r4, r3
 800870a:	bb34      	cbnz	r4, 800875a <_malloc_r+0x82>
 800870c:	4629      	mov	r1, r5
 800870e:	4638      	mov	r0, r7
 8008710:	f7ff ffc2 	bl	8008698 <sbrk_aligned>
 8008714:	1c43      	adds	r3, r0, #1
 8008716:	4604      	mov	r4, r0
 8008718:	d14d      	bne.n	80087b6 <_malloc_r+0xde>
 800871a:	6834      	ldr	r4, [r6, #0]
 800871c:	4626      	mov	r6, r4
 800871e:	2e00      	cmp	r6, #0
 8008720:	d140      	bne.n	80087a4 <_malloc_r+0xcc>
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	4631      	mov	r1, r6
 8008726:	4638      	mov	r0, r7
 8008728:	eb04 0803 	add.w	r8, r4, r3
 800872c:	f000 f9a4 	bl	8008a78 <_sbrk_r>
 8008730:	4580      	cmp	r8, r0
 8008732:	d13a      	bne.n	80087aa <_malloc_r+0xd2>
 8008734:	6821      	ldr	r1, [r4, #0]
 8008736:	3503      	adds	r5, #3
 8008738:	1a6d      	subs	r5, r5, r1
 800873a:	f025 0503 	bic.w	r5, r5, #3
 800873e:	3508      	adds	r5, #8
 8008740:	2d0c      	cmp	r5, #12
 8008742:	bf38      	it	cc
 8008744:	250c      	movcc	r5, #12
 8008746:	4638      	mov	r0, r7
 8008748:	4629      	mov	r1, r5
 800874a:	f7ff ffa5 	bl	8008698 <sbrk_aligned>
 800874e:	3001      	adds	r0, #1
 8008750:	d02b      	beq.n	80087aa <_malloc_r+0xd2>
 8008752:	6823      	ldr	r3, [r4, #0]
 8008754:	442b      	add	r3, r5
 8008756:	6023      	str	r3, [r4, #0]
 8008758:	e00e      	b.n	8008778 <_malloc_r+0xa0>
 800875a:	6822      	ldr	r2, [r4, #0]
 800875c:	1b52      	subs	r2, r2, r5
 800875e:	d41e      	bmi.n	800879e <_malloc_r+0xc6>
 8008760:	2a0b      	cmp	r2, #11
 8008762:	d916      	bls.n	8008792 <_malloc_r+0xba>
 8008764:	1961      	adds	r1, r4, r5
 8008766:	42a3      	cmp	r3, r4
 8008768:	6025      	str	r5, [r4, #0]
 800876a:	bf18      	it	ne
 800876c:	6059      	strne	r1, [r3, #4]
 800876e:	6863      	ldr	r3, [r4, #4]
 8008770:	bf08      	it	eq
 8008772:	6031      	streq	r1, [r6, #0]
 8008774:	5162      	str	r2, [r4, r5]
 8008776:	604b      	str	r3, [r1, #4]
 8008778:	4638      	mov	r0, r7
 800877a:	f104 060b 	add.w	r6, r4, #11
 800877e:	f000 f9ed 	bl	8008b5c <__malloc_unlock>
 8008782:	f026 0607 	bic.w	r6, r6, #7
 8008786:	1d23      	adds	r3, r4, #4
 8008788:	1af2      	subs	r2, r6, r3
 800878a:	d0b6      	beq.n	80086fa <_malloc_r+0x22>
 800878c:	1b9b      	subs	r3, r3, r6
 800878e:	50a3      	str	r3, [r4, r2]
 8008790:	e7b3      	b.n	80086fa <_malloc_r+0x22>
 8008792:	6862      	ldr	r2, [r4, #4]
 8008794:	42a3      	cmp	r3, r4
 8008796:	bf0c      	ite	eq
 8008798:	6032      	streq	r2, [r6, #0]
 800879a:	605a      	strne	r2, [r3, #4]
 800879c:	e7ec      	b.n	8008778 <_malloc_r+0xa0>
 800879e:	4623      	mov	r3, r4
 80087a0:	6864      	ldr	r4, [r4, #4]
 80087a2:	e7b2      	b.n	800870a <_malloc_r+0x32>
 80087a4:	4634      	mov	r4, r6
 80087a6:	6876      	ldr	r6, [r6, #4]
 80087a8:	e7b9      	b.n	800871e <_malloc_r+0x46>
 80087aa:	230c      	movs	r3, #12
 80087ac:	4638      	mov	r0, r7
 80087ae:	603b      	str	r3, [r7, #0]
 80087b0:	f000 f9d4 	bl	8008b5c <__malloc_unlock>
 80087b4:	e7a1      	b.n	80086fa <_malloc_r+0x22>
 80087b6:	6025      	str	r5, [r4, #0]
 80087b8:	e7de      	b.n	8008778 <_malloc_r+0xa0>
 80087ba:	bf00      	nop
 80087bc:	20000548 	.word	0x20000548

080087c0 <__ssputs_r>:
 80087c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087c4:	688e      	ldr	r6, [r1, #8]
 80087c6:	4682      	mov	sl, r0
 80087c8:	429e      	cmp	r6, r3
 80087ca:	460c      	mov	r4, r1
 80087cc:	4690      	mov	r8, r2
 80087ce:	461f      	mov	r7, r3
 80087d0:	d838      	bhi.n	8008844 <__ssputs_r+0x84>
 80087d2:	898a      	ldrh	r2, [r1, #12]
 80087d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087d8:	d032      	beq.n	8008840 <__ssputs_r+0x80>
 80087da:	6825      	ldr	r5, [r4, #0]
 80087dc:	6909      	ldr	r1, [r1, #16]
 80087de:	3301      	adds	r3, #1
 80087e0:	eba5 0901 	sub.w	r9, r5, r1
 80087e4:	6965      	ldr	r5, [r4, #20]
 80087e6:	444b      	add	r3, r9
 80087e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087f0:	106d      	asrs	r5, r5, #1
 80087f2:	429d      	cmp	r5, r3
 80087f4:	bf38      	it	cc
 80087f6:	461d      	movcc	r5, r3
 80087f8:	0553      	lsls	r3, r2, #21
 80087fa:	d531      	bpl.n	8008860 <__ssputs_r+0xa0>
 80087fc:	4629      	mov	r1, r5
 80087fe:	f7ff ff6b 	bl	80086d8 <_malloc_r>
 8008802:	4606      	mov	r6, r0
 8008804:	b950      	cbnz	r0, 800881c <__ssputs_r+0x5c>
 8008806:	230c      	movs	r3, #12
 8008808:	f04f 30ff 	mov.w	r0, #4294967295
 800880c:	f8ca 3000 	str.w	r3, [sl]
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008816:	81a3      	strh	r3, [r4, #12]
 8008818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800881c:	464a      	mov	r2, r9
 800881e:	6921      	ldr	r1, [r4, #16]
 8008820:	f7ff fb4e 	bl	8007ec0 <memcpy>
 8008824:	89a3      	ldrh	r3, [r4, #12]
 8008826:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800882a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800882e:	81a3      	strh	r3, [r4, #12]
 8008830:	6126      	str	r6, [r4, #16]
 8008832:	444e      	add	r6, r9
 8008834:	6026      	str	r6, [r4, #0]
 8008836:	463e      	mov	r6, r7
 8008838:	6165      	str	r5, [r4, #20]
 800883a:	eba5 0509 	sub.w	r5, r5, r9
 800883e:	60a5      	str	r5, [r4, #8]
 8008840:	42be      	cmp	r6, r7
 8008842:	d900      	bls.n	8008846 <__ssputs_r+0x86>
 8008844:	463e      	mov	r6, r7
 8008846:	4632      	mov	r2, r6
 8008848:	4641      	mov	r1, r8
 800884a:	6820      	ldr	r0, [r4, #0]
 800884c:	f000 f966 	bl	8008b1c <memmove>
 8008850:	68a3      	ldr	r3, [r4, #8]
 8008852:	2000      	movs	r0, #0
 8008854:	1b9b      	subs	r3, r3, r6
 8008856:	60a3      	str	r3, [r4, #8]
 8008858:	6823      	ldr	r3, [r4, #0]
 800885a:	4433      	add	r3, r6
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	e7db      	b.n	8008818 <__ssputs_r+0x58>
 8008860:	462a      	mov	r2, r5
 8008862:	f000 f981 	bl	8008b68 <_realloc_r>
 8008866:	4606      	mov	r6, r0
 8008868:	2800      	cmp	r0, #0
 800886a:	d1e1      	bne.n	8008830 <__ssputs_r+0x70>
 800886c:	4650      	mov	r0, sl
 800886e:	6921      	ldr	r1, [r4, #16]
 8008870:	f7ff feca 	bl	8008608 <_free_r>
 8008874:	e7c7      	b.n	8008806 <__ssputs_r+0x46>
	...

08008878 <_svfiprintf_r>:
 8008878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800887c:	4698      	mov	r8, r3
 800887e:	898b      	ldrh	r3, [r1, #12]
 8008880:	4607      	mov	r7, r0
 8008882:	061b      	lsls	r3, r3, #24
 8008884:	460d      	mov	r5, r1
 8008886:	4614      	mov	r4, r2
 8008888:	b09d      	sub	sp, #116	; 0x74
 800888a:	d50e      	bpl.n	80088aa <_svfiprintf_r+0x32>
 800888c:	690b      	ldr	r3, [r1, #16]
 800888e:	b963      	cbnz	r3, 80088aa <_svfiprintf_r+0x32>
 8008890:	2140      	movs	r1, #64	; 0x40
 8008892:	f7ff ff21 	bl	80086d8 <_malloc_r>
 8008896:	6028      	str	r0, [r5, #0]
 8008898:	6128      	str	r0, [r5, #16]
 800889a:	b920      	cbnz	r0, 80088a6 <_svfiprintf_r+0x2e>
 800889c:	230c      	movs	r3, #12
 800889e:	603b      	str	r3, [r7, #0]
 80088a0:	f04f 30ff 	mov.w	r0, #4294967295
 80088a4:	e0d1      	b.n	8008a4a <_svfiprintf_r+0x1d2>
 80088a6:	2340      	movs	r3, #64	; 0x40
 80088a8:	616b      	str	r3, [r5, #20]
 80088aa:	2300      	movs	r3, #0
 80088ac:	9309      	str	r3, [sp, #36]	; 0x24
 80088ae:	2320      	movs	r3, #32
 80088b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088b4:	2330      	movs	r3, #48	; 0x30
 80088b6:	f04f 0901 	mov.w	r9, #1
 80088ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80088be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008a64 <_svfiprintf_r+0x1ec>
 80088c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088c6:	4623      	mov	r3, r4
 80088c8:	469a      	mov	sl, r3
 80088ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088ce:	b10a      	cbz	r2, 80088d4 <_svfiprintf_r+0x5c>
 80088d0:	2a25      	cmp	r2, #37	; 0x25
 80088d2:	d1f9      	bne.n	80088c8 <_svfiprintf_r+0x50>
 80088d4:	ebba 0b04 	subs.w	fp, sl, r4
 80088d8:	d00b      	beq.n	80088f2 <_svfiprintf_r+0x7a>
 80088da:	465b      	mov	r3, fp
 80088dc:	4622      	mov	r2, r4
 80088de:	4629      	mov	r1, r5
 80088e0:	4638      	mov	r0, r7
 80088e2:	f7ff ff6d 	bl	80087c0 <__ssputs_r>
 80088e6:	3001      	adds	r0, #1
 80088e8:	f000 80aa 	beq.w	8008a40 <_svfiprintf_r+0x1c8>
 80088ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088ee:	445a      	add	r2, fp
 80088f0:	9209      	str	r2, [sp, #36]	; 0x24
 80088f2:	f89a 3000 	ldrb.w	r3, [sl]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f000 80a2 	beq.w	8008a40 <_svfiprintf_r+0x1c8>
 80088fc:	2300      	movs	r3, #0
 80088fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008902:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008906:	f10a 0a01 	add.w	sl, sl, #1
 800890a:	9304      	str	r3, [sp, #16]
 800890c:	9307      	str	r3, [sp, #28]
 800890e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008912:	931a      	str	r3, [sp, #104]	; 0x68
 8008914:	4654      	mov	r4, sl
 8008916:	2205      	movs	r2, #5
 8008918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800891c:	4851      	ldr	r0, [pc, #324]	; (8008a64 <_svfiprintf_r+0x1ec>)
 800891e:	f7ff fac1 	bl	8007ea4 <memchr>
 8008922:	9a04      	ldr	r2, [sp, #16]
 8008924:	b9d8      	cbnz	r0, 800895e <_svfiprintf_r+0xe6>
 8008926:	06d0      	lsls	r0, r2, #27
 8008928:	bf44      	itt	mi
 800892a:	2320      	movmi	r3, #32
 800892c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008930:	0711      	lsls	r1, r2, #28
 8008932:	bf44      	itt	mi
 8008934:	232b      	movmi	r3, #43	; 0x2b
 8008936:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800893a:	f89a 3000 	ldrb.w	r3, [sl]
 800893e:	2b2a      	cmp	r3, #42	; 0x2a
 8008940:	d015      	beq.n	800896e <_svfiprintf_r+0xf6>
 8008942:	4654      	mov	r4, sl
 8008944:	2000      	movs	r0, #0
 8008946:	f04f 0c0a 	mov.w	ip, #10
 800894a:	9a07      	ldr	r2, [sp, #28]
 800894c:	4621      	mov	r1, r4
 800894e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008952:	3b30      	subs	r3, #48	; 0x30
 8008954:	2b09      	cmp	r3, #9
 8008956:	d94e      	bls.n	80089f6 <_svfiprintf_r+0x17e>
 8008958:	b1b0      	cbz	r0, 8008988 <_svfiprintf_r+0x110>
 800895a:	9207      	str	r2, [sp, #28]
 800895c:	e014      	b.n	8008988 <_svfiprintf_r+0x110>
 800895e:	eba0 0308 	sub.w	r3, r0, r8
 8008962:	fa09 f303 	lsl.w	r3, r9, r3
 8008966:	4313      	orrs	r3, r2
 8008968:	46a2      	mov	sl, r4
 800896a:	9304      	str	r3, [sp, #16]
 800896c:	e7d2      	b.n	8008914 <_svfiprintf_r+0x9c>
 800896e:	9b03      	ldr	r3, [sp, #12]
 8008970:	1d19      	adds	r1, r3, #4
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	9103      	str	r1, [sp, #12]
 8008976:	2b00      	cmp	r3, #0
 8008978:	bfbb      	ittet	lt
 800897a:	425b      	neglt	r3, r3
 800897c:	f042 0202 	orrlt.w	r2, r2, #2
 8008980:	9307      	strge	r3, [sp, #28]
 8008982:	9307      	strlt	r3, [sp, #28]
 8008984:	bfb8      	it	lt
 8008986:	9204      	strlt	r2, [sp, #16]
 8008988:	7823      	ldrb	r3, [r4, #0]
 800898a:	2b2e      	cmp	r3, #46	; 0x2e
 800898c:	d10c      	bne.n	80089a8 <_svfiprintf_r+0x130>
 800898e:	7863      	ldrb	r3, [r4, #1]
 8008990:	2b2a      	cmp	r3, #42	; 0x2a
 8008992:	d135      	bne.n	8008a00 <_svfiprintf_r+0x188>
 8008994:	9b03      	ldr	r3, [sp, #12]
 8008996:	3402      	adds	r4, #2
 8008998:	1d1a      	adds	r2, r3, #4
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	9203      	str	r2, [sp, #12]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	bfb8      	it	lt
 80089a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80089a6:	9305      	str	r3, [sp, #20]
 80089a8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008a68 <_svfiprintf_r+0x1f0>
 80089ac:	2203      	movs	r2, #3
 80089ae:	4650      	mov	r0, sl
 80089b0:	7821      	ldrb	r1, [r4, #0]
 80089b2:	f7ff fa77 	bl	8007ea4 <memchr>
 80089b6:	b140      	cbz	r0, 80089ca <_svfiprintf_r+0x152>
 80089b8:	2340      	movs	r3, #64	; 0x40
 80089ba:	eba0 000a 	sub.w	r0, r0, sl
 80089be:	fa03 f000 	lsl.w	r0, r3, r0
 80089c2:	9b04      	ldr	r3, [sp, #16]
 80089c4:	3401      	adds	r4, #1
 80089c6:	4303      	orrs	r3, r0
 80089c8:	9304      	str	r3, [sp, #16]
 80089ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ce:	2206      	movs	r2, #6
 80089d0:	4826      	ldr	r0, [pc, #152]	; (8008a6c <_svfiprintf_r+0x1f4>)
 80089d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089d6:	f7ff fa65 	bl	8007ea4 <memchr>
 80089da:	2800      	cmp	r0, #0
 80089dc:	d038      	beq.n	8008a50 <_svfiprintf_r+0x1d8>
 80089de:	4b24      	ldr	r3, [pc, #144]	; (8008a70 <_svfiprintf_r+0x1f8>)
 80089e0:	bb1b      	cbnz	r3, 8008a2a <_svfiprintf_r+0x1b2>
 80089e2:	9b03      	ldr	r3, [sp, #12]
 80089e4:	3307      	adds	r3, #7
 80089e6:	f023 0307 	bic.w	r3, r3, #7
 80089ea:	3308      	adds	r3, #8
 80089ec:	9303      	str	r3, [sp, #12]
 80089ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089f0:	4433      	add	r3, r6
 80089f2:	9309      	str	r3, [sp, #36]	; 0x24
 80089f4:	e767      	b.n	80088c6 <_svfiprintf_r+0x4e>
 80089f6:	460c      	mov	r4, r1
 80089f8:	2001      	movs	r0, #1
 80089fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80089fe:	e7a5      	b.n	800894c <_svfiprintf_r+0xd4>
 8008a00:	2300      	movs	r3, #0
 8008a02:	f04f 0c0a 	mov.w	ip, #10
 8008a06:	4619      	mov	r1, r3
 8008a08:	3401      	adds	r4, #1
 8008a0a:	9305      	str	r3, [sp, #20]
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a12:	3a30      	subs	r2, #48	; 0x30
 8008a14:	2a09      	cmp	r2, #9
 8008a16:	d903      	bls.n	8008a20 <_svfiprintf_r+0x1a8>
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d0c5      	beq.n	80089a8 <_svfiprintf_r+0x130>
 8008a1c:	9105      	str	r1, [sp, #20]
 8008a1e:	e7c3      	b.n	80089a8 <_svfiprintf_r+0x130>
 8008a20:	4604      	mov	r4, r0
 8008a22:	2301      	movs	r3, #1
 8008a24:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a28:	e7f0      	b.n	8008a0c <_svfiprintf_r+0x194>
 8008a2a:	ab03      	add	r3, sp, #12
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	462a      	mov	r2, r5
 8008a30:	4638      	mov	r0, r7
 8008a32:	4b10      	ldr	r3, [pc, #64]	; (8008a74 <_svfiprintf_r+0x1fc>)
 8008a34:	a904      	add	r1, sp, #16
 8008a36:	f7fd ffcd 	bl	80069d4 <_printf_float>
 8008a3a:	1c42      	adds	r2, r0, #1
 8008a3c:	4606      	mov	r6, r0
 8008a3e:	d1d6      	bne.n	80089ee <_svfiprintf_r+0x176>
 8008a40:	89ab      	ldrh	r3, [r5, #12]
 8008a42:	065b      	lsls	r3, r3, #25
 8008a44:	f53f af2c 	bmi.w	80088a0 <_svfiprintf_r+0x28>
 8008a48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a4a:	b01d      	add	sp, #116	; 0x74
 8008a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a50:	ab03      	add	r3, sp, #12
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	462a      	mov	r2, r5
 8008a56:	4638      	mov	r0, r7
 8008a58:	4b06      	ldr	r3, [pc, #24]	; (8008a74 <_svfiprintf_r+0x1fc>)
 8008a5a:	a904      	add	r1, sp, #16
 8008a5c:	f7fe fa56 	bl	8006f0c <_printf_i>
 8008a60:	e7eb      	b.n	8008a3a <_svfiprintf_r+0x1c2>
 8008a62:	bf00      	nop
 8008a64:	0800aa1c 	.word	0x0800aa1c
 8008a68:	0800aa22 	.word	0x0800aa22
 8008a6c:	0800aa26 	.word	0x0800aa26
 8008a70:	080069d5 	.word	0x080069d5
 8008a74:	080087c1 	.word	0x080087c1

08008a78 <_sbrk_r>:
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	4d05      	ldr	r5, [pc, #20]	; (8008a94 <_sbrk_r+0x1c>)
 8008a7e:	4604      	mov	r4, r0
 8008a80:	4608      	mov	r0, r1
 8008a82:	602b      	str	r3, [r5, #0]
 8008a84:	f7fa fe42 	bl	800370c <_sbrk>
 8008a88:	1c43      	adds	r3, r0, #1
 8008a8a:	d102      	bne.n	8008a92 <_sbrk_r+0x1a>
 8008a8c:	682b      	ldr	r3, [r5, #0]
 8008a8e:	b103      	cbz	r3, 8008a92 <_sbrk_r+0x1a>
 8008a90:	6023      	str	r3, [r4, #0]
 8008a92:	bd38      	pop	{r3, r4, r5, pc}
 8008a94:	20000550 	.word	0x20000550

08008a98 <__assert_func>:
 8008a98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a9a:	4614      	mov	r4, r2
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	4b09      	ldr	r3, [pc, #36]	; (8008ac4 <__assert_func+0x2c>)
 8008aa0:	4605      	mov	r5, r0
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	68d8      	ldr	r0, [r3, #12]
 8008aa6:	b14c      	cbz	r4, 8008abc <__assert_func+0x24>
 8008aa8:	4b07      	ldr	r3, [pc, #28]	; (8008ac8 <__assert_func+0x30>)
 8008aaa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008aae:	9100      	str	r1, [sp, #0]
 8008ab0:	462b      	mov	r3, r5
 8008ab2:	4906      	ldr	r1, [pc, #24]	; (8008acc <__assert_func+0x34>)
 8008ab4:	f000 f80e 	bl	8008ad4 <fiprintf>
 8008ab8:	f000 faaa 	bl	8009010 <abort>
 8008abc:	4b04      	ldr	r3, [pc, #16]	; (8008ad0 <__assert_func+0x38>)
 8008abe:	461c      	mov	r4, r3
 8008ac0:	e7f3      	b.n	8008aaa <__assert_func+0x12>
 8008ac2:	bf00      	nop
 8008ac4:	20000010 	.word	0x20000010
 8008ac8:	0800aa2d 	.word	0x0800aa2d
 8008acc:	0800aa3a 	.word	0x0800aa3a
 8008ad0:	0800aa68 	.word	0x0800aa68

08008ad4 <fiprintf>:
 8008ad4:	b40e      	push	{r1, r2, r3}
 8008ad6:	b503      	push	{r0, r1, lr}
 8008ad8:	4601      	mov	r1, r0
 8008ada:	ab03      	add	r3, sp, #12
 8008adc:	4805      	ldr	r0, [pc, #20]	; (8008af4 <fiprintf+0x20>)
 8008ade:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ae2:	6800      	ldr	r0, [r0, #0]
 8008ae4:	9301      	str	r3, [sp, #4]
 8008ae6:	f000 f895 	bl	8008c14 <_vfiprintf_r>
 8008aea:	b002      	add	sp, #8
 8008aec:	f85d eb04 	ldr.w	lr, [sp], #4
 8008af0:	b003      	add	sp, #12
 8008af2:	4770      	bx	lr
 8008af4:	20000010 	.word	0x20000010

08008af8 <__ascii_mbtowc>:
 8008af8:	b082      	sub	sp, #8
 8008afa:	b901      	cbnz	r1, 8008afe <__ascii_mbtowc+0x6>
 8008afc:	a901      	add	r1, sp, #4
 8008afe:	b142      	cbz	r2, 8008b12 <__ascii_mbtowc+0x1a>
 8008b00:	b14b      	cbz	r3, 8008b16 <__ascii_mbtowc+0x1e>
 8008b02:	7813      	ldrb	r3, [r2, #0]
 8008b04:	600b      	str	r3, [r1, #0]
 8008b06:	7812      	ldrb	r2, [r2, #0]
 8008b08:	1e10      	subs	r0, r2, #0
 8008b0a:	bf18      	it	ne
 8008b0c:	2001      	movne	r0, #1
 8008b0e:	b002      	add	sp, #8
 8008b10:	4770      	bx	lr
 8008b12:	4610      	mov	r0, r2
 8008b14:	e7fb      	b.n	8008b0e <__ascii_mbtowc+0x16>
 8008b16:	f06f 0001 	mvn.w	r0, #1
 8008b1a:	e7f8      	b.n	8008b0e <__ascii_mbtowc+0x16>

08008b1c <memmove>:
 8008b1c:	4288      	cmp	r0, r1
 8008b1e:	b510      	push	{r4, lr}
 8008b20:	eb01 0402 	add.w	r4, r1, r2
 8008b24:	d902      	bls.n	8008b2c <memmove+0x10>
 8008b26:	4284      	cmp	r4, r0
 8008b28:	4623      	mov	r3, r4
 8008b2a:	d807      	bhi.n	8008b3c <memmove+0x20>
 8008b2c:	1e43      	subs	r3, r0, #1
 8008b2e:	42a1      	cmp	r1, r4
 8008b30:	d008      	beq.n	8008b44 <memmove+0x28>
 8008b32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b3a:	e7f8      	b.n	8008b2e <memmove+0x12>
 8008b3c:	4601      	mov	r1, r0
 8008b3e:	4402      	add	r2, r0
 8008b40:	428a      	cmp	r2, r1
 8008b42:	d100      	bne.n	8008b46 <memmove+0x2a>
 8008b44:	bd10      	pop	{r4, pc}
 8008b46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b4e:	e7f7      	b.n	8008b40 <memmove+0x24>

08008b50 <__malloc_lock>:
 8008b50:	4801      	ldr	r0, [pc, #4]	; (8008b58 <__malloc_lock+0x8>)
 8008b52:	f000 bc19 	b.w	8009388 <__retarget_lock_acquire_recursive>
 8008b56:	bf00      	nop
 8008b58:	20000554 	.word	0x20000554

08008b5c <__malloc_unlock>:
 8008b5c:	4801      	ldr	r0, [pc, #4]	; (8008b64 <__malloc_unlock+0x8>)
 8008b5e:	f000 bc14 	b.w	800938a <__retarget_lock_release_recursive>
 8008b62:	bf00      	nop
 8008b64:	20000554 	.word	0x20000554

08008b68 <_realloc_r>:
 8008b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b6c:	4680      	mov	r8, r0
 8008b6e:	4614      	mov	r4, r2
 8008b70:	460e      	mov	r6, r1
 8008b72:	b921      	cbnz	r1, 8008b7e <_realloc_r+0x16>
 8008b74:	4611      	mov	r1, r2
 8008b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b7a:	f7ff bdad 	b.w	80086d8 <_malloc_r>
 8008b7e:	b92a      	cbnz	r2, 8008b8c <_realloc_r+0x24>
 8008b80:	f7ff fd42 	bl	8008608 <_free_r>
 8008b84:	4625      	mov	r5, r4
 8008b86:	4628      	mov	r0, r5
 8008b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b8c:	f000 fc64 	bl	8009458 <_malloc_usable_size_r>
 8008b90:	4284      	cmp	r4, r0
 8008b92:	4607      	mov	r7, r0
 8008b94:	d802      	bhi.n	8008b9c <_realloc_r+0x34>
 8008b96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b9a:	d812      	bhi.n	8008bc2 <_realloc_r+0x5a>
 8008b9c:	4621      	mov	r1, r4
 8008b9e:	4640      	mov	r0, r8
 8008ba0:	f7ff fd9a 	bl	80086d8 <_malloc_r>
 8008ba4:	4605      	mov	r5, r0
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	d0ed      	beq.n	8008b86 <_realloc_r+0x1e>
 8008baa:	42bc      	cmp	r4, r7
 8008bac:	4622      	mov	r2, r4
 8008bae:	4631      	mov	r1, r6
 8008bb0:	bf28      	it	cs
 8008bb2:	463a      	movcs	r2, r7
 8008bb4:	f7ff f984 	bl	8007ec0 <memcpy>
 8008bb8:	4631      	mov	r1, r6
 8008bba:	4640      	mov	r0, r8
 8008bbc:	f7ff fd24 	bl	8008608 <_free_r>
 8008bc0:	e7e1      	b.n	8008b86 <_realloc_r+0x1e>
 8008bc2:	4635      	mov	r5, r6
 8008bc4:	e7df      	b.n	8008b86 <_realloc_r+0x1e>

08008bc6 <__sfputc_r>:
 8008bc6:	6893      	ldr	r3, [r2, #8]
 8008bc8:	b410      	push	{r4}
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	6093      	str	r3, [r2, #8]
 8008bd0:	da07      	bge.n	8008be2 <__sfputc_r+0x1c>
 8008bd2:	6994      	ldr	r4, [r2, #24]
 8008bd4:	42a3      	cmp	r3, r4
 8008bd6:	db01      	blt.n	8008bdc <__sfputc_r+0x16>
 8008bd8:	290a      	cmp	r1, #10
 8008bda:	d102      	bne.n	8008be2 <__sfputc_r+0x1c>
 8008bdc:	bc10      	pop	{r4}
 8008bde:	f000 b949 	b.w	8008e74 <__swbuf_r>
 8008be2:	6813      	ldr	r3, [r2, #0]
 8008be4:	1c58      	adds	r0, r3, #1
 8008be6:	6010      	str	r0, [r2, #0]
 8008be8:	7019      	strb	r1, [r3, #0]
 8008bea:	4608      	mov	r0, r1
 8008bec:	bc10      	pop	{r4}
 8008bee:	4770      	bx	lr

08008bf0 <__sfputs_r>:
 8008bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bf2:	4606      	mov	r6, r0
 8008bf4:	460f      	mov	r7, r1
 8008bf6:	4614      	mov	r4, r2
 8008bf8:	18d5      	adds	r5, r2, r3
 8008bfa:	42ac      	cmp	r4, r5
 8008bfc:	d101      	bne.n	8008c02 <__sfputs_r+0x12>
 8008bfe:	2000      	movs	r0, #0
 8008c00:	e007      	b.n	8008c12 <__sfputs_r+0x22>
 8008c02:	463a      	mov	r2, r7
 8008c04:	4630      	mov	r0, r6
 8008c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c0a:	f7ff ffdc 	bl	8008bc6 <__sfputc_r>
 8008c0e:	1c43      	adds	r3, r0, #1
 8008c10:	d1f3      	bne.n	8008bfa <__sfputs_r+0xa>
 8008c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c14 <_vfiprintf_r>:
 8008c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c18:	460d      	mov	r5, r1
 8008c1a:	4614      	mov	r4, r2
 8008c1c:	4698      	mov	r8, r3
 8008c1e:	4606      	mov	r6, r0
 8008c20:	b09d      	sub	sp, #116	; 0x74
 8008c22:	b118      	cbz	r0, 8008c2c <_vfiprintf_r+0x18>
 8008c24:	6983      	ldr	r3, [r0, #24]
 8008c26:	b90b      	cbnz	r3, 8008c2c <_vfiprintf_r+0x18>
 8008c28:	f000 fb10 	bl	800924c <__sinit>
 8008c2c:	4b89      	ldr	r3, [pc, #548]	; (8008e54 <_vfiprintf_r+0x240>)
 8008c2e:	429d      	cmp	r5, r3
 8008c30:	d11b      	bne.n	8008c6a <_vfiprintf_r+0x56>
 8008c32:	6875      	ldr	r5, [r6, #4]
 8008c34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c36:	07d9      	lsls	r1, r3, #31
 8008c38:	d405      	bmi.n	8008c46 <_vfiprintf_r+0x32>
 8008c3a:	89ab      	ldrh	r3, [r5, #12]
 8008c3c:	059a      	lsls	r2, r3, #22
 8008c3e:	d402      	bmi.n	8008c46 <_vfiprintf_r+0x32>
 8008c40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c42:	f000 fba1 	bl	8009388 <__retarget_lock_acquire_recursive>
 8008c46:	89ab      	ldrh	r3, [r5, #12]
 8008c48:	071b      	lsls	r3, r3, #28
 8008c4a:	d501      	bpl.n	8008c50 <_vfiprintf_r+0x3c>
 8008c4c:	692b      	ldr	r3, [r5, #16]
 8008c4e:	b9eb      	cbnz	r3, 8008c8c <_vfiprintf_r+0x78>
 8008c50:	4629      	mov	r1, r5
 8008c52:	4630      	mov	r0, r6
 8008c54:	f000 f96e 	bl	8008f34 <__swsetup_r>
 8008c58:	b1c0      	cbz	r0, 8008c8c <_vfiprintf_r+0x78>
 8008c5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c5c:	07dc      	lsls	r4, r3, #31
 8008c5e:	d50e      	bpl.n	8008c7e <_vfiprintf_r+0x6a>
 8008c60:	f04f 30ff 	mov.w	r0, #4294967295
 8008c64:	b01d      	add	sp, #116	; 0x74
 8008c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c6a:	4b7b      	ldr	r3, [pc, #492]	; (8008e58 <_vfiprintf_r+0x244>)
 8008c6c:	429d      	cmp	r5, r3
 8008c6e:	d101      	bne.n	8008c74 <_vfiprintf_r+0x60>
 8008c70:	68b5      	ldr	r5, [r6, #8]
 8008c72:	e7df      	b.n	8008c34 <_vfiprintf_r+0x20>
 8008c74:	4b79      	ldr	r3, [pc, #484]	; (8008e5c <_vfiprintf_r+0x248>)
 8008c76:	429d      	cmp	r5, r3
 8008c78:	bf08      	it	eq
 8008c7a:	68f5      	ldreq	r5, [r6, #12]
 8008c7c:	e7da      	b.n	8008c34 <_vfiprintf_r+0x20>
 8008c7e:	89ab      	ldrh	r3, [r5, #12]
 8008c80:	0598      	lsls	r0, r3, #22
 8008c82:	d4ed      	bmi.n	8008c60 <_vfiprintf_r+0x4c>
 8008c84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c86:	f000 fb80 	bl	800938a <__retarget_lock_release_recursive>
 8008c8a:	e7e9      	b.n	8008c60 <_vfiprintf_r+0x4c>
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c90:	2320      	movs	r3, #32
 8008c92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c96:	2330      	movs	r3, #48	; 0x30
 8008c98:	f04f 0901 	mov.w	r9, #1
 8008c9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ca0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008e60 <_vfiprintf_r+0x24c>
 8008ca4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ca8:	4623      	mov	r3, r4
 8008caa:	469a      	mov	sl, r3
 8008cac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cb0:	b10a      	cbz	r2, 8008cb6 <_vfiprintf_r+0xa2>
 8008cb2:	2a25      	cmp	r2, #37	; 0x25
 8008cb4:	d1f9      	bne.n	8008caa <_vfiprintf_r+0x96>
 8008cb6:	ebba 0b04 	subs.w	fp, sl, r4
 8008cba:	d00b      	beq.n	8008cd4 <_vfiprintf_r+0xc0>
 8008cbc:	465b      	mov	r3, fp
 8008cbe:	4622      	mov	r2, r4
 8008cc0:	4629      	mov	r1, r5
 8008cc2:	4630      	mov	r0, r6
 8008cc4:	f7ff ff94 	bl	8008bf0 <__sfputs_r>
 8008cc8:	3001      	adds	r0, #1
 8008cca:	f000 80aa 	beq.w	8008e22 <_vfiprintf_r+0x20e>
 8008cce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cd0:	445a      	add	r2, fp
 8008cd2:	9209      	str	r2, [sp, #36]	; 0x24
 8008cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f000 80a2 	beq.w	8008e22 <_vfiprintf_r+0x20e>
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ce4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ce8:	f10a 0a01 	add.w	sl, sl, #1
 8008cec:	9304      	str	r3, [sp, #16]
 8008cee:	9307      	str	r3, [sp, #28]
 8008cf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cf4:	931a      	str	r3, [sp, #104]	; 0x68
 8008cf6:	4654      	mov	r4, sl
 8008cf8:	2205      	movs	r2, #5
 8008cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cfe:	4858      	ldr	r0, [pc, #352]	; (8008e60 <_vfiprintf_r+0x24c>)
 8008d00:	f7ff f8d0 	bl	8007ea4 <memchr>
 8008d04:	9a04      	ldr	r2, [sp, #16]
 8008d06:	b9d8      	cbnz	r0, 8008d40 <_vfiprintf_r+0x12c>
 8008d08:	06d1      	lsls	r1, r2, #27
 8008d0a:	bf44      	itt	mi
 8008d0c:	2320      	movmi	r3, #32
 8008d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d12:	0713      	lsls	r3, r2, #28
 8008d14:	bf44      	itt	mi
 8008d16:	232b      	movmi	r3, #43	; 0x2b
 8008d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d20:	2b2a      	cmp	r3, #42	; 0x2a
 8008d22:	d015      	beq.n	8008d50 <_vfiprintf_r+0x13c>
 8008d24:	4654      	mov	r4, sl
 8008d26:	2000      	movs	r0, #0
 8008d28:	f04f 0c0a 	mov.w	ip, #10
 8008d2c:	9a07      	ldr	r2, [sp, #28]
 8008d2e:	4621      	mov	r1, r4
 8008d30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d34:	3b30      	subs	r3, #48	; 0x30
 8008d36:	2b09      	cmp	r3, #9
 8008d38:	d94e      	bls.n	8008dd8 <_vfiprintf_r+0x1c4>
 8008d3a:	b1b0      	cbz	r0, 8008d6a <_vfiprintf_r+0x156>
 8008d3c:	9207      	str	r2, [sp, #28]
 8008d3e:	e014      	b.n	8008d6a <_vfiprintf_r+0x156>
 8008d40:	eba0 0308 	sub.w	r3, r0, r8
 8008d44:	fa09 f303 	lsl.w	r3, r9, r3
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	46a2      	mov	sl, r4
 8008d4c:	9304      	str	r3, [sp, #16]
 8008d4e:	e7d2      	b.n	8008cf6 <_vfiprintf_r+0xe2>
 8008d50:	9b03      	ldr	r3, [sp, #12]
 8008d52:	1d19      	adds	r1, r3, #4
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	9103      	str	r1, [sp, #12]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	bfbb      	ittet	lt
 8008d5c:	425b      	neglt	r3, r3
 8008d5e:	f042 0202 	orrlt.w	r2, r2, #2
 8008d62:	9307      	strge	r3, [sp, #28]
 8008d64:	9307      	strlt	r3, [sp, #28]
 8008d66:	bfb8      	it	lt
 8008d68:	9204      	strlt	r2, [sp, #16]
 8008d6a:	7823      	ldrb	r3, [r4, #0]
 8008d6c:	2b2e      	cmp	r3, #46	; 0x2e
 8008d6e:	d10c      	bne.n	8008d8a <_vfiprintf_r+0x176>
 8008d70:	7863      	ldrb	r3, [r4, #1]
 8008d72:	2b2a      	cmp	r3, #42	; 0x2a
 8008d74:	d135      	bne.n	8008de2 <_vfiprintf_r+0x1ce>
 8008d76:	9b03      	ldr	r3, [sp, #12]
 8008d78:	3402      	adds	r4, #2
 8008d7a:	1d1a      	adds	r2, r3, #4
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	9203      	str	r2, [sp, #12]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	bfb8      	it	lt
 8008d84:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d88:	9305      	str	r3, [sp, #20]
 8008d8a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008e64 <_vfiprintf_r+0x250>
 8008d8e:	2203      	movs	r2, #3
 8008d90:	4650      	mov	r0, sl
 8008d92:	7821      	ldrb	r1, [r4, #0]
 8008d94:	f7ff f886 	bl	8007ea4 <memchr>
 8008d98:	b140      	cbz	r0, 8008dac <_vfiprintf_r+0x198>
 8008d9a:	2340      	movs	r3, #64	; 0x40
 8008d9c:	eba0 000a 	sub.w	r0, r0, sl
 8008da0:	fa03 f000 	lsl.w	r0, r3, r0
 8008da4:	9b04      	ldr	r3, [sp, #16]
 8008da6:	3401      	adds	r4, #1
 8008da8:	4303      	orrs	r3, r0
 8008daa:	9304      	str	r3, [sp, #16]
 8008dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008db0:	2206      	movs	r2, #6
 8008db2:	482d      	ldr	r0, [pc, #180]	; (8008e68 <_vfiprintf_r+0x254>)
 8008db4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008db8:	f7ff f874 	bl	8007ea4 <memchr>
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	d03f      	beq.n	8008e40 <_vfiprintf_r+0x22c>
 8008dc0:	4b2a      	ldr	r3, [pc, #168]	; (8008e6c <_vfiprintf_r+0x258>)
 8008dc2:	bb1b      	cbnz	r3, 8008e0c <_vfiprintf_r+0x1f8>
 8008dc4:	9b03      	ldr	r3, [sp, #12]
 8008dc6:	3307      	adds	r3, #7
 8008dc8:	f023 0307 	bic.w	r3, r3, #7
 8008dcc:	3308      	adds	r3, #8
 8008dce:	9303      	str	r3, [sp, #12]
 8008dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dd2:	443b      	add	r3, r7
 8008dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8008dd6:	e767      	b.n	8008ca8 <_vfiprintf_r+0x94>
 8008dd8:	460c      	mov	r4, r1
 8008dda:	2001      	movs	r0, #1
 8008ddc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008de0:	e7a5      	b.n	8008d2e <_vfiprintf_r+0x11a>
 8008de2:	2300      	movs	r3, #0
 8008de4:	f04f 0c0a 	mov.w	ip, #10
 8008de8:	4619      	mov	r1, r3
 8008dea:	3401      	adds	r4, #1
 8008dec:	9305      	str	r3, [sp, #20]
 8008dee:	4620      	mov	r0, r4
 8008df0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008df4:	3a30      	subs	r2, #48	; 0x30
 8008df6:	2a09      	cmp	r2, #9
 8008df8:	d903      	bls.n	8008e02 <_vfiprintf_r+0x1ee>
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d0c5      	beq.n	8008d8a <_vfiprintf_r+0x176>
 8008dfe:	9105      	str	r1, [sp, #20]
 8008e00:	e7c3      	b.n	8008d8a <_vfiprintf_r+0x176>
 8008e02:	4604      	mov	r4, r0
 8008e04:	2301      	movs	r3, #1
 8008e06:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e0a:	e7f0      	b.n	8008dee <_vfiprintf_r+0x1da>
 8008e0c:	ab03      	add	r3, sp, #12
 8008e0e:	9300      	str	r3, [sp, #0]
 8008e10:	462a      	mov	r2, r5
 8008e12:	4630      	mov	r0, r6
 8008e14:	4b16      	ldr	r3, [pc, #88]	; (8008e70 <_vfiprintf_r+0x25c>)
 8008e16:	a904      	add	r1, sp, #16
 8008e18:	f7fd fddc 	bl	80069d4 <_printf_float>
 8008e1c:	4607      	mov	r7, r0
 8008e1e:	1c78      	adds	r0, r7, #1
 8008e20:	d1d6      	bne.n	8008dd0 <_vfiprintf_r+0x1bc>
 8008e22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e24:	07d9      	lsls	r1, r3, #31
 8008e26:	d405      	bmi.n	8008e34 <_vfiprintf_r+0x220>
 8008e28:	89ab      	ldrh	r3, [r5, #12]
 8008e2a:	059a      	lsls	r2, r3, #22
 8008e2c:	d402      	bmi.n	8008e34 <_vfiprintf_r+0x220>
 8008e2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e30:	f000 faab 	bl	800938a <__retarget_lock_release_recursive>
 8008e34:	89ab      	ldrh	r3, [r5, #12]
 8008e36:	065b      	lsls	r3, r3, #25
 8008e38:	f53f af12 	bmi.w	8008c60 <_vfiprintf_r+0x4c>
 8008e3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e3e:	e711      	b.n	8008c64 <_vfiprintf_r+0x50>
 8008e40:	ab03      	add	r3, sp, #12
 8008e42:	9300      	str	r3, [sp, #0]
 8008e44:	462a      	mov	r2, r5
 8008e46:	4630      	mov	r0, r6
 8008e48:	4b09      	ldr	r3, [pc, #36]	; (8008e70 <_vfiprintf_r+0x25c>)
 8008e4a:	a904      	add	r1, sp, #16
 8008e4c:	f7fe f85e 	bl	8006f0c <_printf_i>
 8008e50:	e7e4      	b.n	8008e1c <_vfiprintf_r+0x208>
 8008e52:	bf00      	nop
 8008e54:	0800ab94 	.word	0x0800ab94
 8008e58:	0800abb4 	.word	0x0800abb4
 8008e5c:	0800ab74 	.word	0x0800ab74
 8008e60:	0800aa1c 	.word	0x0800aa1c
 8008e64:	0800aa22 	.word	0x0800aa22
 8008e68:	0800aa26 	.word	0x0800aa26
 8008e6c:	080069d5 	.word	0x080069d5
 8008e70:	08008bf1 	.word	0x08008bf1

08008e74 <__swbuf_r>:
 8008e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e76:	460e      	mov	r6, r1
 8008e78:	4614      	mov	r4, r2
 8008e7a:	4605      	mov	r5, r0
 8008e7c:	b118      	cbz	r0, 8008e86 <__swbuf_r+0x12>
 8008e7e:	6983      	ldr	r3, [r0, #24]
 8008e80:	b90b      	cbnz	r3, 8008e86 <__swbuf_r+0x12>
 8008e82:	f000 f9e3 	bl	800924c <__sinit>
 8008e86:	4b21      	ldr	r3, [pc, #132]	; (8008f0c <__swbuf_r+0x98>)
 8008e88:	429c      	cmp	r4, r3
 8008e8a:	d12b      	bne.n	8008ee4 <__swbuf_r+0x70>
 8008e8c:	686c      	ldr	r4, [r5, #4]
 8008e8e:	69a3      	ldr	r3, [r4, #24]
 8008e90:	60a3      	str	r3, [r4, #8]
 8008e92:	89a3      	ldrh	r3, [r4, #12]
 8008e94:	071a      	lsls	r2, r3, #28
 8008e96:	d52f      	bpl.n	8008ef8 <__swbuf_r+0x84>
 8008e98:	6923      	ldr	r3, [r4, #16]
 8008e9a:	b36b      	cbz	r3, 8008ef8 <__swbuf_r+0x84>
 8008e9c:	6923      	ldr	r3, [r4, #16]
 8008e9e:	6820      	ldr	r0, [r4, #0]
 8008ea0:	b2f6      	uxtb	r6, r6
 8008ea2:	1ac0      	subs	r0, r0, r3
 8008ea4:	6963      	ldr	r3, [r4, #20]
 8008ea6:	4637      	mov	r7, r6
 8008ea8:	4283      	cmp	r3, r0
 8008eaa:	dc04      	bgt.n	8008eb6 <__swbuf_r+0x42>
 8008eac:	4621      	mov	r1, r4
 8008eae:	4628      	mov	r0, r5
 8008eb0:	f000 f938 	bl	8009124 <_fflush_r>
 8008eb4:	bb30      	cbnz	r0, 8008f04 <__swbuf_r+0x90>
 8008eb6:	68a3      	ldr	r3, [r4, #8]
 8008eb8:	3001      	adds	r0, #1
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	60a3      	str	r3, [r4, #8]
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	1c5a      	adds	r2, r3, #1
 8008ec2:	6022      	str	r2, [r4, #0]
 8008ec4:	701e      	strb	r6, [r3, #0]
 8008ec6:	6963      	ldr	r3, [r4, #20]
 8008ec8:	4283      	cmp	r3, r0
 8008eca:	d004      	beq.n	8008ed6 <__swbuf_r+0x62>
 8008ecc:	89a3      	ldrh	r3, [r4, #12]
 8008ece:	07db      	lsls	r3, r3, #31
 8008ed0:	d506      	bpl.n	8008ee0 <__swbuf_r+0x6c>
 8008ed2:	2e0a      	cmp	r6, #10
 8008ed4:	d104      	bne.n	8008ee0 <__swbuf_r+0x6c>
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	4628      	mov	r0, r5
 8008eda:	f000 f923 	bl	8009124 <_fflush_r>
 8008ede:	b988      	cbnz	r0, 8008f04 <__swbuf_r+0x90>
 8008ee0:	4638      	mov	r0, r7
 8008ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ee4:	4b0a      	ldr	r3, [pc, #40]	; (8008f10 <__swbuf_r+0x9c>)
 8008ee6:	429c      	cmp	r4, r3
 8008ee8:	d101      	bne.n	8008eee <__swbuf_r+0x7a>
 8008eea:	68ac      	ldr	r4, [r5, #8]
 8008eec:	e7cf      	b.n	8008e8e <__swbuf_r+0x1a>
 8008eee:	4b09      	ldr	r3, [pc, #36]	; (8008f14 <__swbuf_r+0xa0>)
 8008ef0:	429c      	cmp	r4, r3
 8008ef2:	bf08      	it	eq
 8008ef4:	68ec      	ldreq	r4, [r5, #12]
 8008ef6:	e7ca      	b.n	8008e8e <__swbuf_r+0x1a>
 8008ef8:	4621      	mov	r1, r4
 8008efa:	4628      	mov	r0, r5
 8008efc:	f000 f81a 	bl	8008f34 <__swsetup_r>
 8008f00:	2800      	cmp	r0, #0
 8008f02:	d0cb      	beq.n	8008e9c <__swbuf_r+0x28>
 8008f04:	f04f 37ff 	mov.w	r7, #4294967295
 8008f08:	e7ea      	b.n	8008ee0 <__swbuf_r+0x6c>
 8008f0a:	bf00      	nop
 8008f0c:	0800ab94 	.word	0x0800ab94
 8008f10:	0800abb4 	.word	0x0800abb4
 8008f14:	0800ab74 	.word	0x0800ab74

08008f18 <__ascii_wctomb>:
 8008f18:	4603      	mov	r3, r0
 8008f1a:	4608      	mov	r0, r1
 8008f1c:	b141      	cbz	r1, 8008f30 <__ascii_wctomb+0x18>
 8008f1e:	2aff      	cmp	r2, #255	; 0xff
 8008f20:	d904      	bls.n	8008f2c <__ascii_wctomb+0x14>
 8008f22:	228a      	movs	r2, #138	; 0x8a
 8008f24:	f04f 30ff 	mov.w	r0, #4294967295
 8008f28:	601a      	str	r2, [r3, #0]
 8008f2a:	4770      	bx	lr
 8008f2c:	2001      	movs	r0, #1
 8008f2e:	700a      	strb	r2, [r1, #0]
 8008f30:	4770      	bx	lr
	...

08008f34 <__swsetup_r>:
 8008f34:	4b32      	ldr	r3, [pc, #200]	; (8009000 <__swsetup_r+0xcc>)
 8008f36:	b570      	push	{r4, r5, r6, lr}
 8008f38:	681d      	ldr	r5, [r3, #0]
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	460c      	mov	r4, r1
 8008f3e:	b125      	cbz	r5, 8008f4a <__swsetup_r+0x16>
 8008f40:	69ab      	ldr	r3, [r5, #24]
 8008f42:	b913      	cbnz	r3, 8008f4a <__swsetup_r+0x16>
 8008f44:	4628      	mov	r0, r5
 8008f46:	f000 f981 	bl	800924c <__sinit>
 8008f4a:	4b2e      	ldr	r3, [pc, #184]	; (8009004 <__swsetup_r+0xd0>)
 8008f4c:	429c      	cmp	r4, r3
 8008f4e:	d10f      	bne.n	8008f70 <__swsetup_r+0x3c>
 8008f50:	686c      	ldr	r4, [r5, #4]
 8008f52:	89a3      	ldrh	r3, [r4, #12]
 8008f54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f58:	0719      	lsls	r1, r3, #28
 8008f5a:	d42c      	bmi.n	8008fb6 <__swsetup_r+0x82>
 8008f5c:	06dd      	lsls	r5, r3, #27
 8008f5e:	d411      	bmi.n	8008f84 <__swsetup_r+0x50>
 8008f60:	2309      	movs	r3, #9
 8008f62:	6033      	str	r3, [r6, #0]
 8008f64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f68:	f04f 30ff 	mov.w	r0, #4294967295
 8008f6c:	81a3      	strh	r3, [r4, #12]
 8008f6e:	e03e      	b.n	8008fee <__swsetup_r+0xba>
 8008f70:	4b25      	ldr	r3, [pc, #148]	; (8009008 <__swsetup_r+0xd4>)
 8008f72:	429c      	cmp	r4, r3
 8008f74:	d101      	bne.n	8008f7a <__swsetup_r+0x46>
 8008f76:	68ac      	ldr	r4, [r5, #8]
 8008f78:	e7eb      	b.n	8008f52 <__swsetup_r+0x1e>
 8008f7a:	4b24      	ldr	r3, [pc, #144]	; (800900c <__swsetup_r+0xd8>)
 8008f7c:	429c      	cmp	r4, r3
 8008f7e:	bf08      	it	eq
 8008f80:	68ec      	ldreq	r4, [r5, #12]
 8008f82:	e7e6      	b.n	8008f52 <__swsetup_r+0x1e>
 8008f84:	0758      	lsls	r0, r3, #29
 8008f86:	d512      	bpl.n	8008fae <__swsetup_r+0x7a>
 8008f88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f8a:	b141      	cbz	r1, 8008f9e <__swsetup_r+0x6a>
 8008f8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f90:	4299      	cmp	r1, r3
 8008f92:	d002      	beq.n	8008f9a <__swsetup_r+0x66>
 8008f94:	4630      	mov	r0, r6
 8008f96:	f7ff fb37 	bl	8008608 <_free_r>
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	6363      	str	r3, [r4, #52]	; 0x34
 8008f9e:	89a3      	ldrh	r3, [r4, #12]
 8008fa0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008fa4:	81a3      	strh	r3, [r4, #12]
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	6063      	str	r3, [r4, #4]
 8008faa:	6923      	ldr	r3, [r4, #16]
 8008fac:	6023      	str	r3, [r4, #0]
 8008fae:	89a3      	ldrh	r3, [r4, #12]
 8008fb0:	f043 0308 	orr.w	r3, r3, #8
 8008fb4:	81a3      	strh	r3, [r4, #12]
 8008fb6:	6923      	ldr	r3, [r4, #16]
 8008fb8:	b94b      	cbnz	r3, 8008fce <__swsetup_r+0x9a>
 8008fba:	89a3      	ldrh	r3, [r4, #12]
 8008fbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fc4:	d003      	beq.n	8008fce <__swsetup_r+0x9a>
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	4630      	mov	r0, r6
 8008fca:	f000 fa05 	bl	80093d8 <__smakebuf_r>
 8008fce:	89a0      	ldrh	r0, [r4, #12]
 8008fd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fd4:	f010 0301 	ands.w	r3, r0, #1
 8008fd8:	d00a      	beq.n	8008ff0 <__swsetup_r+0xbc>
 8008fda:	2300      	movs	r3, #0
 8008fdc:	60a3      	str	r3, [r4, #8]
 8008fde:	6963      	ldr	r3, [r4, #20]
 8008fe0:	425b      	negs	r3, r3
 8008fe2:	61a3      	str	r3, [r4, #24]
 8008fe4:	6923      	ldr	r3, [r4, #16]
 8008fe6:	b943      	cbnz	r3, 8008ffa <__swsetup_r+0xc6>
 8008fe8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008fec:	d1ba      	bne.n	8008f64 <__swsetup_r+0x30>
 8008fee:	bd70      	pop	{r4, r5, r6, pc}
 8008ff0:	0781      	lsls	r1, r0, #30
 8008ff2:	bf58      	it	pl
 8008ff4:	6963      	ldrpl	r3, [r4, #20]
 8008ff6:	60a3      	str	r3, [r4, #8]
 8008ff8:	e7f4      	b.n	8008fe4 <__swsetup_r+0xb0>
 8008ffa:	2000      	movs	r0, #0
 8008ffc:	e7f7      	b.n	8008fee <__swsetup_r+0xba>
 8008ffe:	bf00      	nop
 8009000:	20000010 	.word	0x20000010
 8009004:	0800ab94 	.word	0x0800ab94
 8009008:	0800abb4 	.word	0x0800abb4
 800900c:	0800ab74 	.word	0x0800ab74

08009010 <abort>:
 8009010:	2006      	movs	r0, #6
 8009012:	b508      	push	{r3, lr}
 8009014:	f000 fa50 	bl	80094b8 <raise>
 8009018:	2001      	movs	r0, #1
 800901a:	f7fa fb04 	bl	8003626 <_exit>
	...

08009020 <__sflush_r>:
 8009020:	898a      	ldrh	r2, [r1, #12]
 8009022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009024:	4605      	mov	r5, r0
 8009026:	0710      	lsls	r0, r2, #28
 8009028:	460c      	mov	r4, r1
 800902a:	d457      	bmi.n	80090dc <__sflush_r+0xbc>
 800902c:	684b      	ldr	r3, [r1, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	dc04      	bgt.n	800903c <__sflush_r+0x1c>
 8009032:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009034:	2b00      	cmp	r3, #0
 8009036:	dc01      	bgt.n	800903c <__sflush_r+0x1c>
 8009038:	2000      	movs	r0, #0
 800903a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800903c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800903e:	2e00      	cmp	r6, #0
 8009040:	d0fa      	beq.n	8009038 <__sflush_r+0x18>
 8009042:	2300      	movs	r3, #0
 8009044:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009048:	682f      	ldr	r7, [r5, #0]
 800904a:	602b      	str	r3, [r5, #0]
 800904c:	d032      	beq.n	80090b4 <__sflush_r+0x94>
 800904e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009050:	89a3      	ldrh	r3, [r4, #12]
 8009052:	075a      	lsls	r2, r3, #29
 8009054:	d505      	bpl.n	8009062 <__sflush_r+0x42>
 8009056:	6863      	ldr	r3, [r4, #4]
 8009058:	1ac0      	subs	r0, r0, r3
 800905a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800905c:	b10b      	cbz	r3, 8009062 <__sflush_r+0x42>
 800905e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009060:	1ac0      	subs	r0, r0, r3
 8009062:	2300      	movs	r3, #0
 8009064:	4602      	mov	r2, r0
 8009066:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009068:	4628      	mov	r0, r5
 800906a:	6a21      	ldr	r1, [r4, #32]
 800906c:	47b0      	blx	r6
 800906e:	1c43      	adds	r3, r0, #1
 8009070:	89a3      	ldrh	r3, [r4, #12]
 8009072:	d106      	bne.n	8009082 <__sflush_r+0x62>
 8009074:	6829      	ldr	r1, [r5, #0]
 8009076:	291d      	cmp	r1, #29
 8009078:	d82c      	bhi.n	80090d4 <__sflush_r+0xb4>
 800907a:	4a29      	ldr	r2, [pc, #164]	; (8009120 <__sflush_r+0x100>)
 800907c:	40ca      	lsrs	r2, r1
 800907e:	07d6      	lsls	r6, r2, #31
 8009080:	d528      	bpl.n	80090d4 <__sflush_r+0xb4>
 8009082:	2200      	movs	r2, #0
 8009084:	6062      	str	r2, [r4, #4]
 8009086:	6922      	ldr	r2, [r4, #16]
 8009088:	04d9      	lsls	r1, r3, #19
 800908a:	6022      	str	r2, [r4, #0]
 800908c:	d504      	bpl.n	8009098 <__sflush_r+0x78>
 800908e:	1c42      	adds	r2, r0, #1
 8009090:	d101      	bne.n	8009096 <__sflush_r+0x76>
 8009092:	682b      	ldr	r3, [r5, #0]
 8009094:	b903      	cbnz	r3, 8009098 <__sflush_r+0x78>
 8009096:	6560      	str	r0, [r4, #84]	; 0x54
 8009098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800909a:	602f      	str	r7, [r5, #0]
 800909c:	2900      	cmp	r1, #0
 800909e:	d0cb      	beq.n	8009038 <__sflush_r+0x18>
 80090a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090a4:	4299      	cmp	r1, r3
 80090a6:	d002      	beq.n	80090ae <__sflush_r+0x8e>
 80090a8:	4628      	mov	r0, r5
 80090aa:	f7ff faad 	bl	8008608 <_free_r>
 80090ae:	2000      	movs	r0, #0
 80090b0:	6360      	str	r0, [r4, #52]	; 0x34
 80090b2:	e7c2      	b.n	800903a <__sflush_r+0x1a>
 80090b4:	6a21      	ldr	r1, [r4, #32]
 80090b6:	2301      	movs	r3, #1
 80090b8:	4628      	mov	r0, r5
 80090ba:	47b0      	blx	r6
 80090bc:	1c41      	adds	r1, r0, #1
 80090be:	d1c7      	bne.n	8009050 <__sflush_r+0x30>
 80090c0:	682b      	ldr	r3, [r5, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d0c4      	beq.n	8009050 <__sflush_r+0x30>
 80090c6:	2b1d      	cmp	r3, #29
 80090c8:	d001      	beq.n	80090ce <__sflush_r+0xae>
 80090ca:	2b16      	cmp	r3, #22
 80090cc:	d101      	bne.n	80090d2 <__sflush_r+0xb2>
 80090ce:	602f      	str	r7, [r5, #0]
 80090d0:	e7b2      	b.n	8009038 <__sflush_r+0x18>
 80090d2:	89a3      	ldrh	r3, [r4, #12]
 80090d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090d8:	81a3      	strh	r3, [r4, #12]
 80090da:	e7ae      	b.n	800903a <__sflush_r+0x1a>
 80090dc:	690f      	ldr	r7, [r1, #16]
 80090de:	2f00      	cmp	r7, #0
 80090e0:	d0aa      	beq.n	8009038 <__sflush_r+0x18>
 80090e2:	0793      	lsls	r3, r2, #30
 80090e4:	bf18      	it	ne
 80090e6:	2300      	movne	r3, #0
 80090e8:	680e      	ldr	r6, [r1, #0]
 80090ea:	bf08      	it	eq
 80090ec:	694b      	ldreq	r3, [r1, #20]
 80090ee:	1bf6      	subs	r6, r6, r7
 80090f0:	600f      	str	r7, [r1, #0]
 80090f2:	608b      	str	r3, [r1, #8]
 80090f4:	2e00      	cmp	r6, #0
 80090f6:	dd9f      	ble.n	8009038 <__sflush_r+0x18>
 80090f8:	4633      	mov	r3, r6
 80090fa:	463a      	mov	r2, r7
 80090fc:	4628      	mov	r0, r5
 80090fe:	6a21      	ldr	r1, [r4, #32]
 8009100:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009104:	47e0      	blx	ip
 8009106:	2800      	cmp	r0, #0
 8009108:	dc06      	bgt.n	8009118 <__sflush_r+0xf8>
 800910a:	89a3      	ldrh	r3, [r4, #12]
 800910c:	f04f 30ff 	mov.w	r0, #4294967295
 8009110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009114:	81a3      	strh	r3, [r4, #12]
 8009116:	e790      	b.n	800903a <__sflush_r+0x1a>
 8009118:	4407      	add	r7, r0
 800911a:	1a36      	subs	r6, r6, r0
 800911c:	e7ea      	b.n	80090f4 <__sflush_r+0xd4>
 800911e:	bf00      	nop
 8009120:	20400001 	.word	0x20400001

08009124 <_fflush_r>:
 8009124:	b538      	push	{r3, r4, r5, lr}
 8009126:	690b      	ldr	r3, [r1, #16]
 8009128:	4605      	mov	r5, r0
 800912a:	460c      	mov	r4, r1
 800912c:	b913      	cbnz	r3, 8009134 <_fflush_r+0x10>
 800912e:	2500      	movs	r5, #0
 8009130:	4628      	mov	r0, r5
 8009132:	bd38      	pop	{r3, r4, r5, pc}
 8009134:	b118      	cbz	r0, 800913e <_fflush_r+0x1a>
 8009136:	6983      	ldr	r3, [r0, #24]
 8009138:	b90b      	cbnz	r3, 800913e <_fflush_r+0x1a>
 800913a:	f000 f887 	bl	800924c <__sinit>
 800913e:	4b14      	ldr	r3, [pc, #80]	; (8009190 <_fflush_r+0x6c>)
 8009140:	429c      	cmp	r4, r3
 8009142:	d11b      	bne.n	800917c <_fflush_r+0x58>
 8009144:	686c      	ldr	r4, [r5, #4]
 8009146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d0ef      	beq.n	800912e <_fflush_r+0xa>
 800914e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009150:	07d0      	lsls	r0, r2, #31
 8009152:	d404      	bmi.n	800915e <_fflush_r+0x3a>
 8009154:	0599      	lsls	r1, r3, #22
 8009156:	d402      	bmi.n	800915e <_fflush_r+0x3a>
 8009158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800915a:	f000 f915 	bl	8009388 <__retarget_lock_acquire_recursive>
 800915e:	4628      	mov	r0, r5
 8009160:	4621      	mov	r1, r4
 8009162:	f7ff ff5d 	bl	8009020 <__sflush_r>
 8009166:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009168:	4605      	mov	r5, r0
 800916a:	07da      	lsls	r2, r3, #31
 800916c:	d4e0      	bmi.n	8009130 <_fflush_r+0xc>
 800916e:	89a3      	ldrh	r3, [r4, #12]
 8009170:	059b      	lsls	r3, r3, #22
 8009172:	d4dd      	bmi.n	8009130 <_fflush_r+0xc>
 8009174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009176:	f000 f908 	bl	800938a <__retarget_lock_release_recursive>
 800917a:	e7d9      	b.n	8009130 <_fflush_r+0xc>
 800917c:	4b05      	ldr	r3, [pc, #20]	; (8009194 <_fflush_r+0x70>)
 800917e:	429c      	cmp	r4, r3
 8009180:	d101      	bne.n	8009186 <_fflush_r+0x62>
 8009182:	68ac      	ldr	r4, [r5, #8]
 8009184:	e7df      	b.n	8009146 <_fflush_r+0x22>
 8009186:	4b04      	ldr	r3, [pc, #16]	; (8009198 <_fflush_r+0x74>)
 8009188:	429c      	cmp	r4, r3
 800918a:	bf08      	it	eq
 800918c:	68ec      	ldreq	r4, [r5, #12]
 800918e:	e7da      	b.n	8009146 <_fflush_r+0x22>
 8009190:	0800ab94 	.word	0x0800ab94
 8009194:	0800abb4 	.word	0x0800abb4
 8009198:	0800ab74 	.word	0x0800ab74

0800919c <std>:
 800919c:	2300      	movs	r3, #0
 800919e:	b510      	push	{r4, lr}
 80091a0:	4604      	mov	r4, r0
 80091a2:	e9c0 3300 	strd	r3, r3, [r0]
 80091a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091aa:	6083      	str	r3, [r0, #8]
 80091ac:	8181      	strh	r1, [r0, #12]
 80091ae:	6643      	str	r3, [r0, #100]	; 0x64
 80091b0:	81c2      	strh	r2, [r0, #14]
 80091b2:	6183      	str	r3, [r0, #24]
 80091b4:	4619      	mov	r1, r3
 80091b6:	2208      	movs	r2, #8
 80091b8:	305c      	adds	r0, #92	; 0x5c
 80091ba:	f7fd fb65 	bl	8006888 <memset>
 80091be:	4b05      	ldr	r3, [pc, #20]	; (80091d4 <std+0x38>)
 80091c0:	6224      	str	r4, [r4, #32]
 80091c2:	6263      	str	r3, [r4, #36]	; 0x24
 80091c4:	4b04      	ldr	r3, [pc, #16]	; (80091d8 <std+0x3c>)
 80091c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80091c8:	4b04      	ldr	r3, [pc, #16]	; (80091dc <std+0x40>)
 80091ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80091cc:	4b04      	ldr	r3, [pc, #16]	; (80091e0 <std+0x44>)
 80091ce:	6323      	str	r3, [r4, #48]	; 0x30
 80091d0:	bd10      	pop	{r4, pc}
 80091d2:	bf00      	nop
 80091d4:	080094f1 	.word	0x080094f1
 80091d8:	08009513 	.word	0x08009513
 80091dc:	0800954b 	.word	0x0800954b
 80091e0:	0800956f 	.word	0x0800956f

080091e4 <_cleanup_r>:
 80091e4:	4901      	ldr	r1, [pc, #4]	; (80091ec <_cleanup_r+0x8>)
 80091e6:	f000 b8af 	b.w	8009348 <_fwalk_reent>
 80091ea:	bf00      	nop
 80091ec:	08009125 	.word	0x08009125

080091f0 <__sfmoreglue>:
 80091f0:	2268      	movs	r2, #104	; 0x68
 80091f2:	b570      	push	{r4, r5, r6, lr}
 80091f4:	1e4d      	subs	r5, r1, #1
 80091f6:	4355      	muls	r5, r2
 80091f8:	460e      	mov	r6, r1
 80091fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80091fe:	f7ff fa6b 	bl	80086d8 <_malloc_r>
 8009202:	4604      	mov	r4, r0
 8009204:	b140      	cbz	r0, 8009218 <__sfmoreglue+0x28>
 8009206:	2100      	movs	r1, #0
 8009208:	e9c0 1600 	strd	r1, r6, [r0]
 800920c:	300c      	adds	r0, #12
 800920e:	60a0      	str	r0, [r4, #8]
 8009210:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009214:	f7fd fb38 	bl	8006888 <memset>
 8009218:	4620      	mov	r0, r4
 800921a:	bd70      	pop	{r4, r5, r6, pc}

0800921c <__sfp_lock_acquire>:
 800921c:	4801      	ldr	r0, [pc, #4]	; (8009224 <__sfp_lock_acquire+0x8>)
 800921e:	f000 b8b3 	b.w	8009388 <__retarget_lock_acquire_recursive>
 8009222:	bf00      	nop
 8009224:	20000555 	.word	0x20000555

08009228 <__sfp_lock_release>:
 8009228:	4801      	ldr	r0, [pc, #4]	; (8009230 <__sfp_lock_release+0x8>)
 800922a:	f000 b8ae 	b.w	800938a <__retarget_lock_release_recursive>
 800922e:	bf00      	nop
 8009230:	20000555 	.word	0x20000555

08009234 <__sinit_lock_acquire>:
 8009234:	4801      	ldr	r0, [pc, #4]	; (800923c <__sinit_lock_acquire+0x8>)
 8009236:	f000 b8a7 	b.w	8009388 <__retarget_lock_acquire_recursive>
 800923a:	bf00      	nop
 800923c:	20000556 	.word	0x20000556

08009240 <__sinit_lock_release>:
 8009240:	4801      	ldr	r0, [pc, #4]	; (8009248 <__sinit_lock_release+0x8>)
 8009242:	f000 b8a2 	b.w	800938a <__retarget_lock_release_recursive>
 8009246:	bf00      	nop
 8009248:	20000556 	.word	0x20000556

0800924c <__sinit>:
 800924c:	b510      	push	{r4, lr}
 800924e:	4604      	mov	r4, r0
 8009250:	f7ff fff0 	bl	8009234 <__sinit_lock_acquire>
 8009254:	69a3      	ldr	r3, [r4, #24]
 8009256:	b11b      	cbz	r3, 8009260 <__sinit+0x14>
 8009258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800925c:	f7ff bff0 	b.w	8009240 <__sinit_lock_release>
 8009260:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009264:	6523      	str	r3, [r4, #80]	; 0x50
 8009266:	4b13      	ldr	r3, [pc, #76]	; (80092b4 <__sinit+0x68>)
 8009268:	4a13      	ldr	r2, [pc, #76]	; (80092b8 <__sinit+0x6c>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	62a2      	str	r2, [r4, #40]	; 0x28
 800926e:	42a3      	cmp	r3, r4
 8009270:	bf08      	it	eq
 8009272:	2301      	moveq	r3, #1
 8009274:	4620      	mov	r0, r4
 8009276:	bf08      	it	eq
 8009278:	61a3      	streq	r3, [r4, #24]
 800927a:	f000 f81f 	bl	80092bc <__sfp>
 800927e:	6060      	str	r0, [r4, #4]
 8009280:	4620      	mov	r0, r4
 8009282:	f000 f81b 	bl	80092bc <__sfp>
 8009286:	60a0      	str	r0, [r4, #8]
 8009288:	4620      	mov	r0, r4
 800928a:	f000 f817 	bl	80092bc <__sfp>
 800928e:	2200      	movs	r2, #0
 8009290:	2104      	movs	r1, #4
 8009292:	60e0      	str	r0, [r4, #12]
 8009294:	6860      	ldr	r0, [r4, #4]
 8009296:	f7ff ff81 	bl	800919c <std>
 800929a:	2201      	movs	r2, #1
 800929c:	2109      	movs	r1, #9
 800929e:	68a0      	ldr	r0, [r4, #8]
 80092a0:	f7ff ff7c 	bl	800919c <std>
 80092a4:	2202      	movs	r2, #2
 80092a6:	2112      	movs	r1, #18
 80092a8:	68e0      	ldr	r0, [r4, #12]
 80092aa:	f7ff ff77 	bl	800919c <std>
 80092ae:	2301      	movs	r3, #1
 80092b0:	61a3      	str	r3, [r4, #24]
 80092b2:	e7d1      	b.n	8009258 <__sinit+0xc>
 80092b4:	0800a7f8 	.word	0x0800a7f8
 80092b8:	080091e5 	.word	0x080091e5

080092bc <__sfp>:
 80092bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092be:	4607      	mov	r7, r0
 80092c0:	f7ff ffac 	bl	800921c <__sfp_lock_acquire>
 80092c4:	4b1e      	ldr	r3, [pc, #120]	; (8009340 <__sfp+0x84>)
 80092c6:	681e      	ldr	r6, [r3, #0]
 80092c8:	69b3      	ldr	r3, [r6, #24]
 80092ca:	b913      	cbnz	r3, 80092d2 <__sfp+0x16>
 80092cc:	4630      	mov	r0, r6
 80092ce:	f7ff ffbd 	bl	800924c <__sinit>
 80092d2:	3648      	adds	r6, #72	; 0x48
 80092d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80092d8:	3b01      	subs	r3, #1
 80092da:	d503      	bpl.n	80092e4 <__sfp+0x28>
 80092dc:	6833      	ldr	r3, [r6, #0]
 80092de:	b30b      	cbz	r3, 8009324 <__sfp+0x68>
 80092e0:	6836      	ldr	r6, [r6, #0]
 80092e2:	e7f7      	b.n	80092d4 <__sfp+0x18>
 80092e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80092e8:	b9d5      	cbnz	r5, 8009320 <__sfp+0x64>
 80092ea:	4b16      	ldr	r3, [pc, #88]	; (8009344 <__sfp+0x88>)
 80092ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092f0:	60e3      	str	r3, [r4, #12]
 80092f2:	6665      	str	r5, [r4, #100]	; 0x64
 80092f4:	f000 f847 	bl	8009386 <__retarget_lock_init_recursive>
 80092f8:	f7ff ff96 	bl	8009228 <__sfp_lock_release>
 80092fc:	2208      	movs	r2, #8
 80092fe:	4629      	mov	r1, r5
 8009300:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009304:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009308:	6025      	str	r5, [r4, #0]
 800930a:	61a5      	str	r5, [r4, #24]
 800930c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009310:	f7fd faba 	bl	8006888 <memset>
 8009314:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009318:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800931c:	4620      	mov	r0, r4
 800931e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009320:	3468      	adds	r4, #104	; 0x68
 8009322:	e7d9      	b.n	80092d8 <__sfp+0x1c>
 8009324:	2104      	movs	r1, #4
 8009326:	4638      	mov	r0, r7
 8009328:	f7ff ff62 	bl	80091f0 <__sfmoreglue>
 800932c:	4604      	mov	r4, r0
 800932e:	6030      	str	r0, [r6, #0]
 8009330:	2800      	cmp	r0, #0
 8009332:	d1d5      	bne.n	80092e0 <__sfp+0x24>
 8009334:	f7ff ff78 	bl	8009228 <__sfp_lock_release>
 8009338:	230c      	movs	r3, #12
 800933a:	603b      	str	r3, [r7, #0]
 800933c:	e7ee      	b.n	800931c <__sfp+0x60>
 800933e:	bf00      	nop
 8009340:	0800a7f8 	.word	0x0800a7f8
 8009344:	ffff0001 	.word	0xffff0001

08009348 <_fwalk_reent>:
 8009348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800934c:	4606      	mov	r6, r0
 800934e:	4688      	mov	r8, r1
 8009350:	2700      	movs	r7, #0
 8009352:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009356:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800935a:	f1b9 0901 	subs.w	r9, r9, #1
 800935e:	d505      	bpl.n	800936c <_fwalk_reent+0x24>
 8009360:	6824      	ldr	r4, [r4, #0]
 8009362:	2c00      	cmp	r4, #0
 8009364:	d1f7      	bne.n	8009356 <_fwalk_reent+0xe>
 8009366:	4638      	mov	r0, r7
 8009368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800936c:	89ab      	ldrh	r3, [r5, #12]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d907      	bls.n	8009382 <_fwalk_reent+0x3a>
 8009372:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009376:	3301      	adds	r3, #1
 8009378:	d003      	beq.n	8009382 <_fwalk_reent+0x3a>
 800937a:	4629      	mov	r1, r5
 800937c:	4630      	mov	r0, r6
 800937e:	47c0      	blx	r8
 8009380:	4307      	orrs	r7, r0
 8009382:	3568      	adds	r5, #104	; 0x68
 8009384:	e7e9      	b.n	800935a <_fwalk_reent+0x12>

08009386 <__retarget_lock_init_recursive>:
 8009386:	4770      	bx	lr

08009388 <__retarget_lock_acquire_recursive>:
 8009388:	4770      	bx	lr

0800938a <__retarget_lock_release_recursive>:
 800938a:	4770      	bx	lr

0800938c <__swhatbuf_r>:
 800938c:	b570      	push	{r4, r5, r6, lr}
 800938e:	460e      	mov	r6, r1
 8009390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009394:	4614      	mov	r4, r2
 8009396:	2900      	cmp	r1, #0
 8009398:	461d      	mov	r5, r3
 800939a:	b096      	sub	sp, #88	; 0x58
 800939c:	da08      	bge.n	80093b0 <__swhatbuf_r+0x24>
 800939e:	2200      	movs	r2, #0
 80093a0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80093a4:	602a      	str	r2, [r5, #0]
 80093a6:	061a      	lsls	r2, r3, #24
 80093a8:	d410      	bmi.n	80093cc <__swhatbuf_r+0x40>
 80093aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093ae:	e00e      	b.n	80093ce <__swhatbuf_r+0x42>
 80093b0:	466a      	mov	r2, sp
 80093b2:	f000 f903 	bl	80095bc <_fstat_r>
 80093b6:	2800      	cmp	r0, #0
 80093b8:	dbf1      	blt.n	800939e <__swhatbuf_r+0x12>
 80093ba:	9a01      	ldr	r2, [sp, #4]
 80093bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80093c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80093c4:	425a      	negs	r2, r3
 80093c6:	415a      	adcs	r2, r3
 80093c8:	602a      	str	r2, [r5, #0]
 80093ca:	e7ee      	b.n	80093aa <__swhatbuf_r+0x1e>
 80093cc:	2340      	movs	r3, #64	; 0x40
 80093ce:	2000      	movs	r0, #0
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	b016      	add	sp, #88	; 0x58
 80093d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080093d8 <__smakebuf_r>:
 80093d8:	898b      	ldrh	r3, [r1, #12]
 80093da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093dc:	079d      	lsls	r5, r3, #30
 80093de:	4606      	mov	r6, r0
 80093e0:	460c      	mov	r4, r1
 80093e2:	d507      	bpl.n	80093f4 <__smakebuf_r+0x1c>
 80093e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80093e8:	6023      	str	r3, [r4, #0]
 80093ea:	6123      	str	r3, [r4, #16]
 80093ec:	2301      	movs	r3, #1
 80093ee:	6163      	str	r3, [r4, #20]
 80093f0:	b002      	add	sp, #8
 80093f2:	bd70      	pop	{r4, r5, r6, pc}
 80093f4:	466a      	mov	r2, sp
 80093f6:	ab01      	add	r3, sp, #4
 80093f8:	f7ff ffc8 	bl	800938c <__swhatbuf_r>
 80093fc:	9900      	ldr	r1, [sp, #0]
 80093fe:	4605      	mov	r5, r0
 8009400:	4630      	mov	r0, r6
 8009402:	f7ff f969 	bl	80086d8 <_malloc_r>
 8009406:	b948      	cbnz	r0, 800941c <__smakebuf_r+0x44>
 8009408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800940c:	059a      	lsls	r2, r3, #22
 800940e:	d4ef      	bmi.n	80093f0 <__smakebuf_r+0x18>
 8009410:	f023 0303 	bic.w	r3, r3, #3
 8009414:	f043 0302 	orr.w	r3, r3, #2
 8009418:	81a3      	strh	r3, [r4, #12]
 800941a:	e7e3      	b.n	80093e4 <__smakebuf_r+0xc>
 800941c:	4b0d      	ldr	r3, [pc, #52]	; (8009454 <__smakebuf_r+0x7c>)
 800941e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009420:	89a3      	ldrh	r3, [r4, #12]
 8009422:	6020      	str	r0, [r4, #0]
 8009424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009428:	81a3      	strh	r3, [r4, #12]
 800942a:	9b00      	ldr	r3, [sp, #0]
 800942c:	6120      	str	r0, [r4, #16]
 800942e:	6163      	str	r3, [r4, #20]
 8009430:	9b01      	ldr	r3, [sp, #4]
 8009432:	b15b      	cbz	r3, 800944c <__smakebuf_r+0x74>
 8009434:	4630      	mov	r0, r6
 8009436:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800943a:	f000 f8d1 	bl	80095e0 <_isatty_r>
 800943e:	b128      	cbz	r0, 800944c <__smakebuf_r+0x74>
 8009440:	89a3      	ldrh	r3, [r4, #12]
 8009442:	f023 0303 	bic.w	r3, r3, #3
 8009446:	f043 0301 	orr.w	r3, r3, #1
 800944a:	81a3      	strh	r3, [r4, #12]
 800944c:	89a0      	ldrh	r0, [r4, #12]
 800944e:	4305      	orrs	r5, r0
 8009450:	81a5      	strh	r5, [r4, #12]
 8009452:	e7cd      	b.n	80093f0 <__smakebuf_r+0x18>
 8009454:	080091e5 	.word	0x080091e5

08009458 <_malloc_usable_size_r>:
 8009458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800945c:	1f18      	subs	r0, r3, #4
 800945e:	2b00      	cmp	r3, #0
 8009460:	bfbc      	itt	lt
 8009462:	580b      	ldrlt	r3, [r1, r0]
 8009464:	18c0      	addlt	r0, r0, r3
 8009466:	4770      	bx	lr

08009468 <_raise_r>:
 8009468:	291f      	cmp	r1, #31
 800946a:	b538      	push	{r3, r4, r5, lr}
 800946c:	4604      	mov	r4, r0
 800946e:	460d      	mov	r5, r1
 8009470:	d904      	bls.n	800947c <_raise_r+0x14>
 8009472:	2316      	movs	r3, #22
 8009474:	6003      	str	r3, [r0, #0]
 8009476:	f04f 30ff 	mov.w	r0, #4294967295
 800947a:	bd38      	pop	{r3, r4, r5, pc}
 800947c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800947e:	b112      	cbz	r2, 8009486 <_raise_r+0x1e>
 8009480:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009484:	b94b      	cbnz	r3, 800949a <_raise_r+0x32>
 8009486:	4620      	mov	r0, r4
 8009488:	f000 f830 	bl	80094ec <_getpid_r>
 800948c:	462a      	mov	r2, r5
 800948e:	4601      	mov	r1, r0
 8009490:	4620      	mov	r0, r4
 8009492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009496:	f000 b817 	b.w	80094c8 <_kill_r>
 800949a:	2b01      	cmp	r3, #1
 800949c:	d00a      	beq.n	80094b4 <_raise_r+0x4c>
 800949e:	1c59      	adds	r1, r3, #1
 80094a0:	d103      	bne.n	80094aa <_raise_r+0x42>
 80094a2:	2316      	movs	r3, #22
 80094a4:	6003      	str	r3, [r0, #0]
 80094a6:	2001      	movs	r0, #1
 80094a8:	e7e7      	b.n	800947a <_raise_r+0x12>
 80094aa:	2400      	movs	r4, #0
 80094ac:	4628      	mov	r0, r5
 80094ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80094b2:	4798      	blx	r3
 80094b4:	2000      	movs	r0, #0
 80094b6:	e7e0      	b.n	800947a <_raise_r+0x12>

080094b8 <raise>:
 80094b8:	4b02      	ldr	r3, [pc, #8]	; (80094c4 <raise+0xc>)
 80094ba:	4601      	mov	r1, r0
 80094bc:	6818      	ldr	r0, [r3, #0]
 80094be:	f7ff bfd3 	b.w	8009468 <_raise_r>
 80094c2:	bf00      	nop
 80094c4:	20000010 	.word	0x20000010

080094c8 <_kill_r>:
 80094c8:	b538      	push	{r3, r4, r5, lr}
 80094ca:	2300      	movs	r3, #0
 80094cc:	4d06      	ldr	r5, [pc, #24]	; (80094e8 <_kill_r+0x20>)
 80094ce:	4604      	mov	r4, r0
 80094d0:	4608      	mov	r0, r1
 80094d2:	4611      	mov	r1, r2
 80094d4:	602b      	str	r3, [r5, #0]
 80094d6:	f7fa f896 	bl	8003606 <_kill>
 80094da:	1c43      	adds	r3, r0, #1
 80094dc:	d102      	bne.n	80094e4 <_kill_r+0x1c>
 80094de:	682b      	ldr	r3, [r5, #0]
 80094e0:	b103      	cbz	r3, 80094e4 <_kill_r+0x1c>
 80094e2:	6023      	str	r3, [r4, #0]
 80094e4:	bd38      	pop	{r3, r4, r5, pc}
 80094e6:	bf00      	nop
 80094e8:	20000550 	.word	0x20000550

080094ec <_getpid_r>:
 80094ec:	f7fa b884 	b.w	80035f8 <_getpid>

080094f0 <__sread>:
 80094f0:	b510      	push	{r4, lr}
 80094f2:	460c      	mov	r4, r1
 80094f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094f8:	f000 f894 	bl	8009624 <_read_r>
 80094fc:	2800      	cmp	r0, #0
 80094fe:	bfab      	itete	ge
 8009500:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009502:	89a3      	ldrhlt	r3, [r4, #12]
 8009504:	181b      	addge	r3, r3, r0
 8009506:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800950a:	bfac      	ite	ge
 800950c:	6563      	strge	r3, [r4, #84]	; 0x54
 800950e:	81a3      	strhlt	r3, [r4, #12]
 8009510:	bd10      	pop	{r4, pc}

08009512 <__swrite>:
 8009512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009516:	461f      	mov	r7, r3
 8009518:	898b      	ldrh	r3, [r1, #12]
 800951a:	4605      	mov	r5, r0
 800951c:	05db      	lsls	r3, r3, #23
 800951e:	460c      	mov	r4, r1
 8009520:	4616      	mov	r6, r2
 8009522:	d505      	bpl.n	8009530 <__swrite+0x1e>
 8009524:	2302      	movs	r3, #2
 8009526:	2200      	movs	r2, #0
 8009528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800952c:	f000 f868 	bl	8009600 <_lseek_r>
 8009530:	89a3      	ldrh	r3, [r4, #12]
 8009532:	4632      	mov	r2, r6
 8009534:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009538:	81a3      	strh	r3, [r4, #12]
 800953a:	4628      	mov	r0, r5
 800953c:	463b      	mov	r3, r7
 800953e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009546:	f000 b817 	b.w	8009578 <_write_r>

0800954a <__sseek>:
 800954a:	b510      	push	{r4, lr}
 800954c:	460c      	mov	r4, r1
 800954e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009552:	f000 f855 	bl	8009600 <_lseek_r>
 8009556:	1c43      	adds	r3, r0, #1
 8009558:	89a3      	ldrh	r3, [r4, #12]
 800955a:	bf15      	itete	ne
 800955c:	6560      	strne	r0, [r4, #84]	; 0x54
 800955e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009562:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009566:	81a3      	strheq	r3, [r4, #12]
 8009568:	bf18      	it	ne
 800956a:	81a3      	strhne	r3, [r4, #12]
 800956c:	bd10      	pop	{r4, pc}

0800956e <__sclose>:
 800956e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009572:	f000 b813 	b.w	800959c <_close_r>
	...

08009578 <_write_r>:
 8009578:	b538      	push	{r3, r4, r5, lr}
 800957a:	4604      	mov	r4, r0
 800957c:	4608      	mov	r0, r1
 800957e:	4611      	mov	r1, r2
 8009580:	2200      	movs	r2, #0
 8009582:	4d05      	ldr	r5, [pc, #20]	; (8009598 <_write_r+0x20>)
 8009584:	602a      	str	r2, [r5, #0]
 8009586:	461a      	mov	r2, r3
 8009588:	f7fa f874 	bl	8003674 <_write>
 800958c:	1c43      	adds	r3, r0, #1
 800958e:	d102      	bne.n	8009596 <_write_r+0x1e>
 8009590:	682b      	ldr	r3, [r5, #0]
 8009592:	b103      	cbz	r3, 8009596 <_write_r+0x1e>
 8009594:	6023      	str	r3, [r4, #0]
 8009596:	bd38      	pop	{r3, r4, r5, pc}
 8009598:	20000550 	.word	0x20000550

0800959c <_close_r>:
 800959c:	b538      	push	{r3, r4, r5, lr}
 800959e:	2300      	movs	r3, #0
 80095a0:	4d05      	ldr	r5, [pc, #20]	; (80095b8 <_close_r+0x1c>)
 80095a2:	4604      	mov	r4, r0
 80095a4:	4608      	mov	r0, r1
 80095a6:	602b      	str	r3, [r5, #0]
 80095a8:	f7fa f880 	bl	80036ac <_close>
 80095ac:	1c43      	adds	r3, r0, #1
 80095ae:	d102      	bne.n	80095b6 <_close_r+0x1a>
 80095b0:	682b      	ldr	r3, [r5, #0]
 80095b2:	b103      	cbz	r3, 80095b6 <_close_r+0x1a>
 80095b4:	6023      	str	r3, [r4, #0]
 80095b6:	bd38      	pop	{r3, r4, r5, pc}
 80095b8:	20000550 	.word	0x20000550

080095bc <_fstat_r>:
 80095bc:	b538      	push	{r3, r4, r5, lr}
 80095be:	2300      	movs	r3, #0
 80095c0:	4d06      	ldr	r5, [pc, #24]	; (80095dc <_fstat_r+0x20>)
 80095c2:	4604      	mov	r4, r0
 80095c4:	4608      	mov	r0, r1
 80095c6:	4611      	mov	r1, r2
 80095c8:	602b      	str	r3, [r5, #0]
 80095ca:	f7fa f87a 	bl	80036c2 <_fstat>
 80095ce:	1c43      	adds	r3, r0, #1
 80095d0:	d102      	bne.n	80095d8 <_fstat_r+0x1c>
 80095d2:	682b      	ldr	r3, [r5, #0]
 80095d4:	b103      	cbz	r3, 80095d8 <_fstat_r+0x1c>
 80095d6:	6023      	str	r3, [r4, #0]
 80095d8:	bd38      	pop	{r3, r4, r5, pc}
 80095da:	bf00      	nop
 80095dc:	20000550 	.word	0x20000550

080095e0 <_isatty_r>:
 80095e0:	b538      	push	{r3, r4, r5, lr}
 80095e2:	2300      	movs	r3, #0
 80095e4:	4d05      	ldr	r5, [pc, #20]	; (80095fc <_isatty_r+0x1c>)
 80095e6:	4604      	mov	r4, r0
 80095e8:	4608      	mov	r0, r1
 80095ea:	602b      	str	r3, [r5, #0]
 80095ec:	f7fa f878 	bl	80036e0 <_isatty>
 80095f0:	1c43      	adds	r3, r0, #1
 80095f2:	d102      	bne.n	80095fa <_isatty_r+0x1a>
 80095f4:	682b      	ldr	r3, [r5, #0]
 80095f6:	b103      	cbz	r3, 80095fa <_isatty_r+0x1a>
 80095f8:	6023      	str	r3, [r4, #0]
 80095fa:	bd38      	pop	{r3, r4, r5, pc}
 80095fc:	20000550 	.word	0x20000550

08009600 <_lseek_r>:
 8009600:	b538      	push	{r3, r4, r5, lr}
 8009602:	4604      	mov	r4, r0
 8009604:	4608      	mov	r0, r1
 8009606:	4611      	mov	r1, r2
 8009608:	2200      	movs	r2, #0
 800960a:	4d05      	ldr	r5, [pc, #20]	; (8009620 <_lseek_r+0x20>)
 800960c:	602a      	str	r2, [r5, #0]
 800960e:	461a      	mov	r2, r3
 8009610:	f7fa f870 	bl	80036f4 <_lseek>
 8009614:	1c43      	adds	r3, r0, #1
 8009616:	d102      	bne.n	800961e <_lseek_r+0x1e>
 8009618:	682b      	ldr	r3, [r5, #0]
 800961a:	b103      	cbz	r3, 800961e <_lseek_r+0x1e>
 800961c:	6023      	str	r3, [r4, #0]
 800961e:	bd38      	pop	{r3, r4, r5, pc}
 8009620:	20000550 	.word	0x20000550

08009624 <_read_r>:
 8009624:	b538      	push	{r3, r4, r5, lr}
 8009626:	4604      	mov	r4, r0
 8009628:	4608      	mov	r0, r1
 800962a:	4611      	mov	r1, r2
 800962c:	2200      	movs	r2, #0
 800962e:	4d05      	ldr	r5, [pc, #20]	; (8009644 <_read_r+0x20>)
 8009630:	602a      	str	r2, [r5, #0]
 8009632:	461a      	mov	r2, r3
 8009634:	f7fa f801 	bl	800363a <_read>
 8009638:	1c43      	adds	r3, r0, #1
 800963a:	d102      	bne.n	8009642 <_read_r+0x1e>
 800963c:	682b      	ldr	r3, [r5, #0]
 800963e:	b103      	cbz	r3, 8009642 <_read_r+0x1e>
 8009640:	6023      	str	r3, [r4, #0]
 8009642:	bd38      	pop	{r3, r4, r5, pc}
 8009644:	20000550 	.word	0x20000550

08009648 <atan>:
 8009648:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800964c:	4bb6      	ldr	r3, [pc, #728]	; (8009928 <atan+0x2e0>)
 800964e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009652:	429e      	cmp	r6, r3
 8009654:	4604      	mov	r4, r0
 8009656:	460d      	mov	r5, r1
 8009658:	468b      	mov	fp, r1
 800965a:	dd17      	ble.n	800968c <atan+0x44>
 800965c:	4bb3      	ldr	r3, [pc, #716]	; (800992c <atan+0x2e4>)
 800965e:	429e      	cmp	r6, r3
 8009660:	dc01      	bgt.n	8009666 <atan+0x1e>
 8009662:	d109      	bne.n	8009678 <atan+0x30>
 8009664:	b140      	cbz	r0, 8009678 <atan+0x30>
 8009666:	4622      	mov	r2, r4
 8009668:	462b      	mov	r3, r5
 800966a:	4620      	mov	r0, r4
 800966c:	4629      	mov	r1, r5
 800966e:	f7f6 fd7d 	bl	800016c <__adddf3>
 8009672:	4604      	mov	r4, r0
 8009674:	460d      	mov	r5, r1
 8009676:	e005      	b.n	8009684 <atan+0x3c>
 8009678:	f1bb 0f00 	cmp.w	fp, #0
 800967c:	4cac      	ldr	r4, [pc, #688]	; (8009930 <atan+0x2e8>)
 800967e:	f300 8121 	bgt.w	80098c4 <atan+0x27c>
 8009682:	4dac      	ldr	r5, [pc, #688]	; (8009934 <atan+0x2ec>)
 8009684:	4620      	mov	r0, r4
 8009686:	4629      	mov	r1, r5
 8009688:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800968c:	4baa      	ldr	r3, [pc, #680]	; (8009938 <atan+0x2f0>)
 800968e:	429e      	cmp	r6, r3
 8009690:	dc11      	bgt.n	80096b6 <atan+0x6e>
 8009692:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009696:	429e      	cmp	r6, r3
 8009698:	dc0a      	bgt.n	80096b0 <atan+0x68>
 800969a:	a38b      	add	r3, pc, #556	; (adr r3, 80098c8 <atan+0x280>)
 800969c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a0:	f7f6 fd64 	bl	800016c <__adddf3>
 80096a4:	2200      	movs	r2, #0
 80096a6:	4ba5      	ldr	r3, [pc, #660]	; (800993c <atan+0x2f4>)
 80096a8:	f7f7 f9a6 	bl	80009f8 <__aeabi_dcmpgt>
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d1e9      	bne.n	8009684 <atan+0x3c>
 80096b0:	f04f 3aff 	mov.w	sl, #4294967295
 80096b4:	e027      	b.n	8009706 <atan+0xbe>
 80096b6:	f000 f951 	bl	800995c <fabs>
 80096ba:	4ba1      	ldr	r3, [pc, #644]	; (8009940 <atan+0x2f8>)
 80096bc:	4604      	mov	r4, r0
 80096be:	429e      	cmp	r6, r3
 80096c0:	460d      	mov	r5, r1
 80096c2:	f300 80b8 	bgt.w	8009836 <atan+0x1ee>
 80096c6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80096ca:	429e      	cmp	r6, r3
 80096cc:	f300 809c 	bgt.w	8009808 <atan+0x1c0>
 80096d0:	4602      	mov	r2, r0
 80096d2:	460b      	mov	r3, r1
 80096d4:	f7f6 fd4a 	bl	800016c <__adddf3>
 80096d8:	2200      	movs	r2, #0
 80096da:	4b98      	ldr	r3, [pc, #608]	; (800993c <atan+0x2f4>)
 80096dc:	f7f6 fd44 	bl	8000168 <__aeabi_dsub>
 80096e0:	2200      	movs	r2, #0
 80096e2:	4606      	mov	r6, r0
 80096e4:	460f      	mov	r7, r1
 80096e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80096ea:	4620      	mov	r0, r4
 80096ec:	4629      	mov	r1, r5
 80096ee:	f7f6 fd3d 	bl	800016c <__adddf3>
 80096f2:	4602      	mov	r2, r0
 80096f4:	460b      	mov	r3, r1
 80096f6:	4630      	mov	r0, r6
 80096f8:	4639      	mov	r1, r7
 80096fa:	f7f7 f817 	bl	800072c <__aeabi_ddiv>
 80096fe:	f04f 0a00 	mov.w	sl, #0
 8009702:	4604      	mov	r4, r0
 8009704:	460d      	mov	r5, r1
 8009706:	4622      	mov	r2, r4
 8009708:	462b      	mov	r3, r5
 800970a:	4620      	mov	r0, r4
 800970c:	4629      	mov	r1, r5
 800970e:	f7f6 fee3 	bl	80004d8 <__aeabi_dmul>
 8009712:	4602      	mov	r2, r0
 8009714:	460b      	mov	r3, r1
 8009716:	4680      	mov	r8, r0
 8009718:	4689      	mov	r9, r1
 800971a:	f7f6 fedd 	bl	80004d8 <__aeabi_dmul>
 800971e:	a36c      	add	r3, pc, #432	; (adr r3, 80098d0 <atan+0x288>)
 8009720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009724:	4606      	mov	r6, r0
 8009726:	460f      	mov	r7, r1
 8009728:	f7f6 fed6 	bl	80004d8 <__aeabi_dmul>
 800972c:	a36a      	add	r3, pc, #424	; (adr r3, 80098d8 <atan+0x290>)
 800972e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009732:	f7f6 fd1b 	bl	800016c <__adddf3>
 8009736:	4632      	mov	r2, r6
 8009738:	463b      	mov	r3, r7
 800973a:	f7f6 fecd 	bl	80004d8 <__aeabi_dmul>
 800973e:	a368      	add	r3, pc, #416	; (adr r3, 80098e0 <atan+0x298>)
 8009740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009744:	f7f6 fd12 	bl	800016c <__adddf3>
 8009748:	4632      	mov	r2, r6
 800974a:	463b      	mov	r3, r7
 800974c:	f7f6 fec4 	bl	80004d8 <__aeabi_dmul>
 8009750:	a365      	add	r3, pc, #404	; (adr r3, 80098e8 <atan+0x2a0>)
 8009752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009756:	f7f6 fd09 	bl	800016c <__adddf3>
 800975a:	4632      	mov	r2, r6
 800975c:	463b      	mov	r3, r7
 800975e:	f7f6 febb 	bl	80004d8 <__aeabi_dmul>
 8009762:	a363      	add	r3, pc, #396	; (adr r3, 80098f0 <atan+0x2a8>)
 8009764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009768:	f7f6 fd00 	bl	800016c <__adddf3>
 800976c:	4632      	mov	r2, r6
 800976e:	463b      	mov	r3, r7
 8009770:	f7f6 feb2 	bl	80004d8 <__aeabi_dmul>
 8009774:	a360      	add	r3, pc, #384	; (adr r3, 80098f8 <atan+0x2b0>)
 8009776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977a:	f7f6 fcf7 	bl	800016c <__adddf3>
 800977e:	4642      	mov	r2, r8
 8009780:	464b      	mov	r3, r9
 8009782:	f7f6 fea9 	bl	80004d8 <__aeabi_dmul>
 8009786:	a35e      	add	r3, pc, #376	; (adr r3, 8009900 <atan+0x2b8>)
 8009788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978c:	4680      	mov	r8, r0
 800978e:	4689      	mov	r9, r1
 8009790:	4630      	mov	r0, r6
 8009792:	4639      	mov	r1, r7
 8009794:	f7f6 fea0 	bl	80004d8 <__aeabi_dmul>
 8009798:	a35b      	add	r3, pc, #364	; (adr r3, 8009908 <atan+0x2c0>)
 800979a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979e:	f7f6 fce3 	bl	8000168 <__aeabi_dsub>
 80097a2:	4632      	mov	r2, r6
 80097a4:	463b      	mov	r3, r7
 80097a6:	f7f6 fe97 	bl	80004d8 <__aeabi_dmul>
 80097aa:	a359      	add	r3, pc, #356	; (adr r3, 8009910 <atan+0x2c8>)
 80097ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b0:	f7f6 fcda 	bl	8000168 <__aeabi_dsub>
 80097b4:	4632      	mov	r2, r6
 80097b6:	463b      	mov	r3, r7
 80097b8:	f7f6 fe8e 	bl	80004d8 <__aeabi_dmul>
 80097bc:	a356      	add	r3, pc, #344	; (adr r3, 8009918 <atan+0x2d0>)
 80097be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c2:	f7f6 fcd1 	bl	8000168 <__aeabi_dsub>
 80097c6:	4632      	mov	r2, r6
 80097c8:	463b      	mov	r3, r7
 80097ca:	f7f6 fe85 	bl	80004d8 <__aeabi_dmul>
 80097ce:	a354      	add	r3, pc, #336	; (adr r3, 8009920 <atan+0x2d8>)
 80097d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d4:	f7f6 fcc8 	bl	8000168 <__aeabi_dsub>
 80097d8:	4632      	mov	r2, r6
 80097da:	463b      	mov	r3, r7
 80097dc:	f7f6 fe7c 	bl	80004d8 <__aeabi_dmul>
 80097e0:	4602      	mov	r2, r0
 80097e2:	460b      	mov	r3, r1
 80097e4:	4640      	mov	r0, r8
 80097e6:	4649      	mov	r1, r9
 80097e8:	f7f6 fcc0 	bl	800016c <__adddf3>
 80097ec:	4622      	mov	r2, r4
 80097ee:	462b      	mov	r3, r5
 80097f0:	f7f6 fe72 	bl	80004d8 <__aeabi_dmul>
 80097f4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80097f8:	4602      	mov	r2, r0
 80097fa:	460b      	mov	r3, r1
 80097fc:	d144      	bne.n	8009888 <atan+0x240>
 80097fe:	4620      	mov	r0, r4
 8009800:	4629      	mov	r1, r5
 8009802:	f7f6 fcb1 	bl	8000168 <__aeabi_dsub>
 8009806:	e734      	b.n	8009672 <atan+0x2a>
 8009808:	2200      	movs	r2, #0
 800980a:	4b4c      	ldr	r3, [pc, #304]	; (800993c <atan+0x2f4>)
 800980c:	f7f6 fcac 	bl	8000168 <__aeabi_dsub>
 8009810:	2200      	movs	r2, #0
 8009812:	4606      	mov	r6, r0
 8009814:	460f      	mov	r7, r1
 8009816:	4620      	mov	r0, r4
 8009818:	4629      	mov	r1, r5
 800981a:	4b48      	ldr	r3, [pc, #288]	; (800993c <atan+0x2f4>)
 800981c:	f7f6 fca6 	bl	800016c <__adddf3>
 8009820:	4602      	mov	r2, r0
 8009822:	460b      	mov	r3, r1
 8009824:	4630      	mov	r0, r6
 8009826:	4639      	mov	r1, r7
 8009828:	f7f6 ff80 	bl	800072c <__aeabi_ddiv>
 800982c:	f04f 0a01 	mov.w	sl, #1
 8009830:	4604      	mov	r4, r0
 8009832:	460d      	mov	r5, r1
 8009834:	e767      	b.n	8009706 <atan+0xbe>
 8009836:	4b43      	ldr	r3, [pc, #268]	; (8009944 <atan+0x2fc>)
 8009838:	429e      	cmp	r6, r3
 800983a:	da1a      	bge.n	8009872 <atan+0x22a>
 800983c:	2200      	movs	r2, #0
 800983e:	4b42      	ldr	r3, [pc, #264]	; (8009948 <atan+0x300>)
 8009840:	f7f6 fc92 	bl	8000168 <__aeabi_dsub>
 8009844:	2200      	movs	r2, #0
 8009846:	4606      	mov	r6, r0
 8009848:	460f      	mov	r7, r1
 800984a:	4620      	mov	r0, r4
 800984c:	4629      	mov	r1, r5
 800984e:	4b3e      	ldr	r3, [pc, #248]	; (8009948 <atan+0x300>)
 8009850:	f7f6 fe42 	bl	80004d8 <__aeabi_dmul>
 8009854:	2200      	movs	r2, #0
 8009856:	4b39      	ldr	r3, [pc, #228]	; (800993c <atan+0x2f4>)
 8009858:	f7f6 fc88 	bl	800016c <__adddf3>
 800985c:	4602      	mov	r2, r0
 800985e:	460b      	mov	r3, r1
 8009860:	4630      	mov	r0, r6
 8009862:	4639      	mov	r1, r7
 8009864:	f7f6 ff62 	bl	800072c <__aeabi_ddiv>
 8009868:	f04f 0a02 	mov.w	sl, #2
 800986c:	4604      	mov	r4, r0
 800986e:	460d      	mov	r5, r1
 8009870:	e749      	b.n	8009706 <atan+0xbe>
 8009872:	4602      	mov	r2, r0
 8009874:	460b      	mov	r3, r1
 8009876:	2000      	movs	r0, #0
 8009878:	4934      	ldr	r1, [pc, #208]	; (800994c <atan+0x304>)
 800987a:	f7f6 ff57 	bl	800072c <__aeabi_ddiv>
 800987e:	f04f 0a03 	mov.w	sl, #3
 8009882:	4604      	mov	r4, r0
 8009884:	460d      	mov	r5, r1
 8009886:	e73e      	b.n	8009706 <atan+0xbe>
 8009888:	4b31      	ldr	r3, [pc, #196]	; (8009950 <atan+0x308>)
 800988a:	4e32      	ldr	r6, [pc, #200]	; (8009954 <atan+0x30c>)
 800988c:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009890:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009894:	e9da 2300 	ldrd	r2, r3, [sl]
 8009898:	f7f6 fc66 	bl	8000168 <__aeabi_dsub>
 800989c:	4622      	mov	r2, r4
 800989e:	462b      	mov	r3, r5
 80098a0:	f7f6 fc62 	bl	8000168 <__aeabi_dsub>
 80098a4:	4602      	mov	r2, r0
 80098a6:	460b      	mov	r3, r1
 80098a8:	e9d6 0100 	ldrd	r0, r1, [r6]
 80098ac:	f7f6 fc5c 	bl	8000168 <__aeabi_dsub>
 80098b0:	f1bb 0f00 	cmp.w	fp, #0
 80098b4:	4604      	mov	r4, r0
 80098b6:	460d      	mov	r5, r1
 80098b8:	f6bf aee4 	bge.w	8009684 <atan+0x3c>
 80098bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098c0:	461d      	mov	r5, r3
 80098c2:	e6df      	b.n	8009684 <atan+0x3c>
 80098c4:	4d24      	ldr	r5, [pc, #144]	; (8009958 <atan+0x310>)
 80098c6:	e6dd      	b.n	8009684 <atan+0x3c>
 80098c8:	8800759c 	.word	0x8800759c
 80098cc:	7e37e43c 	.word	0x7e37e43c
 80098d0:	e322da11 	.word	0xe322da11
 80098d4:	3f90ad3a 	.word	0x3f90ad3a
 80098d8:	24760deb 	.word	0x24760deb
 80098dc:	3fa97b4b 	.word	0x3fa97b4b
 80098e0:	a0d03d51 	.word	0xa0d03d51
 80098e4:	3fb10d66 	.word	0x3fb10d66
 80098e8:	c54c206e 	.word	0xc54c206e
 80098ec:	3fb745cd 	.word	0x3fb745cd
 80098f0:	920083ff 	.word	0x920083ff
 80098f4:	3fc24924 	.word	0x3fc24924
 80098f8:	5555550d 	.word	0x5555550d
 80098fc:	3fd55555 	.word	0x3fd55555
 8009900:	2c6a6c2f 	.word	0x2c6a6c2f
 8009904:	bfa2b444 	.word	0xbfa2b444
 8009908:	52defd9a 	.word	0x52defd9a
 800990c:	3fadde2d 	.word	0x3fadde2d
 8009910:	af749a6d 	.word	0xaf749a6d
 8009914:	3fb3b0f2 	.word	0x3fb3b0f2
 8009918:	fe231671 	.word	0xfe231671
 800991c:	3fbc71c6 	.word	0x3fbc71c6
 8009920:	9998ebc4 	.word	0x9998ebc4
 8009924:	3fc99999 	.word	0x3fc99999
 8009928:	440fffff 	.word	0x440fffff
 800992c:	7ff00000 	.word	0x7ff00000
 8009930:	54442d18 	.word	0x54442d18
 8009934:	bff921fb 	.word	0xbff921fb
 8009938:	3fdbffff 	.word	0x3fdbffff
 800993c:	3ff00000 	.word	0x3ff00000
 8009940:	3ff2ffff 	.word	0x3ff2ffff
 8009944:	40038000 	.word	0x40038000
 8009948:	3ff80000 	.word	0x3ff80000
 800994c:	bff00000 	.word	0xbff00000
 8009950:	0800abf8 	.word	0x0800abf8
 8009954:	0800abd8 	.word	0x0800abd8
 8009958:	3ff921fb 	.word	0x3ff921fb

0800995c <fabs>:
 800995c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009960:	4770      	bx	lr
	...

08009964 <pow>:
 8009964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009968:	4614      	mov	r4, r2
 800996a:	461d      	mov	r5, r3
 800996c:	4680      	mov	r8, r0
 800996e:	4689      	mov	r9, r1
 8009970:	f000 f886 	bl	8009a80 <__ieee754_pow>
 8009974:	4622      	mov	r2, r4
 8009976:	4606      	mov	r6, r0
 8009978:	460f      	mov	r7, r1
 800997a:	462b      	mov	r3, r5
 800997c:	4620      	mov	r0, r4
 800997e:	4629      	mov	r1, r5
 8009980:	f7f7 f844 	bl	8000a0c <__aeabi_dcmpun>
 8009984:	bbc8      	cbnz	r0, 80099fa <pow+0x96>
 8009986:	2200      	movs	r2, #0
 8009988:	2300      	movs	r3, #0
 800998a:	4640      	mov	r0, r8
 800998c:	4649      	mov	r1, r9
 800998e:	f7f7 f80b 	bl	80009a8 <__aeabi_dcmpeq>
 8009992:	b1b8      	cbz	r0, 80099c4 <pow+0x60>
 8009994:	2200      	movs	r2, #0
 8009996:	2300      	movs	r3, #0
 8009998:	4620      	mov	r0, r4
 800999a:	4629      	mov	r1, r5
 800999c:	f7f7 f804 	bl	80009a8 <__aeabi_dcmpeq>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	d141      	bne.n	8009a28 <pow+0xc4>
 80099a4:	4620      	mov	r0, r4
 80099a6:	4629      	mov	r1, r5
 80099a8:	f000 fe5c 	bl	800a664 <finite>
 80099ac:	b328      	cbz	r0, 80099fa <pow+0x96>
 80099ae:	2200      	movs	r2, #0
 80099b0:	2300      	movs	r3, #0
 80099b2:	4620      	mov	r0, r4
 80099b4:	4629      	mov	r1, r5
 80099b6:	f7f7 f801 	bl	80009bc <__aeabi_dcmplt>
 80099ba:	b1f0      	cbz	r0, 80099fa <pow+0x96>
 80099bc:	f7fc ff3a 	bl	8006834 <__errno>
 80099c0:	2322      	movs	r3, #34	; 0x22
 80099c2:	e019      	b.n	80099f8 <pow+0x94>
 80099c4:	4630      	mov	r0, r6
 80099c6:	4639      	mov	r1, r7
 80099c8:	f000 fe4c 	bl	800a664 <finite>
 80099cc:	b9c8      	cbnz	r0, 8009a02 <pow+0x9e>
 80099ce:	4640      	mov	r0, r8
 80099d0:	4649      	mov	r1, r9
 80099d2:	f000 fe47 	bl	800a664 <finite>
 80099d6:	b1a0      	cbz	r0, 8009a02 <pow+0x9e>
 80099d8:	4620      	mov	r0, r4
 80099da:	4629      	mov	r1, r5
 80099dc:	f000 fe42 	bl	800a664 <finite>
 80099e0:	b178      	cbz	r0, 8009a02 <pow+0x9e>
 80099e2:	4632      	mov	r2, r6
 80099e4:	463b      	mov	r3, r7
 80099e6:	4630      	mov	r0, r6
 80099e8:	4639      	mov	r1, r7
 80099ea:	f7f7 f80f 	bl	8000a0c <__aeabi_dcmpun>
 80099ee:	2800      	cmp	r0, #0
 80099f0:	d0e4      	beq.n	80099bc <pow+0x58>
 80099f2:	f7fc ff1f 	bl	8006834 <__errno>
 80099f6:	2321      	movs	r3, #33	; 0x21
 80099f8:	6003      	str	r3, [r0, #0]
 80099fa:	4630      	mov	r0, r6
 80099fc:	4639      	mov	r1, r7
 80099fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a02:	2200      	movs	r2, #0
 8009a04:	2300      	movs	r3, #0
 8009a06:	4630      	mov	r0, r6
 8009a08:	4639      	mov	r1, r7
 8009a0a:	f7f6 ffcd 	bl	80009a8 <__aeabi_dcmpeq>
 8009a0e:	2800      	cmp	r0, #0
 8009a10:	d0f3      	beq.n	80099fa <pow+0x96>
 8009a12:	4640      	mov	r0, r8
 8009a14:	4649      	mov	r1, r9
 8009a16:	f000 fe25 	bl	800a664 <finite>
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	d0ed      	beq.n	80099fa <pow+0x96>
 8009a1e:	4620      	mov	r0, r4
 8009a20:	4629      	mov	r1, r5
 8009a22:	f000 fe1f 	bl	800a664 <finite>
 8009a26:	e7c8      	b.n	80099ba <pow+0x56>
 8009a28:	2600      	movs	r6, #0
 8009a2a:	4f01      	ldr	r7, [pc, #4]	; (8009a30 <pow+0xcc>)
 8009a2c:	e7e5      	b.n	80099fa <pow+0x96>
 8009a2e:	bf00      	nop
 8009a30:	3ff00000 	.word	0x3ff00000

08009a34 <sqrt>:
 8009a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a36:	4606      	mov	r6, r0
 8009a38:	460f      	mov	r7, r1
 8009a3a:	f000 fd37 	bl	800a4ac <__ieee754_sqrt>
 8009a3e:	4632      	mov	r2, r6
 8009a40:	4604      	mov	r4, r0
 8009a42:	460d      	mov	r5, r1
 8009a44:	463b      	mov	r3, r7
 8009a46:	4630      	mov	r0, r6
 8009a48:	4639      	mov	r1, r7
 8009a4a:	f7f6 ffdf 	bl	8000a0c <__aeabi_dcmpun>
 8009a4e:	b990      	cbnz	r0, 8009a76 <sqrt+0x42>
 8009a50:	2200      	movs	r2, #0
 8009a52:	2300      	movs	r3, #0
 8009a54:	4630      	mov	r0, r6
 8009a56:	4639      	mov	r1, r7
 8009a58:	f7f6 ffb0 	bl	80009bc <__aeabi_dcmplt>
 8009a5c:	b158      	cbz	r0, 8009a76 <sqrt+0x42>
 8009a5e:	f7fc fee9 	bl	8006834 <__errno>
 8009a62:	2321      	movs	r3, #33	; 0x21
 8009a64:	2200      	movs	r2, #0
 8009a66:	6003      	str	r3, [r0, #0]
 8009a68:	2300      	movs	r3, #0
 8009a6a:	4610      	mov	r0, r2
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	f7f6 fe5d 	bl	800072c <__aeabi_ddiv>
 8009a72:	4604      	mov	r4, r0
 8009a74:	460d      	mov	r5, r1
 8009a76:	4620      	mov	r0, r4
 8009a78:	4629      	mov	r1, r5
 8009a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a7c:	0000      	movs	r0, r0
	...

08009a80 <__ieee754_pow>:
 8009a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a84:	b093      	sub	sp, #76	; 0x4c
 8009a86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a8a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8009a8e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8009a92:	4689      	mov	r9, r1
 8009a94:	ea56 0102 	orrs.w	r1, r6, r2
 8009a98:	4680      	mov	r8, r0
 8009a9a:	d111      	bne.n	8009ac0 <__ieee754_pow+0x40>
 8009a9c:	1803      	adds	r3, r0, r0
 8009a9e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8009aa2:	4152      	adcs	r2, r2
 8009aa4:	4299      	cmp	r1, r3
 8009aa6:	4b82      	ldr	r3, [pc, #520]	; (8009cb0 <__ieee754_pow+0x230>)
 8009aa8:	4193      	sbcs	r3, r2
 8009aaa:	f080 84b9 	bcs.w	800a420 <__ieee754_pow+0x9a0>
 8009aae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ab2:	4640      	mov	r0, r8
 8009ab4:	4649      	mov	r1, r9
 8009ab6:	f7f6 fb59 	bl	800016c <__adddf3>
 8009aba:	4683      	mov	fp, r0
 8009abc:	468c      	mov	ip, r1
 8009abe:	e06f      	b.n	8009ba0 <__ieee754_pow+0x120>
 8009ac0:	4b7c      	ldr	r3, [pc, #496]	; (8009cb4 <__ieee754_pow+0x234>)
 8009ac2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8009ac6:	429c      	cmp	r4, r3
 8009ac8:	464d      	mov	r5, r9
 8009aca:	4682      	mov	sl, r0
 8009acc:	dc06      	bgt.n	8009adc <__ieee754_pow+0x5c>
 8009ace:	d101      	bne.n	8009ad4 <__ieee754_pow+0x54>
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	d1ec      	bne.n	8009aae <__ieee754_pow+0x2e>
 8009ad4:	429e      	cmp	r6, r3
 8009ad6:	dc01      	bgt.n	8009adc <__ieee754_pow+0x5c>
 8009ad8:	d10f      	bne.n	8009afa <__ieee754_pow+0x7a>
 8009ada:	b172      	cbz	r2, 8009afa <__ieee754_pow+0x7a>
 8009adc:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009ae0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009ae4:	ea55 050a 	orrs.w	r5, r5, sl
 8009ae8:	d1e1      	bne.n	8009aae <__ieee754_pow+0x2e>
 8009aea:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009aee:	18db      	adds	r3, r3, r3
 8009af0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009af4:	4152      	adcs	r2, r2
 8009af6:	429d      	cmp	r5, r3
 8009af8:	e7d5      	b.n	8009aa6 <__ieee754_pow+0x26>
 8009afa:	2d00      	cmp	r5, #0
 8009afc:	da39      	bge.n	8009b72 <__ieee754_pow+0xf2>
 8009afe:	4b6e      	ldr	r3, [pc, #440]	; (8009cb8 <__ieee754_pow+0x238>)
 8009b00:	429e      	cmp	r6, r3
 8009b02:	dc52      	bgt.n	8009baa <__ieee754_pow+0x12a>
 8009b04:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009b08:	429e      	cmp	r6, r3
 8009b0a:	f340 849c 	ble.w	800a446 <__ieee754_pow+0x9c6>
 8009b0e:	1533      	asrs	r3, r6, #20
 8009b10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009b14:	2b14      	cmp	r3, #20
 8009b16:	dd0f      	ble.n	8009b38 <__ieee754_pow+0xb8>
 8009b18:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009b1c:	fa22 f103 	lsr.w	r1, r2, r3
 8009b20:	fa01 f303 	lsl.w	r3, r1, r3
 8009b24:	4293      	cmp	r3, r2
 8009b26:	f040 848e 	bne.w	800a446 <__ieee754_pow+0x9c6>
 8009b2a:	f001 0101 	and.w	r1, r1, #1
 8009b2e:	f1c1 0302 	rsb	r3, r1, #2
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	b182      	cbz	r2, 8009b58 <__ieee754_pow+0xd8>
 8009b36:	e05d      	b.n	8009bf4 <__ieee754_pow+0x174>
 8009b38:	2a00      	cmp	r2, #0
 8009b3a:	d159      	bne.n	8009bf0 <__ieee754_pow+0x170>
 8009b3c:	f1c3 0314 	rsb	r3, r3, #20
 8009b40:	fa46 f103 	asr.w	r1, r6, r3
 8009b44:	fa01 f303 	lsl.w	r3, r1, r3
 8009b48:	42b3      	cmp	r3, r6
 8009b4a:	f040 8479 	bne.w	800a440 <__ieee754_pow+0x9c0>
 8009b4e:	f001 0101 	and.w	r1, r1, #1
 8009b52:	f1c1 0302 	rsb	r3, r1, #2
 8009b56:	9300      	str	r3, [sp, #0]
 8009b58:	4b58      	ldr	r3, [pc, #352]	; (8009cbc <__ieee754_pow+0x23c>)
 8009b5a:	429e      	cmp	r6, r3
 8009b5c:	d132      	bne.n	8009bc4 <__ieee754_pow+0x144>
 8009b5e:	2f00      	cmp	r7, #0
 8009b60:	f280 846a 	bge.w	800a438 <__ieee754_pow+0x9b8>
 8009b64:	4642      	mov	r2, r8
 8009b66:	464b      	mov	r3, r9
 8009b68:	2000      	movs	r0, #0
 8009b6a:	4954      	ldr	r1, [pc, #336]	; (8009cbc <__ieee754_pow+0x23c>)
 8009b6c:	f7f6 fdde 	bl	800072c <__aeabi_ddiv>
 8009b70:	e7a3      	b.n	8009aba <__ieee754_pow+0x3a>
 8009b72:	2300      	movs	r3, #0
 8009b74:	9300      	str	r3, [sp, #0]
 8009b76:	2a00      	cmp	r2, #0
 8009b78:	d13c      	bne.n	8009bf4 <__ieee754_pow+0x174>
 8009b7a:	4b4e      	ldr	r3, [pc, #312]	; (8009cb4 <__ieee754_pow+0x234>)
 8009b7c:	429e      	cmp	r6, r3
 8009b7e:	d1eb      	bne.n	8009b58 <__ieee754_pow+0xd8>
 8009b80:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009b84:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009b88:	ea53 030a 	orrs.w	r3, r3, sl
 8009b8c:	f000 8448 	beq.w	800a420 <__ieee754_pow+0x9a0>
 8009b90:	4b4b      	ldr	r3, [pc, #300]	; (8009cc0 <__ieee754_pow+0x240>)
 8009b92:	429c      	cmp	r4, r3
 8009b94:	dd0b      	ble.n	8009bae <__ieee754_pow+0x12e>
 8009b96:	2f00      	cmp	r7, #0
 8009b98:	f2c0 8448 	blt.w	800a42c <__ieee754_pow+0x9ac>
 8009b9c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8009ba0:	4658      	mov	r0, fp
 8009ba2:	4661      	mov	r1, ip
 8009ba4:	b013      	add	sp, #76	; 0x4c
 8009ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009baa:	2302      	movs	r3, #2
 8009bac:	e7e2      	b.n	8009b74 <__ieee754_pow+0xf4>
 8009bae:	2f00      	cmp	r7, #0
 8009bb0:	f04f 0b00 	mov.w	fp, #0
 8009bb4:	f04f 0c00 	mov.w	ip, #0
 8009bb8:	daf2      	bge.n	8009ba0 <__ieee754_pow+0x120>
 8009bba:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8009bbe:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8009bc2:	e7ed      	b.n	8009ba0 <__ieee754_pow+0x120>
 8009bc4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8009bc8:	d106      	bne.n	8009bd8 <__ieee754_pow+0x158>
 8009bca:	4642      	mov	r2, r8
 8009bcc:	464b      	mov	r3, r9
 8009bce:	4640      	mov	r0, r8
 8009bd0:	4649      	mov	r1, r9
 8009bd2:	f7f6 fc81 	bl	80004d8 <__aeabi_dmul>
 8009bd6:	e770      	b.n	8009aba <__ieee754_pow+0x3a>
 8009bd8:	4b3a      	ldr	r3, [pc, #232]	; (8009cc4 <__ieee754_pow+0x244>)
 8009bda:	429f      	cmp	r7, r3
 8009bdc:	d10a      	bne.n	8009bf4 <__ieee754_pow+0x174>
 8009bde:	2d00      	cmp	r5, #0
 8009be0:	db08      	blt.n	8009bf4 <__ieee754_pow+0x174>
 8009be2:	4640      	mov	r0, r8
 8009be4:	4649      	mov	r1, r9
 8009be6:	b013      	add	sp, #76	; 0x4c
 8009be8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bec:	f000 bc5e 	b.w	800a4ac <__ieee754_sqrt>
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	9300      	str	r3, [sp, #0]
 8009bf4:	4640      	mov	r0, r8
 8009bf6:	4649      	mov	r1, r9
 8009bf8:	f7ff feb0 	bl	800995c <fabs>
 8009bfc:	4683      	mov	fp, r0
 8009bfe:	468c      	mov	ip, r1
 8009c00:	f1ba 0f00 	cmp.w	sl, #0
 8009c04:	d128      	bne.n	8009c58 <__ieee754_pow+0x1d8>
 8009c06:	b124      	cbz	r4, 8009c12 <__ieee754_pow+0x192>
 8009c08:	4b2c      	ldr	r3, [pc, #176]	; (8009cbc <__ieee754_pow+0x23c>)
 8009c0a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d122      	bne.n	8009c58 <__ieee754_pow+0x1d8>
 8009c12:	2f00      	cmp	r7, #0
 8009c14:	da07      	bge.n	8009c26 <__ieee754_pow+0x1a6>
 8009c16:	465a      	mov	r2, fp
 8009c18:	4663      	mov	r3, ip
 8009c1a:	2000      	movs	r0, #0
 8009c1c:	4927      	ldr	r1, [pc, #156]	; (8009cbc <__ieee754_pow+0x23c>)
 8009c1e:	f7f6 fd85 	bl	800072c <__aeabi_ddiv>
 8009c22:	4683      	mov	fp, r0
 8009c24:	468c      	mov	ip, r1
 8009c26:	2d00      	cmp	r5, #0
 8009c28:	daba      	bge.n	8009ba0 <__ieee754_pow+0x120>
 8009c2a:	9b00      	ldr	r3, [sp, #0]
 8009c2c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009c30:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009c34:	4323      	orrs	r3, r4
 8009c36:	d108      	bne.n	8009c4a <__ieee754_pow+0x1ca>
 8009c38:	465a      	mov	r2, fp
 8009c3a:	4663      	mov	r3, ip
 8009c3c:	4658      	mov	r0, fp
 8009c3e:	4661      	mov	r1, ip
 8009c40:	f7f6 fa92 	bl	8000168 <__aeabi_dsub>
 8009c44:	4602      	mov	r2, r0
 8009c46:	460b      	mov	r3, r1
 8009c48:	e790      	b.n	8009b6c <__ieee754_pow+0xec>
 8009c4a:	9b00      	ldr	r3, [sp, #0]
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d1a7      	bne.n	8009ba0 <__ieee754_pow+0x120>
 8009c50:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8009c54:	469c      	mov	ip, r3
 8009c56:	e7a3      	b.n	8009ba0 <__ieee754_pow+0x120>
 8009c58:	0feb      	lsrs	r3, r5, #31
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	930c      	str	r3, [sp, #48]	; 0x30
 8009c5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c60:	9b00      	ldr	r3, [sp, #0]
 8009c62:	4313      	orrs	r3, r2
 8009c64:	d104      	bne.n	8009c70 <__ieee754_pow+0x1f0>
 8009c66:	4642      	mov	r2, r8
 8009c68:	464b      	mov	r3, r9
 8009c6a:	4640      	mov	r0, r8
 8009c6c:	4649      	mov	r1, r9
 8009c6e:	e7e7      	b.n	8009c40 <__ieee754_pow+0x1c0>
 8009c70:	4b15      	ldr	r3, [pc, #84]	; (8009cc8 <__ieee754_pow+0x248>)
 8009c72:	429e      	cmp	r6, r3
 8009c74:	f340 80f6 	ble.w	8009e64 <__ieee754_pow+0x3e4>
 8009c78:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009c7c:	429e      	cmp	r6, r3
 8009c7e:	4b10      	ldr	r3, [pc, #64]	; (8009cc0 <__ieee754_pow+0x240>)
 8009c80:	dd09      	ble.n	8009c96 <__ieee754_pow+0x216>
 8009c82:	429c      	cmp	r4, r3
 8009c84:	dc0c      	bgt.n	8009ca0 <__ieee754_pow+0x220>
 8009c86:	2f00      	cmp	r7, #0
 8009c88:	da0c      	bge.n	8009ca4 <__ieee754_pow+0x224>
 8009c8a:	2000      	movs	r0, #0
 8009c8c:	b013      	add	sp, #76	; 0x4c
 8009c8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c92:	f000 bce2 	b.w	800a65a <__math_oflow>
 8009c96:	429c      	cmp	r4, r3
 8009c98:	dbf5      	blt.n	8009c86 <__ieee754_pow+0x206>
 8009c9a:	4b08      	ldr	r3, [pc, #32]	; (8009cbc <__ieee754_pow+0x23c>)
 8009c9c:	429c      	cmp	r4, r3
 8009c9e:	dd15      	ble.n	8009ccc <__ieee754_pow+0x24c>
 8009ca0:	2f00      	cmp	r7, #0
 8009ca2:	dcf2      	bgt.n	8009c8a <__ieee754_pow+0x20a>
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	b013      	add	sp, #76	; 0x4c
 8009ca8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cac:	f000 bcd0 	b.w	800a650 <__math_uflow>
 8009cb0:	fff00000 	.word	0xfff00000
 8009cb4:	7ff00000 	.word	0x7ff00000
 8009cb8:	433fffff 	.word	0x433fffff
 8009cbc:	3ff00000 	.word	0x3ff00000
 8009cc0:	3fefffff 	.word	0x3fefffff
 8009cc4:	3fe00000 	.word	0x3fe00000
 8009cc8:	41e00000 	.word	0x41e00000
 8009ccc:	4661      	mov	r1, ip
 8009cce:	2200      	movs	r2, #0
 8009cd0:	4658      	mov	r0, fp
 8009cd2:	4b5f      	ldr	r3, [pc, #380]	; (8009e50 <__ieee754_pow+0x3d0>)
 8009cd4:	f7f6 fa48 	bl	8000168 <__aeabi_dsub>
 8009cd8:	a355      	add	r3, pc, #340	; (adr r3, 8009e30 <__ieee754_pow+0x3b0>)
 8009cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cde:	4604      	mov	r4, r0
 8009ce0:	460d      	mov	r5, r1
 8009ce2:	f7f6 fbf9 	bl	80004d8 <__aeabi_dmul>
 8009ce6:	a354      	add	r3, pc, #336	; (adr r3, 8009e38 <__ieee754_pow+0x3b8>)
 8009ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cec:	4606      	mov	r6, r0
 8009cee:	460f      	mov	r7, r1
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	4629      	mov	r1, r5
 8009cf4:	f7f6 fbf0 	bl	80004d8 <__aeabi_dmul>
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	4682      	mov	sl, r0
 8009cfc:	468b      	mov	fp, r1
 8009cfe:	4620      	mov	r0, r4
 8009d00:	4629      	mov	r1, r5
 8009d02:	4b54      	ldr	r3, [pc, #336]	; (8009e54 <__ieee754_pow+0x3d4>)
 8009d04:	f7f6 fbe8 	bl	80004d8 <__aeabi_dmul>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	a14c      	add	r1, pc, #304	; (adr r1, 8009e40 <__ieee754_pow+0x3c0>)
 8009d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d12:	f7f6 fa29 	bl	8000168 <__aeabi_dsub>
 8009d16:	4622      	mov	r2, r4
 8009d18:	462b      	mov	r3, r5
 8009d1a:	f7f6 fbdd 	bl	80004d8 <__aeabi_dmul>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	460b      	mov	r3, r1
 8009d22:	2000      	movs	r0, #0
 8009d24:	494c      	ldr	r1, [pc, #304]	; (8009e58 <__ieee754_pow+0x3d8>)
 8009d26:	f7f6 fa1f 	bl	8000168 <__aeabi_dsub>
 8009d2a:	4622      	mov	r2, r4
 8009d2c:	462b      	mov	r3, r5
 8009d2e:	4680      	mov	r8, r0
 8009d30:	4689      	mov	r9, r1
 8009d32:	4620      	mov	r0, r4
 8009d34:	4629      	mov	r1, r5
 8009d36:	f7f6 fbcf 	bl	80004d8 <__aeabi_dmul>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	4640      	mov	r0, r8
 8009d40:	4649      	mov	r1, r9
 8009d42:	f7f6 fbc9 	bl	80004d8 <__aeabi_dmul>
 8009d46:	a340      	add	r3, pc, #256	; (adr r3, 8009e48 <__ieee754_pow+0x3c8>)
 8009d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4c:	f7f6 fbc4 	bl	80004d8 <__aeabi_dmul>
 8009d50:	4602      	mov	r2, r0
 8009d52:	460b      	mov	r3, r1
 8009d54:	4650      	mov	r0, sl
 8009d56:	4659      	mov	r1, fp
 8009d58:	f7f6 fa06 	bl	8000168 <__aeabi_dsub>
 8009d5c:	f04f 0a00 	mov.w	sl, #0
 8009d60:	4602      	mov	r2, r0
 8009d62:	460b      	mov	r3, r1
 8009d64:	4604      	mov	r4, r0
 8009d66:	460d      	mov	r5, r1
 8009d68:	4630      	mov	r0, r6
 8009d6a:	4639      	mov	r1, r7
 8009d6c:	f7f6 f9fe 	bl	800016c <__adddf3>
 8009d70:	4632      	mov	r2, r6
 8009d72:	463b      	mov	r3, r7
 8009d74:	4650      	mov	r0, sl
 8009d76:	468b      	mov	fp, r1
 8009d78:	f7f6 f9f6 	bl	8000168 <__aeabi_dsub>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	460b      	mov	r3, r1
 8009d80:	4620      	mov	r0, r4
 8009d82:	4629      	mov	r1, r5
 8009d84:	f7f6 f9f0 	bl	8000168 <__aeabi_dsub>
 8009d88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009d8c:	9b00      	ldr	r3, [sp, #0]
 8009d8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d90:	3b01      	subs	r3, #1
 8009d92:	4313      	orrs	r3, r2
 8009d94:	f04f 0600 	mov.w	r6, #0
 8009d98:	f04f 0200 	mov.w	r2, #0
 8009d9c:	bf0c      	ite	eq
 8009d9e:	4b2f      	ldreq	r3, [pc, #188]	; (8009e5c <__ieee754_pow+0x3dc>)
 8009da0:	4b2b      	ldrne	r3, [pc, #172]	; (8009e50 <__ieee754_pow+0x3d0>)
 8009da2:	4604      	mov	r4, r0
 8009da4:	460d      	mov	r5, r1
 8009da6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009daa:	e9cd 2300 	strd	r2, r3, [sp]
 8009dae:	4632      	mov	r2, r6
 8009db0:	463b      	mov	r3, r7
 8009db2:	f7f6 f9d9 	bl	8000168 <__aeabi_dsub>
 8009db6:	4652      	mov	r2, sl
 8009db8:	465b      	mov	r3, fp
 8009dba:	f7f6 fb8d 	bl	80004d8 <__aeabi_dmul>
 8009dbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009dc2:	4680      	mov	r8, r0
 8009dc4:	4689      	mov	r9, r1
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	4629      	mov	r1, r5
 8009dca:	f7f6 fb85 	bl	80004d8 <__aeabi_dmul>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	4640      	mov	r0, r8
 8009dd4:	4649      	mov	r1, r9
 8009dd6:	f7f6 f9c9 	bl	800016c <__adddf3>
 8009dda:	4632      	mov	r2, r6
 8009ddc:	463b      	mov	r3, r7
 8009dde:	4680      	mov	r8, r0
 8009de0:	4689      	mov	r9, r1
 8009de2:	4650      	mov	r0, sl
 8009de4:	4659      	mov	r1, fp
 8009de6:	f7f6 fb77 	bl	80004d8 <__aeabi_dmul>
 8009dea:	4604      	mov	r4, r0
 8009dec:	460d      	mov	r5, r1
 8009dee:	460b      	mov	r3, r1
 8009df0:	4602      	mov	r2, r0
 8009df2:	4649      	mov	r1, r9
 8009df4:	4640      	mov	r0, r8
 8009df6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009dfa:	f7f6 f9b7 	bl	800016c <__adddf3>
 8009dfe:	4b18      	ldr	r3, [pc, #96]	; (8009e60 <__ieee754_pow+0x3e0>)
 8009e00:	4682      	mov	sl, r0
 8009e02:	4299      	cmp	r1, r3
 8009e04:	460f      	mov	r7, r1
 8009e06:	460e      	mov	r6, r1
 8009e08:	f340 82e5 	ble.w	800a3d6 <__ieee754_pow+0x956>
 8009e0c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009e10:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009e14:	4303      	orrs	r3, r0
 8009e16:	f000 81df 	beq.w	800a1d8 <__ieee754_pow+0x758>
 8009e1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	2300      	movs	r3, #0
 8009e22:	f7f6 fdcb 	bl	80009bc <__aeabi_dcmplt>
 8009e26:	3800      	subs	r0, #0
 8009e28:	bf18      	it	ne
 8009e2a:	2001      	movne	r0, #1
 8009e2c:	e72e      	b.n	8009c8c <__ieee754_pow+0x20c>
 8009e2e:	bf00      	nop
 8009e30:	60000000 	.word	0x60000000
 8009e34:	3ff71547 	.word	0x3ff71547
 8009e38:	f85ddf44 	.word	0xf85ddf44
 8009e3c:	3e54ae0b 	.word	0x3e54ae0b
 8009e40:	55555555 	.word	0x55555555
 8009e44:	3fd55555 	.word	0x3fd55555
 8009e48:	652b82fe 	.word	0x652b82fe
 8009e4c:	3ff71547 	.word	0x3ff71547
 8009e50:	3ff00000 	.word	0x3ff00000
 8009e54:	3fd00000 	.word	0x3fd00000
 8009e58:	3fe00000 	.word	0x3fe00000
 8009e5c:	bff00000 	.word	0xbff00000
 8009e60:	408fffff 	.word	0x408fffff
 8009e64:	4bd2      	ldr	r3, [pc, #840]	; (800a1b0 <__ieee754_pow+0x730>)
 8009e66:	2200      	movs	r2, #0
 8009e68:	402b      	ands	r3, r5
 8009e6a:	b943      	cbnz	r3, 8009e7e <__ieee754_pow+0x3fe>
 8009e6c:	4658      	mov	r0, fp
 8009e6e:	4661      	mov	r1, ip
 8009e70:	4bd0      	ldr	r3, [pc, #832]	; (800a1b4 <__ieee754_pow+0x734>)
 8009e72:	f7f6 fb31 	bl	80004d8 <__aeabi_dmul>
 8009e76:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009e7a:	4683      	mov	fp, r0
 8009e7c:	460c      	mov	r4, r1
 8009e7e:	1523      	asrs	r3, r4, #20
 8009e80:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009e84:	4413      	add	r3, r2
 8009e86:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e88:	4bcb      	ldr	r3, [pc, #812]	; (800a1b8 <__ieee754_pow+0x738>)
 8009e8a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009e8e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009e92:	429c      	cmp	r4, r3
 8009e94:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009e98:	dd08      	ble.n	8009eac <__ieee754_pow+0x42c>
 8009e9a:	4bc8      	ldr	r3, [pc, #800]	; (800a1bc <__ieee754_pow+0x73c>)
 8009e9c:	429c      	cmp	r4, r3
 8009e9e:	f340 8199 	ble.w	800a1d4 <__ieee754_pow+0x754>
 8009ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ea4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	930b      	str	r3, [sp, #44]	; 0x2c
 8009eac:	2600      	movs	r6, #0
 8009eae:	00f3      	lsls	r3, r6, #3
 8009eb0:	930d      	str	r3, [sp, #52]	; 0x34
 8009eb2:	4bc3      	ldr	r3, [pc, #780]	; (800a1c0 <__ieee754_pow+0x740>)
 8009eb4:	4658      	mov	r0, fp
 8009eb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009eba:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ebe:	4629      	mov	r1, r5
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8009ec6:	4623      	mov	r3, r4
 8009ec8:	f7f6 f94e 	bl	8000168 <__aeabi_dsub>
 8009ecc:	46da      	mov	sl, fp
 8009ece:	462b      	mov	r3, r5
 8009ed0:	4652      	mov	r2, sl
 8009ed2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009ed6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009eda:	f7f6 f947 	bl	800016c <__adddf3>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	2000      	movs	r0, #0
 8009ee4:	49b7      	ldr	r1, [pc, #732]	; (800a1c4 <__ieee754_pow+0x744>)
 8009ee6:	f7f6 fc21 	bl	800072c <__aeabi_ddiv>
 8009eea:	4602      	mov	r2, r0
 8009eec:	460b      	mov	r3, r1
 8009eee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009ef2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009ef6:	f7f6 faef 	bl	80004d8 <__aeabi_dmul>
 8009efa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009efe:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8009f02:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009f06:	2300      	movs	r3, #0
 8009f08:	2200      	movs	r2, #0
 8009f0a:	46ab      	mov	fp, r5
 8009f0c:	106d      	asrs	r5, r5, #1
 8009f0e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009f12:	9304      	str	r3, [sp, #16]
 8009f14:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009f18:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009f1c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8009f20:	4640      	mov	r0, r8
 8009f22:	4649      	mov	r1, r9
 8009f24:	4614      	mov	r4, r2
 8009f26:	461d      	mov	r5, r3
 8009f28:	f7f6 fad6 	bl	80004d8 <__aeabi_dmul>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	460b      	mov	r3, r1
 8009f30:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009f34:	f7f6 f918 	bl	8000168 <__aeabi_dsub>
 8009f38:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009f3c:	4606      	mov	r6, r0
 8009f3e:	460f      	mov	r7, r1
 8009f40:	4620      	mov	r0, r4
 8009f42:	4629      	mov	r1, r5
 8009f44:	f7f6 f910 	bl	8000168 <__aeabi_dsub>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	4650      	mov	r0, sl
 8009f4e:	4659      	mov	r1, fp
 8009f50:	f7f6 f90a 	bl	8000168 <__aeabi_dsub>
 8009f54:	4642      	mov	r2, r8
 8009f56:	464b      	mov	r3, r9
 8009f58:	f7f6 fabe 	bl	80004d8 <__aeabi_dmul>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	460b      	mov	r3, r1
 8009f60:	4630      	mov	r0, r6
 8009f62:	4639      	mov	r1, r7
 8009f64:	f7f6 f900 	bl	8000168 <__aeabi_dsub>
 8009f68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009f6c:	f7f6 fab4 	bl	80004d8 <__aeabi_dmul>
 8009f70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f74:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009f78:	4610      	mov	r0, r2
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	f7f6 faac 	bl	80004d8 <__aeabi_dmul>
 8009f80:	a379      	add	r3, pc, #484	; (adr r3, 800a168 <__ieee754_pow+0x6e8>)
 8009f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f86:	4604      	mov	r4, r0
 8009f88:	460d      	mov	r5, r1
 8009f8a:	f7f6 faa5 	bl	80004d8 <__aeabi_dmul>
 8009f8e:	a378      	add	r3, pc, #480	; (adr r3, 800a170 <__ieee754_pow+0x6f0>)
 8009f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f94:	f7f6 f8ea 	bl	800016c <__adddf3>
 8009f98:	4622      	mov	r2, r4
 8009f9a:	462b      	mov	r3, r5
 8009f9c:	f7f6 fa9c 	bl	80004d8 <__aeabi_dmul>
 8009fa0:	a375      	add	r3, pc, #468	; (adr r3, 800a178 <__ieee754_pow+0x6f8>)
 8009fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa6:	f7f6 f8e1 	bl	800016c <__adddf3>
 8009faa:	4622      	mov	r2, r4
 8009fac:	462b      	mov	r3, r5
 8009fae:	f7f6 fa93 	bl	80004d8 <__aeabi_dmul>
 8009fb2:	a373      	add	r3, pc, #460	; (adr r3, 800a180 <__ieee754_pow+0x700>)
 8009fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb8:	f7f6 f8d8 	bl	800016c <__adddf3>
 8009fbc:	4622      	mov	r2, r4
 8009fbe:	462b      	mov	r3, r5
 8009fc0:	f7f6 fa8a 	bl	80004d8 <__aeabi_dmul>
 8009fc4:	a370      	add	r3, pc, #448	; (adr r3, 800a188 <__ieee754_pow+0x708>)
 8009fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fca:	f7f6 f8cf 	bl	800016c <__adddf3>
 8009fce:	4622      	mov	r2, r4
 8009fd0:	462b      	mov	r3, r5
 8009fd2:	f7f6 fa81 	bl	80004d8 <__aeabi_dmul>
 8009fd6:	a36e      	add	r3, pc, #440	; (adr r3, 800a190 <__ieee754_pow+0x710>)
 8009fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fdc:	f7f6 f8c6 	bl	800016c <__adddf3>
 8009fe0:	4622      	mov	r2, r4
 8009fe2:	4606      	mov	r6, r0
 8009fe4:	460f      	mov	r7, r1
 8009fe6:	462b      	mov	r3, r5
 8009fe8:	4620      	mov	r0, r4
 8009fea:	4629      	mov	r1, r5
 8009fec:	f7f6 fa74 	bl	80004d8 <__aeabi_dmul>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	4639      	mov	r1, r7
 8009ff8:	f7f6 fa6e 	bl	80004d8 <__aeabi_dmul>
 8009ffc:	4604      	mov	r4, r0
 8009ffe:	460d      	mov	r5, r1
 800a000:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a004:	4642      	mov	r2, r8
 800a006:	464b      	mov	r3, r9
 800a008:	f7f6 f8b0 	bl	800016c <__adddf3>
 800a00c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a010:	f7f6 fa62 	bl	80004d8 <__aeabi_dmul>
 800a014:	4622      	mov	r2, r4
 800a016:	462b      	mov	r3, r5
 800a018:	f7f6 f8a8 	bl	800016c <__adddf3>
 800a01c:	4642      	mov	r2, r8
 800a01e:	4606      	mov	r6, r0
 800a020:	460f      	mov	r7, r1
 800a022:	464b      	mov	r3, r9
 800a024:	4640      	mov	r0, r8
 800a026:	4649      	mov	r1, r9
 800a028:	f7f6 fa56 	bl	80004d8 <__aeabi_dmul>
 800a02c:	2200      	movs	r2, #0
 800a02e:	4b66      	ldr	r3, [pc, #408]	; (800a1c8 <__ieee754_pow+0x748>)
 800a030:	4682      	mov	sl, r0
 800a032:	468b      	mov	fp, r1
 800a034:	f7f6 f89a 	bl	800016c <__adddf3>
 800a038:	4632      	mov	r2, r6
 800a03a:	463b      	mov	r3, r7
 800a03c:	f7f6 f896 	bl	800016c <__adddf3>
 800a040:	2400      	movs	r4, #0
 800a042:	460d      	mov	r5, r1
 800a044:	4622      	mov	r2, r4
 800a046:	460b      	mov	r3, r1
 800a048:	4640      	mov	r0, r8
 800a04a:	4649      	mov	r1, r9
 800a04c:	f7f6 fa44 	bl	80004d8 <__aeabi_dmul>
 800a050:	2200      	movs	r2, #0
 800a052:	4680      	mov	r8, r0
 800a054:	4689      	mov	r9, r1
 800a056:	4620      	mov	r0, r4
 800a058:	4629      	mov	r1, r5
 800a05a:	4b5b      	ldr	r3, [pc, #364]	; (800a1c8 <__ieee754_pow+0x748>)
 800a05c:	f7f6 f884 	bl	8000168 <__aeabi_dsub>
 800a060:	4652      	mov	r2, sl
 800a062:	465b      	mov	r3, fp
 800a064:	f7f6 f880 	bl	8000168 <__aeabi_dsub>
 800a068:	4602      	mov	r2, r0
 800a06a:	460b      	mov	r3, r1
 800a06c:	4630      	mov	r0, r6
 800a06e:	4639      	mov	r1, r7
 800a070:	f7f6 f87a 	bl	8000168 <__aeabi_dsub>
 800a074:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a078:	f7f6 fa2e 	bl	80004d8 <__aeabi_dmul>
 800a07c:	4622      	mov	r2, r4
 800a07e:	4606      	mov	r6, r0
 800a080:	460f      	mov	r7, r1
 800a082:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a086:	462b      	mov	r3, r5
 800a088:	f7f6 fa26 	bl	80004d8 <__aeabi_dmul>
 800a08c:	4602      	mov	r2, r0
 800a08e:	460b      	mov	r3, r1
 800a090:	4630      	mov	r0, r6
 800a092:	4639      	mov	r1, r7
 800a094:	f7f6 f86a 	bl	800016c <__adddf3>
 800a098:	2400      	movs	r4, #0
 800a09a:	4606      	mov	r6, r0
 800a09c:	460f      	mov	r7, r1
 800a09e:	4602      	mov	r2, r0
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	4640      	mov	r0, r8
 800a0a4:	4649      	mov	r1, r9
 800a0a6:	f7f6 f861 	bl	800016c <__adddf3>
 800a0aa:	a33b      	add	r3, pc, #236	; (adr r3, 800a198 <__ieee754_pow+0x718>)
 800a0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	460d      	mov	r5, r1
 800a0b4:	f7f6 fa10 	bl	80004d8 <__aeabi_dmul>
 800a0b8:	4642      	mov	r2, r8
 800a0ba:	464b      	mov	r3, r9
 800a0bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	4629      	mov	r1, r5
 800a0c4:	f7f6 f850 	bl	8000168 <__aeabi_dsub>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	4630      	mov	r0, r6
 800a0ce:	4639      	mov	r1, r7
 800a0d0:	f7f6 f84a 	bl	8000168 <__aeabi_dsub>
 800a0d4:	a332      	add	r3, pc, #200	; (adr r3, 800a1a0 <__ieee754_pow+0x720>)
 800a0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0da:	f7f6 f9fd 	bl	80004d8 <__aeabi_dmul>
 800a0de:	a332      	add	r3, pc, #200	; (adr r3, 800a1a8 <__ieee754_pow+0x728>)
 800a0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e4:	4606      	mov	r6, r0
 800a0e6:	460f      	mov	r7, r1
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	4629      	mov	r1, r5
 800a0ec:	f7f6 f9f4 	bl	80004d8 <__aeabi_dmul>
 800a0f0:	4602      	mov	r2, r0
 800a0f2:	460b      	mov	r3, r1
 800a0f4:	4630      	mov	r0, r6
 800a0f6:	4639      	mov	r1, r7
 800a0f8:	f7f6 f838 	bl	800016c <__adddf3>
 800a0fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0fe:	4b33      	ldr	r3, [pc, #204]	; (800a1cc <__ieee754_pow+0x74c>)
 800a100:	f04f 0a00 	mov.w	sl, #0
 800a104:	4413      	add	r3, r2
 800a106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10a:	f7f6 f82f 	bl	800016c <__adddf3>
 800a10e:	4680      	mov	r8, r0
 800a110:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a112:	4689      	mov	r9, r1
 800a114:	f7f6 f976 	bl	8000404 <__aeabi_i2d>
 800a118:	4604      	mov	r4, r0
 800a11a:	460d      	mov	r5, r1
 800a11c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a11e:	4b2c      	ldr	r3, [pc, #176]	; (800a1d0 <__ieee754_pow+0x750>)
 800a120:	4413      	add	r3, r2
 800a122:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a126:	4642      	mov	r2, r8
 800a128:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a12c:	464b      	mov	r3, r9
 800a12e:	f7f6 f81d 	bl	800016c <__adddf3>
 800a132:	4632      	mov	r2, r6
 800a134:	463b      	mov	r3, r7
 800a136:	f7f6 f819 	bl	800016c <__adddf3>
 800a13a:	4622      	mov	r2, r4
 800a13c:	462b      	mov	r3, r5
 800a13e:	f7f6 f815 	bl	800016c <__adddf3>
 800a142:	4622      	mov	r2, r4
 800a144:	462b      	mov	r3, r5
 800a146:	4650      	mov	r0, sl
 800a148:	468b      	mov	fp, r1
 800a14a:	f7f6 f80d 	bl	8000168 <__aeabi_dsub>
 800a14e:	4632      	mov	r2, r6
 800a150:	463b      	mov	r3, r7
 800a152:	f7f6 f809 	bl	8000168 <__aeabi_dsub>
 800a156:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a15a:	f7f6 f805 	bl	8000168 <__aeabi_dsub>
 800a15e:	4602      	mov	r2, r0
 800a160:	460b      	mov	r3, r1
 800a162:	4640      	mov	r0, r8
 800a164:	4649      	mov	r1, r9
 800a166:	e60d      	b.n	8009d84 <__ieee754_pow+0x304>
 800a168:	4a454eef 	.word	0x4a454eef
 800a16c:	3fca7e28 	.word	0x3fca7e28
 800a170:	93c9db65 	.word	0x93c9db65
 800a174:	3fcd864a 	.word	0x3fcd864a
 800a178:	a91d4101 	.word	0xa91d4101
 800a17c:	3fd17460 	.word	0x3fd17460
 800a180:	518f264d 	.word	0x518f264d
 800a184:	3fd55555 	.word	0x3fd55555
 800a188:	db6fabff 	.word	0xdb6fabff
 800a18c:	3fdb6db6 	.word	0x3fdb6db6
 800a190:	33333303 	.word	0x33333303
 800a194:	3fe33333 	.word	0x3fe33333
 800a198:	e0000000 	.word	0xe0000000
 800a19c:	3feec709 	.word	0x3feec709
 800a1a0:	dc3a03fd 	.word	0xdc3a03fd
 800a1a4:	3feec709 	.word	0x3feec709
 800a1a8:	145b01f5 	.word	0x145b01f5
 800a1ac:	be3e2fe0 	.word	0xbe3e2fe0
 800a1b0:	7ff00000 	.word	0x7ff00000
 800a1b4:	43400000 	.word	0x43400000
 800a1b8:	0003988e 	.word	0x0003988e
 800a1bc:	000bb679 	.word	0x000bb679
 800a1c0:	0800ac18 	.word	0x0800ac18
 800a1c4:	3ff00000 	.word	0x3ff00000
 800a1c8:	40080000 	.word	0x40080000
 800a1cc:	0800ac38 	.word	0x0800ac38
 800a1d0:	0800ac28 	.word	0x0800ac28
 800a1d4:	2601      	movs	r6, #1
 800a1d6:	e66a      	b.n	8009eae <__ieee754_pow+0x42e>
 800a1d8:	a39d      	add	r3, pc, #628	; (adr r3, 800a450 <__ieee754_pow+0x9d0>)
 800a1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1de:	4640      	mov	r0, r8
 800a1e0:	4649      	mov	r1, r9
 800a1e2:	f7f5 ffc3 	bl	800016c <__adddf3>
 800a1e6:	4622      	mov	r2, r4
 800a1e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1ec:	462b      	mov	r3, r5
 800a1ee:	4650      	mov	r0, sl
 800a1f0:	4639      	mov	r1, r7
 800a1f2:	f7f5 ffb9 	bl	8000168 <__aeabi_dsub>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1fe:	f7f6 fbfb 	bl	80009f8 <__aeabi_dcmpgt>
 800a202:	2800      	cmp	r0, #0
 800a204:	f47f ae09 	bne.w	8009e1a <__ieee754_pow+0x39a>
 800a208:	4aa3      	ldr	r2, [pc, #652]	; (800a498 <__ieee754_pow+0xa18>)
 800a20a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800a20e:	4293      	cmp	r3, r2
 800a210:	f340 8101 	ble.w	800a416 <__ieee754_pow+0x996>
 800a214:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a218:	2000      	movs	r0, #0
 800a21a:	151b      	asrs	r3, r3, #20
 800a21c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a220:	fa4a f303 	asr.w	r3, sl, r3
 800a224:	4433      	add	r3, r6
 800a226:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a22a:	4f9c      	ldr	r7, [pc, #624]	; (800a49c <__ieee754_pow+0xa1c>)
 800a22c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a230:	4117      	asrs	r7, r2
 800a232:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a236:	ea23 0107 	bic.w	r1, r3, r7
 800a23a:	f1c2 0214 	rsb	r2, r2, #20
 800a23e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a242:	460b      	mov	r3, r1
 800a244:	fa4a fa02 	asr.w	sl, sl, r2
 800a248:	2e00      	cmp	r6, #0
 800a24a:	4602      	mov	r2, r0
 800a24c:	4629      	mov	r1, r5
 800a24e:	4620      	mov	r0, r4
 800a250:	bfb8      	it	lt
 800a252:	f1ca 0a00 	rsblt	sl, sl, #0
 800a256:	f7f5 ff87 	bl	8000168 <__aeabi_dsub>
 800a25a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a25e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a262:	2400      	movs	r4, #0
 800a264:	4642      	mov	r2, r8
 800a266:	464b      	mov	r3, r9
 800a268:	f7f5 ff80 	bl	800016c <__adddf3>
 800a26c:	a37a      	add	r3, pc, #488	; (adr r3, 800a458 <__ieee754_pow+0x9d8>)
 800a26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a272:	4620      	mov	r0, r4
 800a274:	460d      	mov	r5, r1
 800a276:	f7f6 f92f 	bl	80004d8 <__aeabi_dmul>
 800a27a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a27e:	4606      	mov	r6, r0
 800a280:	460f      	mov	r7, r1
 800a282:	4620      	mov	r0, r4
 800a284:	4629      	mov	r1, r5
 800a286:	f7f5 ff6f 	bl	8000168 <__aeabi_dsub>
 800a28a:	4602      	mov	r2, r0
 800a28c:	460b      	mov	r3, r1
 800a28e:	4640      	mov	r0, r8
 800a290:	4649      	mov	r1, r9
 800a292:	f7f5 ff69 	bl	8000168 <__aeabi_dsub>
 800a296:	a372      	add	r3, pc, #456	; (adr r3, 800a460 <__ieee754_pow+0x9e0>)
 800a298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29c:	f7f6 f91c 	bl	80004d8 <__aeabi_dmul>
 800a2a0:	a371      	add	r3, pc, #452	; (adr r3, 800a468 <__ieee754_pow+0x9e8>)
 800a2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a6:	4680      	mov	r8, r0
 800a2a8:	4689      	mov	r9, r1
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	4629      	mov	r1, r5
 800a2ae:	f7f6 f913 	bl	80004d8 <__aeabi_dmul>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	4640      	mov	r0, r8
 800a2b8:	4649      	mov	r1, r9
 800a2ba:	f7f5 ff57 	bl	800016c <__adddf3>
 800a2be:	4604      	mov	r4, r0
 800a2c0:	460d      	mov	r5, r1
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	4639      	mov	r1, r7
 800a2ca:	f7f5 ff4f 	bl	800016c <__adddf3>
 800a2ce:	4632      	mov	r2, r6
 800a2d0:	463b      	mov	r3, r7
 800a2d2:	4680      	mov	r8, r0
 800a2d4:	4689      	mov	r9, r1
 800a2d6:	f7f5 ff47 	bl	8000168 <__aeabi_dsub>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	460b      	mov	r3, r1
 800a2de:	4620      	mov	r0, r4
 800a2e0:	4629      	mov	r1, r5
 800a2e2:	f7f5 ff41 	bl	8000168 <__aeabi_dsub>
 800a2e6:	4642      	mov	r2, r8
 800a2e8:	4606      	mov	r6, r0
 800a2ea:	460f      	mov	r7, r1
 800a2ec:	464b      	mov	r3, r9
 800a2ee:	4640      	mov	r0, r8
 800a2f0:	4649      	mov	r1, r9
 800a2f2:	f7f6 f8f1 	bl	80004d8 <__aeabi_dmul>
 800a2f6:	a35e      	add	r3, pc, #376	; (adr r3, 800a470 <__ieee754_pow+0x9f0>)
 800a2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fc:	4604      	mov	r4, r0
 800a2fe:	460d      	mov	r5, r1
 800a300:	f7f6 f8ea 	bl	80004d8 <__aeabi_dmul>
 800a304:	a35c      	add	r3, pc, #368	; (adr r3, 800a478 <__ieee754_pow+0x9f8>)
 800a306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30a:	f7f5 ff2d 	bl	8000168 <__aeabi_dsub>
 800a30e:	4622      	mov	r2, r4
 800a310:	462b      	mov	r3, r5
 800a312:	f7f6 f8e1 	bl	80004d8 <__aeabi_dmul>
 800a316:	a35a      	add	r3, pc, #360	; (adr r3, 800a480 <__ieee754_pow+0xa00>)
 800a318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31c:	f7f5 ff26 	bl	800016c <__adddf3>
 800a320:	4622      	mov	r2, r4
 800a322:	462b      	mov	r3, r5
 800a324:	f7f6 f8d8 	bl	80004d8 <__aeabi_dmul>
 800a328:	a357      	add	r3, pc, #348	; (adr r3, 800a488 <__ieee754_pow+0xa08>)
 800a32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32e:	f7f5 ff1b 	bl	8000168 <__aeabi_dsub>
 800a332:	4622      	mov	r2, r4
 800a334:	462b      	mov	r3, r5
 800a336:	f7f6 f8cf 	bl	80004d8 <__aeabi_dmul>
 800a33a:	a355      	add	r3, pc, #340	; (adr r3, 800a490 <__ieee754_pow+0xa10>)
 800a33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a340:	f7f5 ff14 	bl	800016c <__adddf3>
 800a344:	4622      	mov	r2, r4
 800a346:	462b      	mov	r3, r5
 800a348:	f7f6 f8c6 	bl	80004d8 <__aeabi_dmul>
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	4640      	mov	r0, r8
 800a352:	4649      	mov	r1, r9
 800a354:	f7f5 ff08 	bl	8000168 <__aeabi_dsub>
 800a358:	4604      	mov	r4, r0
 800a35a:	460d      	mov	r5, r1
 800a35c:	4602      	mov	r2, r0
 800a35e:	460b      	mov	r3, r1
 800a360:	4640      	mov	r0, r8
 800a362:	4649      	mov	r1, r9
 800a364:	f7f6 f8b8 	bl	80004d8 <__aeabi_dmul>
 800a368:	2200      	movs	r2, #0
 800a36a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a36e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a372:	4620      	mov	r0, r4
 800a374:	4629      	mov	r1, r5
 800a376:	f7f5 fef7 	bl	8000168 <__aeabi_dsub>
 800a37a:	4602      	mov	r2, r0
 800a37c:	460b      	mov	r3, r1
 800a37e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a382:	f7f6 f9d3 	bl	800072c <__aeabi_ddiv>
 800a386:	4632      	mov	r2, r6
 800a388:	4604      	mov	r4, r0
 800a38a:	460d      	mov	r5, r1
 800a38c:	463b      	mov	r3, r7
 800a38e:	4640      	mov	r0, r8
 800a390:	4649      	mov	r1, r9
 800a392:	f7f6 f8a1 	bl	80004d8 <__aeabi_dmul>
 800a396:	4632      	mov	r2, r6
 800a398:	463b      	mov	r3, r7
 800a39a:	f7f5 fee7 	bl	800016c <__adddf3>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	4629      	mov	r1, r5
 800a3a6:	f7f5 fedf 	bl	8000168 <__aeabi_dsub>
 800a3aa:	4642      	mov	r2, r8
 800a3ac:	464b      	mov	r3, r9
 800a3ae:	f7f5 fedb 	bl	8000168 <__aeabi_dsub>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	2000      	movs	r0, #0
 800a3b8:	4939      	ldr	r1, [pc, #228]	; (800a4a0 <__ieee754_pow+0xa20>)
 800a3ba:	f7f5 fed5 	bl	8000168 <__aeabi_dsub>
 800a3be:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a3c2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a3c6:	da29      	bge.n	800a41c <__ieee754_pow+0x99c>
 800a3c8:	4652      	mov	r2, sl
 800a3ca:	f000 f951 	bl	800a670 <scalbn>
 800a3ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3d2:	f7ff bbfe 	b.w	8009bd2 <__ieee754_pow+0x152>
 800a3d6:	4b33      	ldr	r3, [pc, #204]	; (800a4a4 <__ieee754_pow+0xa24>)
 800a3d8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a3dc:	429f      	cmp	r7, r3
 800a3de:	f77f af13 	ble.w	800a208 <__ieee754_pow+0x788>
 800a3e2:	4b31      	ldr	r3, [pc, #196]	; (800a4a8 <__ieee754_pow+0xa28>)
 800a3e4:	440b      	add	r3, r1
 800a3e6:	4303      	orrs	r3, r0
 800a3e8:	d009      	beq.n	800a3fe <__ieee754_pow+0x97e>
 800a3ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	f7f6 fae3 	bl	80009bc <__aeabi_dcmplt>
 800a3f6:	3800      	subs	r0, #0
 800a3f8:	bf18      	it	ne
 800a3fa:	2001      	movne	r0, #1
 800a3fc:	e453      	b.n	8009ca6 <__ieee754_pow+0x226>
 800a3fe:	4622      	mov	r2, r4
 800a400:	462b      	mov	r3, r5
 800a402:	f7f5 feb1 	bl	8000168 <__aeabi_dsub>
 800a406:	4642      	mov	r2, r8
 800a408:	464b      	mov	r3, r9
 800a40a:	f7f6 faeb 	bl	80009e4 <__aeabi_dcmpge>
 800a40e:	2800      	cmp	r0, #0
 800a410:	f43f aefa 	beq.w	800a208 <__ieee754_pow+0x788>
 800a414:	e7e9      	b.n	800a3ea <__ieee754_pow+0x96a>
 800a416:	f04f 0a00 	mov.w	sl, #0
 800a41a:	e720      	b.n	800a25e <__ieee754_pow+0x7de>
 800a41c:	4621      	mov	r1, r4
 800a41e:	e7d6      	b.n	800a3ce <__ieee754_pow+0x94e>
 800a420:	f04f 0b00 	mov.w	fp, #0
 800a424:	f8df c078 	ldr.w	ip, [pc, #120]	; 800a4a0 <__ieee754_pow+0xa20>
 800a428:	f7ff bbba 	b.w	8009ba0 <__ieee754_pow+0x120>
 800a42c:	f04f 0b00 	mov.w	fp, #0
 800a430:	f04f 0c00 	mov.w	ip, #0
 800a434:	f7ff bbb4 	b.w	8009ba0 <__ieee754_pow+0x120>
 800a438:	4640      	mov	r0, r8
 800a43a:	4649      	mov	r1, r9
 800a43c:	f7ff bb3d 	b.w	8009aba <__ieee754_pow+0x3a>
 800a440:	9200      	str	r2, [sp, #0]
 800a442:	f7ff bb89 	b.w	8009b58 <__ieee754_pow+0xd8>
 800a446:	2300      	movs	r3, #0
 800a448:	f7ff bb73 	b.w	8009b32 <__ieee754_pow+0xb2>
 800a44c:	f3af 8000 	nop.w
 800a450:	652b82fe 	.word	0x652b82fe
 800a454:	3c971547 	.word	0x3c971547
 800a458:	00000000 	.word	0x00000000
 800a45c:	3fe62e43 	.word	0x3fe62e43
 800a460:	fefa39ef 	.word	0xfefa39ef
 800a464:	3fe62e42 	.word	0x3fe62e42
 800a468:	0ca86c39 	.word	0x0ca86c39
 800a46c:	be205c61 	.word	0xbe205c61
 800a470:	72bea4d0 	.word	0x72bea4d0
 800a474:	3e663769 	.word	0x3e663769
 800a478:	c5d26bf1 	.word	0xc5d26bf1
 800a47c:	3ebbbd41 	.word	0x3ebbbd41
 800a480:	af25de2c 	.word	0xaf25de2c
 800a484:	3f11566a 	.word	0x3f11566a
 800a488:	16bebd93 	.word	0x16bebd93
 800a48c:	3f66c16c 	.word	0x3f66c16c
 800a490:	5555553e 	.word	0x5555553e
 800a494:	3fc55555 	.word	0x3fc55555
 800a498:	3fe00000 	.word	0x3fe00000
 800a49c:	000fffff 	.word	0x000fffff
 800a4a0:	3ff00000 	.word	0x3ff00000
 800a4a4:	4090cbff 	.word	0x4090cbff
 800a4a8:	3f6f3400 	.word	0x3f6f3400

0800a4ac <__ieee754_sqrt>:
 800a4ac:	f8df c158 	ldr.w	ip, [pc, #344]	; 800a608 <__ieee754_sqrt+0x15c>
 800a4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b4:	ea3c 0c01 	bics.w	ip, ip, r1
 800a4b8:	4606      	mov	r6, r0
 800a4ba:	460d      	mov	r5, r1
 800a4bc:	460c      	mov	r4, r1
 800a4be:	460a      	mov	r2, r1
 800a4c0:	4607      	mov	r7, r0
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	d10f      	bne.n	800a4e6 <__ieee754_sqrt+0x3a>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	f7f6 f805 	bl	80004d8 <__aeabi_dmul>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	4629      	mov	r1, r5
 800a4d6:	f7f5 fe49 	bl	800016c <__adddf3>
 800a4da:	4606      	mov	r6, r0
 800a4dc:	460d      	mov	r5, r1
 800a4de:	4630      	mov	r0, r6
 800a4e0:	4629      	mov	r1, r5
 800a4e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4e6:	2900      	cmp	r1, #0
 800a4e8:	dc0e      	bgt.n	800a508 <__ieee754_sqrt+0x5c>
 800a4ea:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a4ee:	ea5c 0707 	orrs.w	r7, ip, r7
 800a4f2:	d0f4      	beq.n	800a4de <__ieee754_sqrt+0x32>
 800a4f4:	b141      	cbz	r1, 800a508 <__ieee754_sqrt+0x5c>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	f7f5 fe35 	bl	8000168 <__aeabi_dsub>
 800a4fe:	4602      	mov	r2, r0
 800a500:	460b      	mov	r3, r1
 800a502:	f7f6 f913 	bl	800072c <__aeabi_ddiv>
 800a506:	e7e8      	b.n	800a4da <__ieee754_sqrt+0x2e>
 800a508:	1521      	asrs	r1, r4, #20
 800a50a:	d075      	beq.n	800a5f8 <__ieee754_sqrt+0x14c>
 800a50c:	07cc      	lsls	r4, r1, #31
 800a50e:	f04f 0400 	mov.w	r4, #0
 800a512:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a516:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800a51a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a51e:	bf5e      	ittt	pl
 800a520:	0fd9      	lsrpl	r1, r3, #31
 800a522:	005b      	lslpl	r3, r3, #1
 800a524:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800a528:	0fd9      	lsrs	r1, r3, #31
 800a52a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800a52e:	2516      	movs	r5, #22
 800a530:	4620      	mov	r0, r4
 800a532:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a536:	107f      	asrs	r7, r7, #1
 800a538:	005b      	lsls	r3, r3, #1
 800a53a:	1846      	adds	r6, r0, r1
 800a53c:	4296      	cmp	r6, r2
 800a53e:	bfde      	ittt	le
 800a540:	1b92      	suble	r2, r2, r6
 800a542:	1870      	addle	r0, r6, r1
 800a544:	1864      	addle	r4, r4, r1
 800a546:	0052      	lsls	r2, r2, #1
 800a548:	3d01      	subs	r5, #1
 800a54a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a54e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a552:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a556:	d1f0      	bne.n	800a53a <__ieee754_sqrt+0x8e>
 800a558:	4629      	mov	r1, r5
 800a55a:	f04f 0e20 	mov.w	lr, #32
 800a55e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a562:	4282      	cmp	r2, r0
 800a564:	eb06 0c05 	add.w	ip, r6, r5
 800a568:	dc02      	bgt.n	800a570 <__ieee754_sqrt+0xc4>
 800a56a:	d113      	bne.n	800a594 <__ieee754_sqrt+0xe8>
 800a56c:	459c      	cmp	ip, r3
 800a56e:	d811      	bhi.n	800a594 <__ieee754_sqrt+0xe8>
 800a570:	f1bc 0f00 	cmp.w	ip, #0
 800a574:	eb0c 0506 	add.w	r5, ip, r6
 800a578:	da43      	bge.n	800a602 <__ieee754_sqrt+0x156>
 800a57a:	2d00      	cmp	r5, #0
 800a57c:	db41      	blt.n	800a602 <__ieee754_sqrt+0x156>
 800a57e:	f100 0801 	add.w	r8, r0, #1
 800a582:	1a12      	subs	r2, r2, r0
 800a584:	4640      	mov	r0, r8
 800a586:	459c      	cmp	ip, r3
 800a588:	bf88      	it	hi
 800a58a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a58e:	eba3 030c 	sub.w	r3, r3, ip
 800a592:	4431      	add	r1, r6
 800a594:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a598:	f1be 0e01 	subs.w	lr, lr, #1
 800a59c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800a5a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a5a4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a5a8:	d1db      	bne.n	800a562 <__ieee754_sqrt+0xb6>
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	d006      	beq.n	800a5bc <__ieee754_sqrt+0x110>
 800a5ae:	1c48      	adds	r0, r1, #1
 800a5b0:	bf0b      	itete	eq
 800a5b2:	4671      	moveq	r1, lr
 800a5b4:	3101      	addne	r1, #1
 800a5b6:	3401      	addeq	r4, #1
 800a5b8:	f021 0101 	bicne.w	r1, r1, #1
 800a5bc:	1063      	asrs	r3, r4, #1
 800a5be:	0849      	lsrs	r1, r1, #1
 800a5c0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a5c4:	07e2      	lsls	r2, r4, #31
 800a5c6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a5ca:	bf48      	it	mi
 800a5cc:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a5d0:	460e      	mov	r6, r1
 800a5d2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a5d6:	e782      	b.n	800a4de <__ieee754_sqrt+0x32>
 800a5d8:	0ada      	lsrs	r2, r3, #11
 800a5da:	3815      	subs	r0, #21
 800a5dc:	055b      	lsls	r3, r3, #21
 800a5de:	2a00      	cmp	r2, #0
 800a5e0:	d0fa      	beq.n	800a5d8 <__ieee754_sqrt+0x12c>
 800a5e2:	02d5      	lsls	r5, r2, #11
 800a5e4:	d50a      	bpl.n	800a5fc <__ieee754_sqrt+0x150>
 800a5e6:	f1c1 0420 	rsb	r4, r1, #32
 800a5ea:	fa23 f404 	lsr.w	r4, r3, r4
 800a5ee:	1e4d      	subs	r5, r1, #1
 800a5f0:	408b      	lsls	r3, r1
 800a5f2:	4322      	orrs	r2, r4
 800a5f4:	1b41      	subs	r1, r0, r5
 800a5f6:	e789      	b.n	800a50c <__ieee754_sqrt+0x60>
 800a5f8:	4608      	mov	r0, r1
 800a5fa:	e7f0      	b.n	800a5de <__ieee754_sqrt+0x132>
 800a5fc:	0052      	lsls	r2, r2, #1
 800a5fe:	3101      	adds	r1, #1
 800a600:	e7ef      	b.n	800a5e2 <__ieee754_sqrt+0x136>
 800a602:	4680      	mov	r8, r0
 800a604:	e7bd      	b.n	800a582 <__ieee754_sqrt+0xd6>
 800a606:	bf00      	nop
 800a608:	7ff00000 	.word	0x7ff00000

0800a60c <with_errno>:
 800a60c:	b570      	push	{r4, r5, r6, lr}
 800a60e:	4604      	mov	r4, r0
 800a610:	460d      	mov	r5, r1
 800a612:	4616      	mov	r6, r2
 800a614:	f7fc f90e 	bl	8006834 <__errno>
 800a618:	4629      	mov	r1, r5
 800a61a:	6006      	str	r6, [r0, #0]
 800a61c:	4620      	mov	r0, r4
 800a61e:	bd70      	pop	{r4, r5, r6, pc}

0800a620 <xflow>:
 800a620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a622:	4615      	mov	r5, r2
 800a624:	461c      	mov	r4, r3
 800a626:	b180      	cbz	r0, 800a64a <xflow+0x2a>
 800a628:	4610      	mov	r0, r2
 800a62a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a62e:	e9cd 0100 	strd	r0, r1, [sp]
 800a632:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a636:	4628      	mov	r0, r5
 800a638:	4621      	mov	r1, r4
 800a63a:	f7f5 ff4d 	bl	80004d8 <__aeabi_dmul>
 800a63e:	2222      	movs	r2, #34	; 0x22
 800a640:	b003      	add	sp, #12
 800a642:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a646:	f7ff bfe1 	b.w	800a60c <with_errno>
 800a64a:	4610      	mov	r0, r2
 800a64c:	4619      	mov	r1, r3
 800a64e:	e7ee      	b.n	800a62e <xflow+0xe>

0800a650 <__math_uflow>:
 800a650:	2200      	movs	r2, #0
 800a652:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a656:	f7ff bfe3 	b.w	800a620 <xflow>

0800a65a <__math_oflow>:
 800a65a:	2200      	movs	r2, #0
 800a65c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a660:	f7ff bfde 	b.w	800a620 <xflow>

0800a664 <finite>:
 800a664:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800a668:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a66c:	0fc0      	lsrs	r0, r0, #31
 800a66e:	4770      	bx	lr

0800a670 <scalbn>:
 800a670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a672:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800a676:	4604      	mov	r4, r0
 800a678:	460d      	mov	r5, r1
 800a67a:	4617      	mov	r7, r2
 800a67c:	460b      	mov	r3, r1
 800a67e:	b996      	cbnz	r6, 800a6a6 <scalbn+0x36>
 800a680:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a684:	4303      	orrs	r3, r0
 800a686:	d039      	beq.n	800a6fc <scalbn+0x8c>
 800a688:	4b33      	ldr	r3, [pc, #204]	; (800a758 <scalbn+0xe8>)
 800a68a:	2200      	movs	r2, #0
 800a68c:	f7f5 ff24 	bl	80004d8 <__aeabi_dmul>
 800a690:	4b32      	ldr	r3, [pc, #200]	; (800a75c <scalbn+0xec>)
 800a692:	4604      	mov	r4, r0
 800a694:	429f      	cmp	r7, r3
 800a696:	460d      	mov	r5, r1
 800a698:	da0f      	bge.n	800a6ba <scalbn+0x4a>
 800a69a:	a32b      	add	r3, pc, #172	; (adr r3, 800a748 <scalbn+0xd8>)
 800a69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a0:	f7f5 ff1a 	bl	80004d8 <__aeabi_dmul>
 800a6a4:	e006      	b.n	800a6b4 <scalbn+0x44>
 800a6a6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a6aa:	4296      	cmp	r6, r2
 800a6ac:	d10a      	bne.n	800a6c4 <scalbn+0x54>
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	f7f5 fd5c 	bl	800016c <__adddf3>
 800a6b4:	4604      	mov	r4, r0
 800a6b6:	460d      	mov	r5, r1
 800a6b8:	e020      	b.n	800a6fc <scalbn+0x8c>
 800a6ba:	460b      	mov	r3, r1
 800a6bc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a6c0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800a6c4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800a6c8:	19b9      	adds	r1, r7, r6
 800a6ca:	4291      	cmp	r1, r2
 800a6cc:	dd0e      	ble.n	800a6ec <scalbn+0x7c>
 800a6ce:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800a6d2:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800a6d6:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800a6da:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800a6de:	4820      	ldr	r0, [pc, #128]	; (800a760 <scalbn+0xf0>)
 800a6e0:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800a6e4:	a31a      	add	r3, pc, #104	; (adr r3, 800a750 <scalbn+0xe0>)
 800a6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ea:	e7d9      	b.n	800a6a0 <scalbn+0x30>
 800a6ec:	2900      	cmp	r1, #0
 800a6ee:	dd08      	ble.n	800a702 <scalbn+0x92>
 800a6f0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a6f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a6f8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	4629      	mov	r1, r5
 800a700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a702:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800a706:	da12      	bge.n	800a72e <scalbn+0xbe>
 800a708:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a70c:	429f      	cmp	r7, r3
 800a70e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800a712:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800a716:	dcdc      	bgt.n	800a6d2 <scalbn+0x62>
 800a718:	a30b      	add	r3, pc, #44	; (adr r3, 800a748 <scalbn+0xd8>)
 800a71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800a722:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800a726:	480f      	ldr	r0, [pc, #60]	; (800a764 <scalbn+0xf4>)
 800a728:	f041 011f 	orr.w	r1, r1, #31
 800a72c:	e7b8      	b.n	800a6a0 <scalbn+0x30>
 800a72e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a732:	3136      	adds	r1, #54	; 0x36
 800a734:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a738:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800a73c:	4620      	mov	r0, r4
 800a73e:	4629      	mov	r1, r5
 800a740:	2200      	movs	r2, #0
 800a742:	4b09      	ldr	r3, [pc, #36]	; (800a768 <scalbn+0xf8>)
 800a744:	e7ac      	b.n	800a6a0 <scalbn+0x30>
 800a746:	bf00      	nop
 800a748:	c2f8f359 	.word	0xc2f8f359
 800a74c:	01a56e1f 	.word	0x01a56e1f
 800a750:	8800759c 	.word	0x8800759c
 800a754:	7e37e43c 	.word	0x7e37e43c
 800a758:	43500000 	.word	0x43500000
 800a75c:	ffff3cb0 	.word	0xffff3cb0
 800a760:	8800759c 	.word	0x8800759c
 800a764:	c2f8f359 	.word	0xc2f8f359
 800a768:	3c900000 	.word	0x3c900000

0800a76c <_init>:
 800a76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76e:	bf00      	nop
 800a770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a772:	bc08      	pop	{r3}
 800a774:	469e      	mov	lr, r3
 800a776:	4770      	bx	lr

0800a778 <_fini>:
 800a778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a77a:	bf00      	nop
 800a77c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a77e:	bc08      	pop	{r3}
 800a780:	469e      	mov	lr, r3
 800a782:	4770      	bx	lr
